{
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name_",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "symbol_",
          "type": "string"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "subtractedValue",
          "type": "uint256"
        }
      ],
      "name": "decreaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "addedValue",
          "type": "uint256"
        }
      ],
      "name": "increaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "allSourcePaths": {
    "3": "/home/ilijapet/.brownie/packages/OpenZeppelin/openzeppelin-contracts@4.0.0/contracts/token/ERC20/ERC20.sol",
    "4": "/home/ilijapet/.brownie/packages/OpenZeppelin/openzeppelin-contracts@4.0.0/contracts/token/ERC20/IERC20.sol",
    "5": "/home/ilijapet/.brownie/packages/OpenZeppelin/openzeppelin-contracts@4.0.0/contracts/utils/Context.sol"
  },
  "ast": {
    "absolutePath": "/home/ilijapet/.brownie/packages/OpenZeppelin/openzeppelin-contracts@4.0.0/contracts/token/ERC20/ERC20.sol",
    "exportedSymbols": {
      "Context": [
        1809
      ],
      "ERC20": [
        1538
      ],
      "IERC20": [
        1911
      ]
    },
    "id": 1539,
    "license": "MIT",
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 1039,
        "literals": [
          "solidity",
          "^",
          "0.8",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "33:23:3"
      },
      {
        "absolutePath": "/home/ilijapet/.brownie/packages/OpenZeppelin/openzeppelin-contracts@4.0.0/contracts/token/ERC20/IERC20.sol",
        "file": "./IERC20.sol",
        "id": 1040,
        "nodeType": "ImportDirective",
        "scope": 1539,
        "sourceUnit": 1912,
        "src": "58:22:3",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "/home/ilijapet/.brownie/packages/OpenZeppelin/openzeppelin-contracts@4.0.0/contracts/utils/Context.sol",
        "file": "../../utils/Context.sol",
        "id": 1041,
        "nodeType": "ImportDirective",
        "scope": 1539,
        "sourceUnit": 1810,
        "src": "81:33:3",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "abstract": false,
        "baseContracts": [
          {
            "baseName": {
              "id": 1043,
              "name": "Context",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 1809,
              "src": "1297:7:3"
            },
            "id": 1044,
            "nodeType": "InheritanceSpecifier",
            "src": "1297:7:3"
          },
          {
            "baseName": {
              "id": 1045,
              "name": "IERC20",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 1911,
              "src": "1306:6:3"
            },
            "id": 1046,
            "nodeType": "InheritanceSpecifier",
            "src": "1306:6:3"
          }
        ],
        "contractDependencies": [
          1809,
          1911
        ],
        "contractKind": "contract",
        "documentation": {
          "id": 1042,
          "nodeType": "StructuredDocumentation",
          "src": "116:1162:3",
          "text": " @dev Implementation of the {IERC20} interface.\n This implementation is agnostic to the way tokens are created. This means\n that a supply mechanism has to be added in a derived contract using {_mint}.\n For a generic mechanism see {ERC20PresetMinterPauser}.\n TIP: For a detailed writeup see our guide\n https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n to implement supply mechanisms].\n We have followed general OpenZeppelin guidelines: functions revert instead\n of returning `false` on failure. This behavior is nonetheless conventional\n and does not conflict with the expectations of ERC20 applications.\n Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n This allows applications to reconstruct the allowance for all accounts just\n by listening to said events. Other implementations of the EIP may not emit\n these events, as it isn't required by the specification.\n Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n functions have been added to mitigate the well-known issues around setting\n allowances. See {IERC20-approve}."
        },
        "fullyImplemented": true,
        "id": 1538,
        "linearizedBaseContracts": [
          1538,
          1911,
          1809
        ],
        "name": "ERC20",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "constant": false,
            "id": 1050,
            "mutability": "mutable",
            "name": "_balances",
            "nodeType": "VariableDeclaration",
            "scope": 1538,
            "src": "1319:46:3",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
              "typeString": "mapping(address => uint256)"
            },
            "typeName": {
              "id": 1049,
              "keyType": {
                "id": 1047,
                "name": "address",
                "nodeType": "ElementaryTypeName",
                "src": "1328:7:3",
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                }
              },
              "nodeType": "Mapping",
              "src": "1319:28:3",
              "typeDescriptions": {
                "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                "typeString": "mapping(address => uint256)"
              },
              "valueType": {
                "id": 1048,
                "name": "uint256",
                "nodeType": "ElementaryTypeName",
                "src": "1339:7:3",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                }
              }
            },
            "visibility": "private"
          },
          {
            "constant": false,
            "id": 1056,
            "mutability": "mutable",
            "name": "_allowances",
            "nodeType": "VariableDeclaration",
            "scope": 1538,
            "src": "1372:69:3",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
              "typeString": "mapping(address => mapping(address => uint256))"
            },
            "typeName": {
              "id": 1055,
              "keyType": {
                "id": 1051,
                "name": "address",
                "nodeType": "ElementaryTypeName",
                "src": "1381:7:3",
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                }
              },
              "nodeType": "Mapping",
              "src": "1372:49:3",
              "typeDescriptions": {
                "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
                "typeString": "mapping(address => mapping(address => uint256))"
              },
              "valueType": {
                "id": 1054,
                "keyType": {
                  "id": 1052,
                  "name": "address",
                  "nodeType": "ElementaryTypeName",
                  "src": "1401:7:3",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  }
                },
                "nodeType": "Mapping",
                "src": "1392:28:3",
                "typeDescriptions": {
                  "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                  "typeString": "mapping(address => uint256)"
                },
                "valueType": {
                  "id": 1053,
                  "name": "uint256",
                  "nodeType": "ElementaryTypeName",
                  "src": "1412:7:3",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                }
              }
            },
            "visibility": "private"
          },
          {
            "constant": false,
            "id": 1058,
            "mutability": "mutable",
            "name": "_totalSupply",
            "nodeType": "VariableDeclaration",
            "scope": 1538,
            "src": "1448:28:3",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 1057,
              "name": "uint256",
              "nodeType": "ElementaryTypeName",
              "src": "1448:7:3",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "visibility": "private"
          },
          {
            "constant": false,
            "id": 1060,
            "mutability": "mutable",
            "name": "_name",
            "nodeType": "VariableDeclaration",
            "scope": 1538,
            "src": "1483:20:3",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_string_storage",
              "typeString": "string"
            },
            "typeName": {
              "id": 1059,
              "name": "string",
              "nodeType": "ElementaryTypeName",
              "src": "1483:6:3",
              "typeDescriptions": {
                "typeIdentifier": "t_string_storage_ptr",
                "typeString": "string"
              }
            },
            "visibility": "private"
          },
          {
            "constant": false,
            "id": 1062,
            "mutability": "mutable",
            "name": "_symbol",
            "nodeType": "VariableDeclaration",
            "scope": 1538,
            "src": "1509:22:3",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_string_storage",
              "typeString": "string"
            },
            "typeName": {
              "id": 1061,
              "name": "string",
              "nodeType": "ElementaryTypeName",
              "src": "1509:6:3",
              "typeDescriptions": {
                "typeIdentifier": "t_string_storage_ptr",
                "typeString": "string"
              }
            },
            "visibility": "private"
          },
          {
            "body": {
              "id": 1078,
              "nodeType": "Block",
              "src": "1899:57:3",
              "statements": [
                {
                  "expression": {
                    "id": 1072,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 1070,
                      "name": "_name",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1060,
                      "src": "1909:5:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_storage",
                        "typeString": "string storage ref"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 1071,
                      "name": "name_",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1065,
                      "src": "1917:5:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_memory_ptr",
                        "typeString": "string memory"
                      }
                    },
                    "src": "1909:13:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage",
                      "typeString": "string storage ref"
                    }
                  },
                  "id": 1073,
                  "nodeType": "ExpressionStatement",
                  "src": "1909:13:3"
                },
                {
                  "expression": {
                    "id": 1076,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 1074,
                      "name": "_symbol",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1062,
                      "src": "1932:7:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_storage",
                        "typeString": "string storage ref"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 1075,
                      "name": "symbol_",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1067,
                      "src": "1942:7:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_memory_ptr",
                        "typeString": "string memory"
                      }
                    },
                    "src": "1932:17:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage",
                      "typeString": "string storage ref"
                    }
                  },
                  "id": 1077,
                  "nodeType": "ExpressionStatement",
                  "src": "1932:17:3"
                }
              ]
            },
            "documentation": {
              "id": 1063,
              "nodeType": "StructuredDocumentation",
              "src": "1538:299:3",
              "text": " @dev Sets the values for {name} and {symbol}.\n The defaut value of {decimals} is 18. To select a different value for\n {decimals} you should overload it.\n All three of these values are immutable: they can only be set once during\n construction."
            },
            "id": 1079,
            "implemented": true,
            "kind": "constructor",
            "modifiers": [],
            "name": "",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1068,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1065,
                  "mutability": "mutable",
                  "name": "name_",
                  "nodeType": "VariableDeclaration",
                  "scope": 1079,
                  "src": "1855:19:3",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 1064,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "1855:6:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1067,
                  "mutability": "mutable",
                  "name": "symbol_",
                  "nodeType": "VariableDeclaration",
                  "scope": 1079,
                  "src": "1876:21:3",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 1066,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "1876:6:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1854:44:3"
            },
            "returnParameters": {
              "id": 1069,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1899:0:3"
            },
            "scope": 1538,
            "src": "1842:114:3",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 1087,
              "nodeType": "Block",
              "src": "2081:29:3",
              "statements": [
                {
                  "expression": {
                    "id": 1085,
                    "name": "_name",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 1060,
                    "src": "2098:5:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage",
                      "typeString": "string storage ref"
                    }
                  },
                  "functionReturnParameters": 1084,
                  "id": 1086,
                  "nodeType": "Return",
                  "src": "2091:12:3"
                }
              ]
            },
            "documentation": {
              "id": 1080,
              "nodeType": "StructuredDocumentation",
              "src": "1962:54:3",
              "text": " @dev Returns the name of the token."
            },
            "functionSelector": "06fdde03",
            "id": 1088,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "name",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1081,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2034:2:3"
            },
            "returnParameters": {
              "id": 1084,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1083,
                  "mutability": "mutable",
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 1088,
                  "src": "2066:13:3",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 1082,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "2066:6:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2065:15:3"
            },
            "scope": 1538,
            "src": "2021:89:3",
            "stateMutability": "view",
            "virtual": true,
            "visibility": "public"
          },
          {
            "body": {
              "id": 1096,
              "nodeType": "Block",
              "src": "2285:31:3",
              "statements": [
                {
                  "expression": {
                    "id": 1094,
                    "name": "_symbol",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 1062,
                    "src": "2302:7:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage",
                      "typeString": "string storage ref"
                    }
                  },
                  "functionReturnParameters": 1093,
                  "id": 1095,
                  "nodeType": "Return",
                  "src": "2295:14:3"
                }
              ]
            },
            "documentation": {
              "id": 1089,
              "nodeType": "StructuredDocumentation",
              "src": "2116:102:3",
              "text": " @dev Returns the symbol of the token, usually a shorter version of the\n name."
            },
            "functionSelector": "95d89b41",
            "id": 1097,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "symbol",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1090,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2238:2:3"
            },
            "returnParameters": {
              "id": 1093,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1092,
                  "mutability": "mutable",
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 1097,
                  "src": "2270:13:3",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 1091,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "2270:6:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2269:15:3"
            },
            "scope": 1538,
            "src": "2223:93:3",
            "stateMutability": "view",
            "virtual": true,
            "visibility": "public"
          },
          {
            "body": {
              "id": 1105,
              "nodeType": "Block",
              "src": "2996:26:3",
              "statements": [
                {
                  "expression": {
                    "hexValue": "3138",
                    "id": 1103,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "number",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "3013:2:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_rational_18_by_1",
                      "typeString": "int_const 18"
                    },
                    "value": "18"
                  },
                  "functionReturnParameters": 1102,
                  "id": 1104,
                  "nodeType": "Return",
                  "src": "3006:9:3"
                }
              ]
            },
            "documentation": {
              "id": 1098,
              "nodeType": "StructuredDocumentation",
              "src": "2322:613:3",
              "text": " @dev Returns the number of decimals used to get its user representation.\n For example, if `decimals` equals `2`, a balance of `505` tokens should\n be displayed to a user as `5,05` (`505 / 10 ** 2`).\n Tokens usually opt for a value of 18, imitating the relationship between\n Ether and Wei. This is the value {ERC20} uses, unless this function is\n overloaded;\n NOTE: This information is only used for _display_ purposes: it in\n no way affects any of the arithmetic of the contract, including\n {IERC20-balanceOf} and {IERC20-transfer}."
            },
            "functionSelector": "313ce567",
            "id": 1106,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "decimals",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1099,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2957:2:3"
            },
            "returnParameters": {
              "id": 1102,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1101,
                  "mutability": "mutable",
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 1106,
                  "src": "2989:5:3",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint8",
                    "typeString": "uint8"
                  },
                  "typeName": {
                    "id": 1100,
                    "name": "uint8",
                    "nodeType": "ElementaryTypeName",
                    "src": "2989:5:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint8",
                      "typeString": "uint8"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2988:7:3"
            },
            "scope": 1538,
            "src": "2940:82:3",
            "stateMutability": "view",
            "virtual": true,
            "visibility": "public"
          },
          {
            "baseFunctions": [
              1842
            ],
            "body": {
              "id": 1115,
              "nodeType": "Block",
              "src": "3152:36:3",
              "statements": [
                {
                  "expression": {
                    "id": 1113,
                    "name": "_totalSupply",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 1058,
                    "src": "3169:12:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "functionReturnParameters": 1112,
                  "id": 1114,
                  "nodeType": "Return",
                  "src": "3162:19:3"
                }
              ]
            },
            "documentation": {
              "id": 1107,
              "nodeType": "StructuredDocumentation",
              "src": "3028:49:3",
              "text": " @dev See {IERC20-totalSupply}."
            },
            "functionSelector": "18160ddd",
            "id": 1116,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "totalSupply",
            "nodeType": "FunctionDefinition",
            "overrides": {
              "id": 1109,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "3125:8:3"
            },
            "parameters": {
              "id": 1108,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "3102:2:3"
            },
            "returnParameters": {
              "id": 1112,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1111,
                  "mutability": "mutable",
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 1116,
                  "src": "3143:7:3",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1110,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "3143:7:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3142:9:3"
            },
            "scope": 1538,
            "src": "3082:106:3",
            "stateMutability": "view",
            "virtual": true,
            "visibility": "public"
          },
          {
            "baseFunctions": [
              1850
            ],
            "body": {
              "id": 1129,
              "nodeType": "Block",
              "src": "3329:42:3",
              "statements": [
                {
                  "expression": {
                    "baseExpression": {
                      "id": 1125,
                      "name": "_balances",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1050,
                      "src": "3346:9:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                        "typeString": "mapping(address => uint256)"
                      }
                    },
                    "id": 1127,
                    "indexExpression": {
                      "id": 1126,
                      "name": "account",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1119,
                      "src": "3356:7:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "isConstant": false,
                    "isLValue": true,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "IndexAccess",
                    "src": "3346:18:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "functionReturnParameters": 1124,
                  "id": 1128,
                  "nodeType": "Return",
                  "src": "3339:25:3"
                }
              ]
            },
            "documentation": {
              "id": 1117,
              "nodeType": "StructuredDocumentation",
              "src": "3194:47:3",
              "text": " @dev See {IERC20-balanceOf}."
            },
            "functionSelector": "70a08231",
            "id": 1130,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "balanceOf",
            "nodeType": "FunctionDefinition",
            "overrides": {
              "id": 1121,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "3302:8:3"
            },
            "parameters": {
              "id": 1120,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1119,
                  "mutability": "mutable",
                  "name": "account",
                  "nodeType": "VariableDeclaration",
                  "scope": 1130,
                  "src": "3265:15:3",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1118,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "3265:7:3",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3264:17:3"
            },
            "returnParameters": {
              "id": 1124,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1123,
                  "mutability": "mutable",
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 1130,
                  "src": "3320:7:3",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1122,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "3320:7:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3319:9:3"
            },
            "scope": 1538,
            "src": "3246:125:3",
            "stateMutability": "view",
            "virtual": true,
            "visibility": "public"
          },
          {
            "baseFunctions": [
              1860
            ],
            "body": {
              "id": 1150,
              "nodeType": "Block",
              "src": "3666:80:3",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [],
                        "expression": {
                          "argumentTypes": [],
                          "id": 1142,
                          "name": "_msgSender",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1797,
                          "src": "3686:10:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
                            "typeString": "function () view returns (address)"
                          }
                        },
                        "id": 1143,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "3686:12:3",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 1144,
                        "name": "recipient",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1133,
                        "src": "3700:9:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 1145,
                        "name": "amount",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1135,
                        "src": "3711:6:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 1141,
                      "name": "_transfer",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1372,
                      "src": "3676:9:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,address,uint256)"
                      }
                    },
                    "id": 1146,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "3676:42:3",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 1147,
                  "nodeType": "ExpressionStatement",
                  "src": "3676:42:3"
                },
                {
                  "expression": {
                    "hexValue": "74727565",
                    "id": 1148,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "bool",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "3735:4:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    },
                    "value": "true"
                  },
                  "functionReturnParameters": 1140,
                  "id": 1149,
                  "nodeType": "Return",
                  "src": "3728:11:3"
                }
              ]
            },
            "documentation": {
              "id": 1131,
              "nodeType": "StructuredDocumentation",
              "src": "3377:192:3",
              "text": " @dev See {IERC20-transfer}.\n Requirements:\n - `recipient` cannot be the zero address.\n - the caller must have a balance of at least `amount`."
            },
            "functionSelector": "a9059cbb",
            "id": 1151,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "transfer",
            "nodeType": "FunctionDefinition",
            "overrides": {
              "id": 1137,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "3642:8:3"
            },
            "parameters": {
              "id": 1136,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1133,
                  "mutability": "mutable",
                  "name": "recipient",
                  "nodeType": "VariableDeclaration",
                  "scope": 1151,
                  "src": "3592:17:3",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1132,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "3592:7:3",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1135,
                  "mutability": "mutable",
                  "name": "amount",
                  "nodeType": "VariableDeclaration",
                  "scope": 1151,
                  "src": "3611:14:3",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1134,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "3611:7:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3591:35:3"
            },
            "returnParameters": {
              "id": 1140,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1139,
                  "mutability": "mutable",
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 1151,
                  "src": "3660:4:3",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 1138,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "3660:4:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3659:6:3"
            },
            "scope": 1538,
            "src": "3574:172:3",
            "stateMutability": "nonpayable",
            "virtual": true,
            "visibility": "public"
          },
          {
            "baseFunctions": [
              1870
            ],
            "body": {
              "id": 1168,
              "nodeType": "Block",
              "src": "3902:51:3",
              "statements": [
                {
                  "expression": {
                    "baseExpression": {
                      "baseExpression": {
                        "id": 1162,
                        "name": "_allowances",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1056,
                        "src": "3919:11:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
                          "typeString": "mapping(address => mapping(address => uint256))"
                        }
                      },
                      "id": 1164,
                      "indexExpression": {
                        "id": 1163,
                        "name": "owner",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1154,
                        "src": "3931:5:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": false,
                      "nodeType": "IndexAccess",
                      "src": "3919:18:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                        "typeString": "mapping(address => uint256)"
                      }
                    },
                    "id": 1166,
                    "indexExpression": {
                      "id": 1165,
                      "name": "spender",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1156,
                      "src": "3938:7:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "isConstant": false,
                    "isLValue": true,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "IndexAccess",
                    "src": "3919:27:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "functionReturnParameters": 1161,
                  "id": 1167,
                  "nodeType": "Return",
                  "src": "3912:34:3"
                }
              ]
            },
            "documentation": {
              "id": 1152,
              "nodeType": "StructuredDocumentation",
              "src": "3752:47:3",
              "text": " @dev See {IERC20-allowance}."
            },
            "functionSelector": "dd62ed3e",
            "id": 1169,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "allowance",
            "nodeType": "FunctionDefinition",
            "overrides": {
              "id": 1158,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "3875:8:3"
            },
            "parameters": {
              "id": 1157,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1154,
                  "mutability": "mutable",
                  "name": "owner",
                  "nodeType": "VariableDeclaration",
                  "scope": 1169,
                  "src": "3823:13:3",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1153,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "3823:7:3",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1156,
                  "mutability": "mutable",
                  "name": "spender",
                  "nodeType": "VariableDeclaration",
                  "scope": 1169,
                  "src": "3838:15:3",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1155,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "3838:7:3",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3822:32:3"
            },
            "returnParameters": {
              "id": 1161,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1160,
                  "mutability": "mutable",
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 1169,
                  "src": "3893:7:3",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1159,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "3893:7:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3892:9:3"
            },
            "scope": 1538,
            "src": "3804:149:3",
            "stateMutability": "view",
            "virtual": true,
            "visibility": "public"
          },
          {
            "baseFunctions": [
              1880
            ],
            "body": {
              "id": 1189,
              "nodeType": "Block",
              "src": "4180:77:3",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [],
                        "expression": {
                          "argumentTypes": [],
                          "id": 1181,
                          "name": "_msgSender",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1797,
                          "src": "4199:10:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
                            "typeString": "function () view returns (address)"
                          }
                        },
                        "id": 1182,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "4199:12:3",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 1183,
                        "name": "spender",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1172,
                        "src": "4213:7:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 1184,
                        "name": "amount",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1174,
                        "src": "4222:6:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 1180,
                      "name": "_approve",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1526,
                      "src": "4190:8:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,address,uint256)"
                      }
                    },
                    "id": 1185,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "4190:39:3",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 1186,
                  "nodeType": "ExpressionStatement",
                  "src": "4190:39:3"
                },
                {
                  "expression": {
                    "hexValue": "74727565",
                    "id": 1187,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "bool",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "4246:4:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    },
                    "value": "true"
                  },
                  "functionReturnParameters": 1179,
                  "id": 1188,
                  "nodeType": "Return",
                  "src": "4239:11:3"
                }
              ]
            },
            "documentation": {
              "id": 1170,
              "nodeType": "StructuredDocumentation",
              "src": "3959:127:3",
              "text": " @dev See {IERC20-approve}.\n Requirements:\n - `spender` cannot be the zero address."
            },
            "functionSelector": "095ea7b3",
            "id": 1190,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "approve",
            "nodeType": "FunctionDefinition",
            "overrides": {
              "id": 1176,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "4156:8:3"
            },
            "parameters": {
              "id": 1175,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1172,
                  "mutability": "mutable",
                  "name": "spender",
                  "nodeType": "VariableDeclaration",
                  "scope": 1190,
                  "src": "4108:15:3",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1171,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "4108:7:3",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1174,
                  "mutability": "mutable",
                  "name": "amount",
                  "nodeType": "VariableDeclaration",
                  "scope": 1190,
                  "src": "4125:14:3",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1173,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "4125:7:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "4107:33:3"
            },
            "returnParameters": {
              "id": 1179,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1178,
                  "mutability": "mutable",
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 1190,
                  "src": "4174:4:3",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 1177,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "4174:4:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "4173:6:3"
            },
            "scope": 1538,
            "src": "4091:166:3",
            "stateMutability": "nonpayable",
            "virtual": true,
            "visibility": "public"
          },
          {
            "baseFunctions": [
              1892
            ],
            "body": {
              "id": 1236,
              "nodeType": "Block",
              "src": "4836:302:3",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 1204,
                        "name": "sender",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1193,
                        "src": "4856:6:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 1205,
                        "name": "recipient",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1195,
                        "src": "4864:9:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 1206,
                        "name": "amount",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1197,
                        "src": "4875:6:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 1203,
                      "name": "_transfer",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1372,
                      "src": "4846:9:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,address,uint256)"
                      }
                    },
                    "id": 1207,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "4846:36:3",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 1208,
                  "nodeType": "ExpressionStatement",
                  "src": "4846:36:3"
                },
                {
                  "assignments": [
                    1210
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 1210,
                      "mutability": "mutable",
                      "name": "currentAllowance",
                      "nodeType": "VariableDeclaration",
                      "scope": 1236,
                      "src": "4893:24:3",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 1209,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "4893:7:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 1217,
                  "initialValue": {
                    "baseExpression": {
                      "baseExpression": {
                        "id": 1211,
                        "name": "_allowances",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1056,
                        "src": "4920:11:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
                          "typeString": "mapping(address => mapping(address => uint256))"
                        }
                      },
                      "id": 1213,
                      "indexExpression": {
                        "id": 1212,
                        "name": "sender",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1193,
                        "src": "4932:6:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": false,
                      "nodeType": "IndexAccess",
                      "src": "4920:19:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                        "typeString": "mapping(address => uint256)"
                      }
                    },
                    "id": 1216,
                    "indexExpression": {
                      "arguments": [],
                      "expression": {
                        "argumentTypes": [],
                        "id": 1214,
                        "name": "_msgSender",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1797,
                        "src": "4940:10:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
                          "typeString": "function () view returns (address)"
                        }
                      },
                      "id": 1215,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "4940:12:3",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "isConstant": false,
                    "isLValue": true,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "IndexAccess",
                    "src": "4920:33:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "4893:60:3"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 1221,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "id": 1219,
                          "name": "currentAllowance",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1210,
                          "src": "4971:16:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": ">=",
                        "rightExpression": {
                          "id": 1220,
                          "name": "amount",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1197,
                          "src": "4991:6:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "4971:26:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "45524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e6365",
                        "id": 1222,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "4999:42:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_974d1b4421da69cc60b481194f0dad36a5bb4e23da810da7a7fb30cdba178330",
                          "typeString": "literal_string \"ERC20: transfer amount exceeds allowance\""
                        },
                        "value": "ERC20: transfer amount exceeds allowance"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_974d1b4421da69cc60b481194f0dad36a5bb4e23da810da7a7fb30cdba178330",
                          "typeString": "literal_string \"ERC20: transfer amount exceeds allowance\""
                        }
                      ],
                      "id": 1218,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "4963:7:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 1223,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "4963:79:3",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 1224,
                  "nodeType": "ExpressionStatement",
                  "src": "4963:79:3"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 1226,
                        "name": "sender",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1193,
                        "src": "5061:6:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "arguments": [],
                        "expression": {
                          "argumentTypes": [],
                          "id": 1227,
                          "name": "_msgSender",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1797,
                          "src": "5069:10:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
                            "typeString": "function () view returns (address)"
                          }
                        },
                        "id": 1228,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "5069:12:3",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 1231,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "id": 1229,
                          "name": "currentAllowance",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1210,
                          "src": "5083:16:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "-",
                        "rightExpression": {
                          "id": 1230,
                          "name": "amount",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1197,
                          "src": "5102:6:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "5083:25:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 1225,
                      "name": "_approve",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1526,
                      "src": "5052:8:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,address,uint256)"
                      }
                    },
                    "id": 1232,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "5052:57:3",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 1233,
                  "nodeType": "ExpressionStatement",
                  "src": "5052:57:3"
                },
                {
                  "expression": {
                    "hexValue": "74727565",
                    "id": 1234,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "bool",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "5127:4:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    },
                    "value": "true"
                  },
                  "functionReturnParameters": 1202,
                  "id": 1235,
                  "nodeType": "Return",
                  "src": "5120:11:3"
                }
              ]
            },
            "documentation": {
              "id": 1191,
              "nodeType": "StructuredDocumentation",
              "src": "4263:456:3",
              "text": " @dev See {IERC20-transferFrom}.\n Emits an {Approval} event indicating the updated allowance. This is not\n required by the EIP. See the note at the beginning of {ERC20}.\n Requirements:\n - `sender` and `recipient` cannot be the zero address.\n - `sender` must have a balance of at least `amount`.\n - the caller must have allowance for ``sender``'s tokens of at least\n `amount`."
            },
            "functionSelector": "23b872dd",
            "id": 1237,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "transferFrom",
            "nodeType": "FunctionDefinition",
            "overrides": {
              "id": 1199,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "4812:8:3"
            },
            "parameters": {
              "id": 1198,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1193,
                  "mutability": "mutable",
                  "name": "sender",
                  "nodeType": "VariableDeclaration",
                  "scope": 1237,
                  "src": "4746:14:3",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1192,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "4746:7:3",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1195,
                  "mutability": "mutable",
                  "name": "recipient",
                  "nodeType": "VariableDeclaration",
                  "scope": 1237,
                  "src": "4762:17:3",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1194,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "4762:7:3",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1197,
                  "mutability": "mutable",
                  "name": "amount",
                  "nodeType": "VariableDeclaration",
                  "scope": 1237,
                  "src": "4781:14:3",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1196,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "4781:7:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "4745:51:3"
            },
            "returnParameters": {
              "id": 1202,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1201,
                  "mutability": "mutable",
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 1237,
                  "src": "4830:4:3",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 1200,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "4830:4:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "4829:6:3"
            },
            "scope": 1538,
            "src": "4724:414:3",
            "stateMutability": "nonpayable",
            "virtual": true,
            "visibility": "public"
          },
          {
            "body": {
              "id": 1263,
              "nodeType": "Block",
              "src": "5627:118:3",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [],
                        "expression": {
                          "argumentTypes": [],
                          "id": 1248,
                          "name": "_msgSender",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1797,
                          "src": "5646:10:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
                            "typeString": "function () view returns (address)"
                          }
                        },
                        "id": 1249,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "5646:12:3",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 1250,
                        "name": "spender",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1240,
                        "src": "5660:7:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 1258,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "baseExpression": {
                            "baseExpression": {
                              "id": 1251,
                              "name": "_allowances",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1056,
                              "src": "5669:11:3",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
                                "typeString": "mapping(address => mapping(address => uint256))"
                              }
                            },
                            "id": 1254,
                            "indexExpression": {
                              "arguments": [],
                              "expression": {
                                "argumentTypes": [],
                                "id": 1252,
                                "name": "_msgSender",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1797,
                                "src": "5681:10:3",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
                                  "typeString": "function () view returns (address)"
                                }
                              },
                              "id": 1253,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "5681:12:3",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "IndexAccess",
                            "src": "5669:25:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                              "typeString": "mapping(address => uint256)"
                            }
                          },
                          "id": 1256,
                          "indexExpression": {
                            "id": 1255,
                            "name": "spender",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1240,
                            "src": "5695:7:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "5669:34:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "+",
                        "rightExpression": {
                          "id": 1257,
                          "name": "addedValue",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1242,
                          "src": "5706:10:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "5669:47:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 1247,
                      "name": "_approve",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1526,
                      "src": "5637:8:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,address,uint256)"
                      }
                    },
                    "id": 1259,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "5637:80:3",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 1260,
                  "nodeType": "ExpressionStatement",
                  "src": "5637:80:3"
                },
                {
                  "expression": {
                    "hexValue": "74727565",
                    "id": 1261,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "bool",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "5734:4:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    },
                    "value": "true"
                  },
                  "functionReturnParameters": 1246,
                  "id": 1262,
                  "nodeType": "Return",
                  "src": "5727:11:3"
                }
              ]
            },
            "documentation": {
              "id": 1238,
              "nodeType": "StructuredDocumentation",
              "src": "5144:384:3",
              "text": " @dev Atomically increases the allowance granted to `spender` by the caller.\n This is an alternative to {approve} that can be used as a mitigation for\n problems described in {IERC20-approve}.\n Emits an {Approval} event indicating the updated allowance.\n Requirements:\n - `spender` cannot be the zero address."
            },
            "functionSelector": "39509351",
            "id": 1264,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "increaseAllowance",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1243,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1240,
                  "mutability": "mutable",
                  "name": "spender",
                  "nodeType": "VariableDeclaration",
                  "scope": 1264,
                  "src": "5560:15:3",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1239,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "5560:7:3",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1242,
                  "mutability": "mutable",
                  "name": "addedValue",
                  "nodeType": "VariableDeclaration",
                  "scope": 1264,
                  "src": "5577:18:3",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1241,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "5577:7:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "5559:37:3"
            },
            "returnParameters": {
              "id": 1246,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1245,
                  "mutability": "mutable",
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 1264,
                  "src": "5621:4:3",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 1244,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "5621:4:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "5620:6:3"
            },
            "scope": 1538,
            "src": "5533:212:3",
            "stateMutability": "nonpayable",
            "virtual": true,
            "visibility": "public"
          },
          {
            "body": {
              "id": 1301,
              "nodeType": "Block",
              "src": "6331:272:3",
              "statements": [
                {
                  "assignments": [
                    1275
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 1275,
                      "mutability": "mutable",
                      "name": "currentAllowance",
                      "nodeType": "VariableDeclaration",
                      "scope": 1301,
                      "src": "6341:24:3",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 1274,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "6341:7:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 1282,
                  "initialValue": {
                    "baseExpression": {
                      "baseExpression": {
                        "id": 1276,
                        "name": "_allowances",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1056,
                        "src": "6368:11:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
                          "typeString": "mapping(address => mapping(address => uint256))"
                        }
                      },
                      "id": 1279,
                      "indexExpression": {
                        "arguments": [],
                        "expression": {
                          "argumentTypes": [],
                          "id": 1277,
                          "name": "_msgSender",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1797,
                          "src": "6380:10:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
                            "typeString": "function () view returns (address)"
                          }
                        },
                        "id": 1278,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "6380:12:3",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": false,
                      "nodeType": "IndexAccess",
                      "src": "6368:25:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                        "typeString": "mapping(address => uint256)"
                      }
                    },
                    "id": 1281,
                    "indexExpression": {
                      "id": 1280,
                      "name": "spender",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1267,
                      "src": "6394:7:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "isConstant": false,
                    "isLValue": true,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "IndexAccess",
                    "src": "6368:34:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "6341:61:3"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 1286,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "id": 1284,
                          "name": "currentAllowance",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1275,
                          "src": "6420:16:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": ">=",
                        "rightExpression": {
                          "id": 1285,
                          "name": "subtractedValue",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1269,
                          "src": "6440:15:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "6420:35:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726f",
                        "id": 1287,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "6457:39:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8",
                          "typeString": "literal_string \"ERC20: decreased allowance below zero\""
                        },
                        "value": "ERC20: decreased allowance below zero"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8",
                          "typeString": "literal_string \"ERC20: decreased allowance below zero\""
                        }
                      ],
                      "id": 1283,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "6412:7:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 1288,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "6412:85:3",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 1289,
                  "nodeType": "ExpressionStatement",
                  "src": "6412:85:3"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [],
                        "expression": {
                          "argumentTypes": [],
                          "id": 1291,
                          "name": "_msgSender",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1797,
                          "src": "6516:10:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
                            "typeString": "function () view returns (address)"
                          }
                        },
                        "id": 1292,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "6516:12:3",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 1293,
                        "name": "spender",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1267,
                        "src": "6530:7:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 1296,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "id": 1294,
                          "name": "currentAllowance",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1275,
                          "src": "6539:16:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "-",
                        "rightExpression": {
                          "id": 1295,
                          "name": "subtractedValue",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1269,
                          "src": "6558:15:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "6539:34:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 1290,
                      "name": "_approve",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1526,
                      "src": "6507:8:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,address,uint256)"
                      }
                    },
                    "id": 1297,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "6507:67:3",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 1298,
                  "nodeType": "ExpressionStatement",
                  "src": "6507:67:3"
                },
                {
                  "expression": {
                    "hexValue": "74727565",
                    "id": 1299,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "bool",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "6592:4:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    },
                    "value": "true"
                  },
                  "functionReturnParameters": 1273,
                  "id": 1300,
                  "nodeType": "Return",
                  "src": "6585:11:3"
                }
              ]
            },
            "documentation": {
              "id": 1265,
              "nodeType": "StructuredDocumentation",
              "src": "5751:476:3",
              "text": " @dev Atomically decreases the allowance granted to `spender` by the caller.\n This is an alternative to {approve} that can be used as a mitigation for\n problems described in {IERC20-approve}.\n Emits an {Approval} event indicating the updated allowance.\n Requirements:\n - `spender` cannot be the zero address.\n - `spender` must have allowance for the caller of at least\n `subtractedValue`."
            },
            "functionSelector": "a457c2d7",
            "id": 1302,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "decreaseAllowance",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1270,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1267,
                  "mutability": "mutable",
                  "name": "spender",
                  "nodeType": "VariableDeclaration",
                  "scope": 1302,
                  "src": "6259:15:3",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1266,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "6259:7:3",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1269,
                  "mutability": "mutable",
                  "name": "subtractedValue",
                  "nodeType": "VariableDeclaration",
                  "scope": 1302,
                  "src": "6276:23:3",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1268,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "6276:7:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "6258:42:3"
            },
            "returnParameters": {
              "id": 1273,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1272,
                  "mutability": "mutable",
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 1302,
                  "src": "6325:4:3",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 1271,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "6325:4:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "6324:6:3"
            },
            "scope": 1538,
            "src": "6232:371:3",
            "stateMutability": "nonpayable",
            "virtual": true,
            "visibility": "public"
          },
          {
            "body": {
              "id": 1371,
              "nodeType": "Block",
              "src": "7164:505:3",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "id": 1318,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "id": 1313,
                          "name": "sender",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1305,
                          "src": "7182:6:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "!=",
                        "rightExpression": {
                          "arguments": [
                            {
                              "hexValue": "30",
                              "id": 1316,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "7200:1:3",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              },
                              "value": "0"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              }
                            ],
                            "id": 1315,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "nodeType": "ElementaryTypeNameExpression",
                            "src": "7192:7:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_address_$",
                              "typeString": "type(address)"
                            },
                            "typeName": {
                              "id": 1314,
                              "name": "address",
                              "nodeType": "ElementaryTypeName",
                              "src": "7192:7:3",
                              "typeDescriptions": {}
                            }
                          },
                          "id": 1317,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "typeConversion",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "7192:10:3",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "src": "7182:20:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "45524332303a207472616e736665722066726f6d20746865207a65726f2061646472657373",
                        "id": 1319,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "7204:39:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea",
                          "typeString": "literal_string \"ERC20: transfer from the zero address\""
                        },
                        "value": "ERC20: transfer from the zero address"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea",
                          "typeString": "literal_string \"ERC20: transfer from the zero address\""
                        }
                      ],
                      "id": 1312,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "7174:7:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 1320,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "7174:70:3",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 1321,
                  "nodeType": "ExpressionStatement",
                  "src": "7174:70:3"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "id": 1328,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "id": 1323,
                          "name": "recipient",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1307,
                          "src": "7262:9:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "!=",
                        "rightExpression": {
                          "arguments": [
                            {
                              "hexValue": "30",
                              "id": 1326,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "7283:1:3",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              },
                              "value": "0"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              }
                            ],
                            "id": 1325,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "nodeType": "ElementaryTypeNameExpression",
                            "src": "7275:7:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_address_$",
                              "typeString": "type(address)"
                            },
                            "typeName": {
                              "id": 1324,
                              "name": "address",
                              "nodeType": "ElementaryTypeName",
                              "src": "7275:7:3",
                              "typeDescriptions": {}
                            }
                          },
                          "id": 1327,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "typeConversion",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "7275:10:3",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "src": "7262:23:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "45524332303a207472616e7366657220746f20746865207a65726f2061646472657373",
                        "id": 1329,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "7287:37:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f",
                          "typeString": "literal_string \"ERC20: transfer to the zero address\""
                        },
                        "value": "ERC20: transfer to the zero address"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f",
                          "typeString": "literal_string \"ERC20: transfer to the zero address\""
                        }
                      ],
                      "id": 1322,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "7254:7:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 1330,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "7254:71:3",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 1331,
                  "nodeType": "ExpressionStatement",
                  "src": "7254:71:3"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 1333,
                        "name": "sender",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1305,
                        "src": "7357:6:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 1334,
                        "name": "recipient",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1307,
                        "src": "7365:9:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 1335,
                        "name": "amount",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1309,
                        "src": "7376:6:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 1332,
                      "name": "_beforeTokenTransfer",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1537,
                      "src": "7336:20:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,address,uint256)"
                      }
                    },
                    "id": 1336,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "7336:47:3",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 1337,
                  "nodeType": "ExpressionStatement",
                  "src": "7336:47:3"
                },
                {
                  "assignments": [
                    1339
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 1339,
                      "mutability": "mutable",
                      "name": "senderBalance",
                      "nodeType": "VariableDeclaration",
                      "scope": 1371,
                      "src": "7394:21:3",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 1338,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "7394:7:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 1343,
                  "initialValue": {
                    "baseExpression": {
                      "id": 1340,
                      "name": "_balances",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1050,
                      "src": "7418:9:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                        "typeString": "mapping(address => uint256)"
                      }
                    },
                    "id": 1342,
                    "indexExpression": {
                      "id": 1341,
                      "name": "sender",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1305,
                      "src": "7428:6:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "isConstant": false,
                    "isLValue": true,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "IndexAccess",
                    "src": "7418:17:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "7394:41:3"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 1347,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "id": 1345,
                          "name": "senderBalance",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1339,
                          "src": "7453:13:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": ">=",
                        "rightExpression": {
                          "id": 1346,
                          "name": "amount",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1309,
                          "src": "7470:6:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "7453:23:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e6365",
                        "id": 1348,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "7478:40:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6",
                          "typeString": "literal_string \"ERC20: transfer amount exceeds balance\""
                        },
                        "value": "ERC20: transfer amount exceeds balance"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6",
                          "typeString": "literal_string \"ERC20: transfer amount exceeds balance\""
                        }
                      ],
                      "id": 1344,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "7445:7:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 1349,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "7445:74:3",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 1350,
                  "nodeType": "ExpressionStatement",
                  "src": "7445:74:3"
                },
                {
                  "expression": {
                    "id": 1357,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "baseExpression": {
                        "id": 1351,
                        "name": "_balances",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1050,
                        "src": "7529:9:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                          "typeString": "mapping(address => uint256)"
                        }
                      },
                      "id": 1353,
                      "indexExpression": {
                        "id": 1352,
                        "name": "sender",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1305,
                        "src": "7539:6:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "7529:17:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "commonType": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "id": 1356,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "leftExpression": {
                        "id": 1354,
                        "name": "senderBalance",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1339,
                        "src": "7549:13:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "nodeType": "BinaryOperation",
                      "operator": "-",
                      "rightExpression": {
                        "id": 1355,
                        "name": "amount",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1309,
                        "src": "7565:6:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "src": "7549:22:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "7529:42:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 1358,
                  "nodeType": "ExpressionStatement",
                  "src": "7529:42:3"
                },
                {
                  "expression": {
                    "id": 1363,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "baseExpression": {
                        "id": 1359,
                        "name": "_balances",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1050,
                        "src": "7581:9:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                          "typeString": "mapping(address => uint256)"
                        }
                      },
                      "id": 1361,
                      "indexExpression": {
                        "id": 1360,
                        "name": "recipient",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1307,
                        "src": "7591:9:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "7581:20:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "+=",
                    "rightHandSide": {
                      "id": 1362,
                      "name": "amount",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1309,
                      "src": "7605:6:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "7581:30:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 1364,
                  "nodeType": "ExpressionStatement",
                  "src": "7581:30:3"
                },
                {
                  "eventCall": {
                    "arguments": [
                      {
                        "id": 1366,
                        "name": "sender",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1305,
                        "src": "7636:6:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 1367,
                        "name": "recipient",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1307,
                        "src": "7644:9:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 1368,
                        "name": "amount",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1309,
                        "src": "7655:6:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 1365,
                      "name": "Transfer",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1901,
                      "src": "7627:8:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,address,uint256)"
                      }
                    },
                    "id": 1369,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "7627:35:3",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 1370,
                  "nodeType": "EmitStatement",
                  "src": "7622:40:3"
                }
              ]
            },
            "documentation": {
              "id": 1303,
              "nodeType": "StructuredDocumentation",
              "src": "6609:463:3",
              "text": " @dev Moves tokens `amount` from `sender` to `recipient`.\n This is internal function is equivalent to {transfer}, and can be used to\n e.g. implement automatic token fees, slashing mechanisms, etc.\n Emits a {Transfer} event.\n Requirements:\n - `sender` cannot be the zero address.\n - `recipient` cannot be the zero address.\n - `sender` must have a balance of at least `amount`."
            },
            "id": 1372,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_transfer",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1310,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1305,
                  "mutability": "mutable",
                  "name": "sender",
                  "nodeType": "VariableDeclaration",
                  "scope": 1372,
                  "src": "7096:14:3",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1304,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "7096:7:3",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1307,
                  "mutability": "mutable",
                  "name": "recipient",
                  "nodeType": "VariableDeclaration",
                  "scope": 1372,
                  "src": "7112:17:3",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1306,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "7112:7:3",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1309,
                  "mutability": "mutable",
                  "name": "amount",
                  "nodeType": "VariableDeclaration",
                  "scope": 1372,
                  "src": "7131:14:3",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1308,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "7131:7:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "7095:51:3"
            },
            "returnParameters": {
              "id": 1311,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "7164:0:3"
            },
            "scope": 1538,
            "src": "7077:592:3",
            "stateMutability": "nonpayable",
            "virtual": true,
            "visibility": "internal"
          },
          {
            "body": {
              "id": 1418,
              "nodeType": "Block",
              "src": "8005:265:3",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "id": 1386,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "id": 1381,
                          "name": "account",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1375,
                          "src": "8023:7:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "!=",
                        "rightExpression": {
                          "arguments": [
                            {
                              "hexValue": "30",
                              "id": 1384,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "8042:1:3",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              },
                              "value": "0"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              }
                            ],
                            "id": 1383,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "nodeType": "ElementaryTypeNameExpression",
                            "src": "8034:7:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_address_$",
                              "typeString": "type(address)"
                            },
                            "typeName": {
                              "id": 1382,
                              "name": "address",
                              "nodeType": "ElementaryTypeName",
                              "src": "8034:7:3",
                              "typeDescriptions": {}
                            }
                          },
                          "id": 1385,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "typeConversion",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "8034:10:3",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "src": "8023:21:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "45524332303a206d696e7420746f20746865207a65726f2061646472657373",
                        "id": 1387,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "8046:33:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e",
                          "typeString": "literal_string \"ERC20: mint to the zero address\""
                        },
                        "value": "ERC20: mint to the zero address"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e",
                          "typeString": "literal_string \"ERC20: mint to the zero address\""
                        }
                      ],
                      "id": 1380,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "8015:7:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 1388,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "8015:65:3",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 1389,
                  "nodeType": "ExpressionStatement",
                  "src": "8015:65:3"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "hexValue": "30",
                            "id": 1393,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "8120:1:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            }
                          ],
                          "id": 1392,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "nodeType": "ElementaryTypeNameExpression",
                          "src": "8112:7:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_address_$",
                            "typeString": "type(address)"
                          },
                          "typeName": {
                            "id": 1391,
                            "name": "address",
                            "nodeType": "ElementaryTypeName",
                            "src": "8112:7:3",
                            "typeDescriptions": {}
                          }
                        },
                        "id": 1394,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "typeConversion",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "8112:10:3",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 1395,
                        "name": "account",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1375,
                        "src": "8124:7:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 1396,
                        "name": "amount",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1377,
                        "src": "8133:6:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 1390,
                      "name": "_beforeTokenTransfer",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1537,
                      "src": "8091:20:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,address,uint256)"
                      }
                    },
                    "id": 1397,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "8091:49:3",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 1398,
                  "nodeType": "ExpressionStatement",
                  "src": "8091:49:3"
                },
                {
                  "expression": {
                    "id": 1401,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 1399,
                      "name": "_totalSupply",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1058,
                      "src": "8151:12:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "+=",
                    "rightHandSide": {
                      "id": 1400,
                      "name": "amount",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1377,
                      "src": "8167:6:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "8151:22:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 1402,
                  "nodeType": "ExpressionStatement",
                  "src": "8151:22:3"
                },
                {
                  "expression": {
                    "id": 1407,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "baseExpression": {
                        "id": 1403,
                        "name": "_balances",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1050,
                        "src": "8183:9:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                          "typeString": "mapping(address => uint256)"
                        }
                      },
                      "id": 1405,
                      "indexExpression": {
                        "id": 1404,
                        "name": "account",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1375,
                        "src": "8193:7:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "8183:18:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "+=",
                    "rightHandSide": {
                      "id": 1406,
                      "name": "amount",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1377,
                      "src": "8205:6:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "8183:28:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 1408,
                  "nodeType": "ExpressionStatement",
                  "src": "8183:28:3"
                },
                {
                  "eventCall": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "hexValue": "30",
                            "id": 1412,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "8243:1:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            }
                          ],
                          "id": 1411,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "nodeType": "ElementaryTypeNameExpression",
                          "src": "8235:7:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_address_$",
                            "typeString": "type(address)"
                          },
                          "typeName": {
                            "id": 1410,
                            "name": "address",
                            "nodeType": "ElementaryTypeName",
                            "src": "8235:7:3",
                            "typeDescriptions": {}
                          }
                        },
                        "id": 1413,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "typeConversion",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "8235:10:3",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 1414,
                        "name": "account",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1375,
                        "src": "8247:7:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 1415,
                        "name": "amount",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1377,
                        "src": "8256:6:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 1409,
                      "name": "Transfer",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1901,
                      "src": "8226:8:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,address,uint256)"
                      }
                    },
                    "id": 1416,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "8226:37:3",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 1417,
                  "nodeType": "EmitStatement",
                  "src": "8221:42:3"
                }
              ]
            },
            "documentation": {
              "id": 1373,
              "nodeType": "StructuredDocumentation",
              "src": "7675:260:3",
              "text": "@dev Creates `amount` tokens and assigns them to `account`, increasing\n the total supply.\n Emits a {Transfer} event with `from` set to the zero address.\n Requirements:\n - `to` cannot be the zero address."
            },
            "id": 1419,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_mint",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1378,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1375,
                  "mutability": "mutable",
                  "name": "account",
                  "nodeType": "VariableDeclaration",
                  "scope": 1419,
                  "src": "7955:15:3",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1374,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "7955:7:3",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1377,
                  "mutability": "mutable",
                  "name": "amount",
                  "nodeType": "VariableDeclaration",
                  "scope": 1419,
                  "src": "7972:14:3",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1376,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "7972:7:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "7954:33:3"
            },
            "returnParameters": {
              "id": 1379,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "8005:0:3"
            },
            "scope": 1538,
            "src": "7940:330:3",
            "stateMutability": "nonpayable",
            "virtual": true,
            "visibility": "internal"
          },
          {
            "body": {
              "id": 1480,
              "nodeType": "Block",
              "src": "8655:418:3",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "id": 1433,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "id": 1428,
                          "name": "account",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1422,
                          "src": "8673:7:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "!=",
                        "rightExpression": {
                          "arguments": [
                            {
                              "hexValue": "30",
                              "id": 1431,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "8692:1:3",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              },
                              "value": "0"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              }
                            ],
                            "id": 1430,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "nodeType": "ElementaryTypeNameExpression",
                            "src": "8684:7:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_address_$",
                              "typeString": "type(address)"
                            },
                            "typeName": {
                              "id": 1429,
                              "name": "address",
                              "nodeType": "ElementaryTypeName",
                              "src": "8684:7:3",
                              "typeDescriptions": {}
                            }
                          },
                          "id": 1432,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "typeConversion",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "8684:10:3",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "src": "8673:21:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "45524332303a206275726e2066726f6d20746865207a65726f2061646472657373",
                        "id": 1434,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "8696:35:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_b16788493b576042bb52c50ed56189e0b250db113c7bfb1c3897d25cf9632d7f",
                          "typeString": "literal_string \"ERC20: burn from the zero address\""
                        },
                        "value": "ERC20: burn from the zero address"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_b16788493b576042bb52c50ed56189e0b250db113c7bfb1c3897d25cf9632d7f",
                          "typeString": "literal_string \"ERC20: burn from the zero address\""
                        }
                      ],
                      "id": 1427,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "8665:7:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 1435,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "8665:67:3",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 1436,
                  "nodeType": "ExpressionStatement",
                  "src": "8665:67:3"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 1438,
                        "name": "account",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1422,
                        "src": "8764:7:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "arguments": [
                          {
                            "hexValue": "30",
                            "id": 1441,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "8781:1:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            }
                          ],
                          "id": 1440,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "nodeType": "ElementaryTypeNameExpression",
                          "src": "8773:7:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_address_$",
                            "typeString": "type(address)"
                          },
                          "typeName": {
                            "id": 1439,
                            "name": "address",
                            "nodeType": "ElementaryTypeName",
                            "src": "8773:7:3",
                            "typeDescriptions": {}
                          }
                        },
                        "id": 1442,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "typeConversion",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "8773:10:3",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 1443,
                        "name": "amount",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1424,
                        "src": "8785:6:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 1437,
                      "name": "_beforeTokenTransfer",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1537,
                      "src": "8743:20:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,address,uint256)"
                      }
                    },
                    "id": 1444,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "8743:49:3",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 1445,
                  "nodeType": "ExpressionStatement",
                  "src": "8743:49:3"
                },
                {
                  "assignments": [
                    1447
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 1447,
                      "mutability": "mutable",
                      "name": "accountBalance",
                      "nodeType": "VariableDeclaration",
                      "scope": 1480,
                      "src": "8803:22:3",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 1446,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "8803:7:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 1451,
                  "initialValue": {
                    "baseExpression": {
                      "id": 1448,
                      "name": "_balances",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1050,
                      "src": "8828:9:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                        "typeString": "mapping(address => uint256)"
                      }
                    },
                    "id": 1450,
                    "indexExpression": {
                      "id": 1449,
                      "name": "account",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1422,
                      "src": "8838:7:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "isConstant": false,
                    "isLValue": true,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "IndexAccess",
                    "src": "8828:18:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "8803:43:3"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 1455,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "id": 1453,
                          "name": "accountBalance",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1447,
                          "src": "8864:14:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": ">=",
                        "rightExpression": {
                          "id": 1454,
                          "name": "amount",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1424,
                          "src": "8882:6:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "8864:24:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "45524332303a206275726e20616d6f756e7420657863656564732062616c616e6365",
                        "id": 1456,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "8890:36:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_149b126e7125232b4200af45303d04fba8b74653b1a295a6a561a528c33fefdd",
                          "typeString": "literal_string \"ERC20: burn amount exceeds balance\""
                        },
                        "value": "ERC20: burn amount exceeds balance"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_149b126e7125232b4200af45303d04fba8b74653b1a295a6a561a528c33fefdd",
                          "typeString": "literal_string \"ERC20: burn amount exceeds balance\""
                        }
                      ],
                      "id": 1452,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "8856:7:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 1457,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "8856:71:3",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 1458,
                  "nodeType": "ExpressionStatement",
                  "src": "8856:71:3"
                },
                {
                  "expression": {
                    "id": 1465,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "baseExpression": {
                        "id": 1459,
                        "name": "_balances",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1050,
                        "src": "8937:9:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                          "typeString": "mapping(address => uint256)"
                        }
                      },
                      "id": 1461,
                      "indexExpression": {
                        "id": 1460,
                        "name": "account",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1422,
                        "src": "8947:7:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "8937:18:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "commonType": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "id": 1464,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "leftExpression": {
                        "id": 1462,
                        "name": "accountBalance",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1447,
                        "src": "8958:14:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "nodeType": "BinaryOperation",
                      "operator": "-",
                      "rightExpression": {
                        "id": 1463,
                        "name": "amount",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1424,
                        "src": "8975:6:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "src": "8958:23:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "8937:44:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 1466,
                  "nodeType": "ExpressionStatement",
                  "src": "8937:44:3"
                },
                {
                  "expression": {
                    "id": 1469,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 1467,
                      "name": "_totalSupply",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1058,
                      "src": "8991:12:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "-=",
                    "rightHandSide": {
                      "id": 1468,
                      "name": "amount",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1424,
                      "src": "9007:6:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "8991:22:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 1470,
                  "nodeType": "ExpressionStatement",
                  "src": "8991:22:3"
                },
                {
                  "eventCall": {
                    "arguments": [
                      {
                        "id": 1472,
                        "name": "account",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1422,
                        "src": "9038:7:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "arguments": [
                          {
                            "hexValue": "30",
                            "id": 1475,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "9055:1:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            }
                          ],
                          "id": 1474,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "nodeType": "ElementaryTypeNameExpression",
                          "src": "9047:7:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_address_$",
                            "typeString": "type(address)"
                          },
                          "typeName": {
                            "id": 1473,
                            "name": "address",
                            "nodeType": "ElementaryTypeName",
                            "src": "9047:7:3",
                            "typeDescriptions": {}
                          }
                        },
                        "id": 1476,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "typeConversion",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "9047:10:3",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 1477,
                        "name": "amount",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1424,
                        "src": "9059:6:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 1471,
                      "name": "Transfer",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1901,
                      "src": "9029:8:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,address,uint256)"
                      }
                    },
                    "id": 1478,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "9029:37:3",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 1479,
                  "nodeType": "EmitStatement",
                  "src": "9024:42:3"
                }
              ]
            },
            "documentation": {
              "id": 1420,
              "nodeType": "StructuredDocumentation",
              "src": "8276:309:3",
              "text": " @dev Destroys `amount` tokens from `account`, reducing the\n total supply.\n Emits a {Transfer} event with `to` set to the zero address.\n Requirements:\n - `account` cannot be the zero address.\n - `account` must have at least `amount` tokens."
            },
            "id": 1481,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_burn",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1425,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1422,
                  "mutability": "mutable",
                  "name": "account",
                  "nodeType": "VariableDeclaration",
                  "scope": 1481,
                  "src": "8605:15:3",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1421,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "8605:7:3",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1424,
                  "mutability": "mutable",
                  "name": "amount",
                  "nodeType": "VariableDeclaration",
                  "scope": 1481,
                  "src": "8622:14:3",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1423,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "8622:7:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "8604:33:3"
            },
            "returnParameters": {
              "id": 1426,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "8655:0:3"
            },
            "scope": 1538,
            "src": "8590:483:3",
            "stateMutability": "nonpayable",
            "virtual": true,
            "visibility": "internal"
          },
          {
            "body": {
              "id": 1525,
              "nodeType": "Block",
              "src": "9579:257:3",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "id": 1497,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "id": 1492,
                          "name": "owner",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1484,
                          "src": "9597:5:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "!=",
                        "rightExpression": {
                          "arguments": [
                            {
                              "hexValue": "30",
                              "id": 1495,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "9614:1:3",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              },
                              "value": "0"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              }
                            ],
                            "id": 1494,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "nodeType": "ElementaryTypeNameExpression",
                            "src": "9606:7:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_address_$",
                              "typeString": "type(address)"
                            },
                            "typeName": {
                              "id": 1493,
                              "name": "address",
                              "nodeType": "ElementaryTypeName",
                              "src": "9606:7:3",
                              "typeDescriptions": {}
                            }
                          },
                          "id": 1496,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "typeConversion",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "9606:10:3",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "src": "9597:19:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "45524332303a20617070726f76652066726f6d20746865207a65726f2061646472657373",
                        "id": 1498,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "9618:38:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208",
                          "typeString": "literal_string \"ERC20: approve from the zero address\""
                        },
                        "value": "ERC20: approve from the zero address"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208",
                          "typeString": "literal_string \"ERC20: approve from the zero address\""
                        }
                      ],
                      "id": 1491,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "9589:7:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 1499,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "9589:68:3",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 1500,
                  "nodeType": "ExpressionStatement",
                  "src": "9589:68:3"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "id": 1507,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "id": 1502,
                          "name": "spender",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1486,
                          "src": "9675:7:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "!=",
                        "rightExpression": {
                          "arguments": [
                            {
                              "hexValue": "30",
                              "id": 1505,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "9694:1:3",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              },
                              "value": "0"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              }
                            ],
                            "id": 1504,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "nodeType": "ElementaryTypeNameExpression",
                            "src": "9686:7:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_address_$",
                              "typeString": "type(address)"
                            },
                            "typeName": {
                              "id": 1503,
                              "name": "address",
                              "nodeType": "ElementaryTypeName",
                              "src": "9686:7:3",
                              "typeDescriptions": {}
                            }
                          },
                          "id": 1506,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "typeConversion",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "9686:10:3",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "src": "9675:21:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "45524332303a20617070726f766520746f20746865207a65726f2061646472657373",
                        "id": 1508,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "9698:36:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029",
                          "typeString": "literal_string \"ERC20: approve to the zero address\""
                        },
                        "value": "ERC20: approve to the zero address"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029",
                          "typeString": "literal_string \"ERC20: approve to the zero address\""
                        }
                      ],
                      "id": 1501,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "9667:7:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 1509,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "9667:68:3",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 1510,
                  "nodeType": "ExpressionStatement",
                  "src": "9667:68:3"
                },
                {
                  "expression": {
                    "id": 1517,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "baseExpression": {
                        "baseExpression": {
                          "id": 1511,
                          "name": "_allowances",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1056,
                          "src": "9746:11:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
                            "typeString": "mapping(address => mapping(address => uint256))"
                          }
                        },
                        "id": 1514,
                        "indexExpression": {
                          "id": 1512,
                          "name": "owner",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1484,
                          "src": "9758:5:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "IndexAccess",
                        "src": "9746:18:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                          "typeString": "mapping(address => uint256)"
                        }
                      },
                      "id": 1515,
                      "indexExpression": {
                        "id": 1513,
                        "name": "spender",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1486,
                        "src": "9765:7:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "9746:27:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 1516,
                      "name": "amount",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1488,
                      "src": "9776:6:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "9746:36:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 1518,
                  "nodeType": "ExpressionStatement",
                  "src": "9746:36:3"
                },
                {
                  "eventCall": {
                    "arguments": [
                      {
                        "id": 1520,
                        "name": "owner",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1484,
                        "src": "9806:5:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 1521,
                        "name": "spender",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1486,
                        "src": "9813:7:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 1522,
                        "name": "amount",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1488,
                        "src": "9822:6:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 1519,
                      "name": "Approval",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1910,
                      "src": "9797:8:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,address,uint256)"
                      }
                    },
                    "id": 1523,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "9797:32:3",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 1524,
                  "nodeType": "EmitStatement",
                  "src": "9792:37:3"
                }
              ]
            },
            "documentation": {
              "id": 1482,
              "nodeType": "StructuredDocumentation",
              "src": "9079:412:3",
              "text": " @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n This internal function is equivalent to `approve`, and can be used to\n e.g. set automatic allowances for certain subsystems, etc.\n Emits an {Approval} event.\n Requirements:\n - `owner` cannot be the zero address.\n - `spender` cannot be the zero address."
            },
            "id": 1526,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_approve",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1489,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1484,
                  "mutability": "mutable",
                  "name": "owner",
                  "nodeType": "VariableDeclaration",
                  "scope": 1526,
                  "src": "9514:13:3",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1483,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "9514:7:3",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1486,
                  "mutability": "mutable",
                  "name": "spender",
                  "nodeType": "VariableDeclaration",
                  "scope": 1526,
                  "src": "9529:15:3",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1485,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "9529:7:3",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1488,
                  "mutability": "mutable",
                  "name": "amount",
                  "nodeType": "VariableDeclaration",
                  "scope": 1526,
                  "src": "9546:14:3",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1487,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "9546:7:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "9513:48:3"
            },
            "returnParameters": {
              "id": 1490,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "9579:0:3"
            },
            "scope": 1538,
            "src": "9496:340:3",
            "stateMutability": "nonpayable",
            "virtual": true,
            "visibility": "internal"
          },
          {
            "body": {
              "id": 1536,
              "nodeType": "Block",
              "src": "10512:3:3",
              "statements": []
            },
            "documentation": {
              "id": 1527,
              "nodeType": "StructuredDocumentation",
              "src": "9842:576:3",
              "text": " @dev Hook that is called before any transfer of tokens. This includes\n minting and burning.\n Calling conditions:\n - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n will be to transferred to `to`.\n - when `from` is zero, `amount` tokens will be minted for `to`.\n - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n - `from` and `to` are never both zero.\n To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks]."
            },
            "id": 1537,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_beforeTokenTransfer",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1534,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1529,
                  "mutability": "mutable",
                  "name": "from",
                  "nodeType": "VariableDeclaration",
                  "scope": 1537,
                  "src": "10453:12:3",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1528,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "10453:7:3",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1531,
                  "mutability": "mutable",
                  "name": "to",
                  "nodeType": "VariableDeclaration",
                  "scope": 1537,
                  "src": "10467:10:3",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1530,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "10467:7:3",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1533,
                  "mutability": "mutable",
                  "name": "amount",
                  "nodeType": "VariableDeclaration",
                  "scope": 1537,
                  "src": "10479:14:3",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1532,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "10479:7:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "10452:42:3"
            },
            "returnParameters": {
              "id": 1535,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "10512:0:3"
            },
            "scope": 1538,
            "src": "10423:92:3",
            "stateMutability": "nonpayable",
            "virtual": true,
            "visibility": "internal"
          }
        ],
        "scope": 1539,
        "src": "1279:9238:3"
      }
    ],
    "src": "33:10485:3"
  },
  "bytecode": "60806040523480156200001157600080fd5b5060405162000c6338038062000c638339810160408190526200003491620001b9565b81516200004990600390602085019062000068565b5080516200005f90600490602084019062000068565b50505062000273565b828054620000769062000220565b90600052602060002090601f0160209004810192826200009a5760008555620000e5565b82601f10620000b557805160ff1916838001178555620000e5565b82800160010185558215620000e5579182015b82811115620000e5578251825591602001919060010190620000c8565b50620000f3929150620000f7565b5090565b5b80821115620000f35760008155600101620000f8565b600082601f8301126200011f578081fd5b81516001600160401b03808211156200013c576200013c6200025d565b6040516020601f8401601f19168201810183811183821017156200016457620001646200025d565b60405283825285840181018710156200017b578485fd5b8492505b838310156200019e57858301810151828401820152918201916200017f565b83831115620001af57848185840101525b5095945050505050565b60008060408385031215620001cc578182fd5b82516001600160401b0380821115620001e3578384fd5b620001f1868387016200010e565b9350602085015191508082111562000207578283fd5b5062000216858286016200010e565b9150509250929050565b6002810460018216806200023557607f821691505b602082108114156200025757634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052604160045260246000fd5b6109e080620002836000396000f3fe608060405234801561001057600080fd5b50600436106100a95760003560e01c80633950935111610071578063395093511461012957806370a082311461013c57806395d89b411461014f578063a457c2d714610157578063a9059cbb1461016a578063dd62ed3e1461017d576100a9565b806306fdde03146100ae578063095ea7b3146100cc57806318160ddd146100ec57806323b872dd14610101578063313ce56714610114575b600080fd5b6100b6610190565b6040516100c391906106df565b60405180910390f35b6100df6100da3660046106ab565b610222565b6040516100c391906106d4565b6100f461023f565b6040516100c39190610913565b6100df61010f366004610670565b610245565b61011c6102e5565b6040516100c3919061091c565b6100df6101373660046106ab565b6102ea565b6100f461014a36600461061d565b610339565b6100b6610358565b6100df6101653660046106ab565b610367565b6100df6101783660046106ab565b6103e2565b6100f461018b36600461063e565b6103f6565b60606003805461019f90610959565b80601f01602080910402602001604051908101604052809291908181526020018280546101cb90610959565b80156102185780601f106101ed57610100808354040283529160200191610218565b820191906000526020600020905b8154815290600101906020018083116101fb57829003601f168201915b5050505050905090565b600061023661022f610421565b8484610425565b50600192915050565b60025490565b60006102528484846104d9565b6001600160a01b038416600090815260016020526040812081610273610421565b6001600160a01b03166001600160a01b03168152602001908152602001600020549050828110156102bf5760405162461bcd60e51b81526004016102b6906107fd565b60405180910390fd5b6102da856102cb610421565b6102d58685610942565b610425565b506001949350505050565b601290565b60006102366102f7610421565b848460016000610305610421565b6001600160a01b03908116825260208083019390935260409182016000908120918b16815292529020546102d5919061092a565b6001600160a01b0381166000908152602081905260409020545b919050565b60606004805461019f90610959565b60008060016000610376610421565b6001600160a01b03908116825260208083019390935260409182016000908120918816815292529020549050828110156103c25760405162461bcd60e51b81526004016102b6906108ce565b6103d86103cd610421565b856102d58685610942565b5060019392505050565b60006102366103ef610421565b84846104d9565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b3390565b6001600160a01b03831661044b5760405162461bcd60e51b81526004016102b69061088a565b6001600160a01b0382166104715760405162461bcd60e51b81526004016102b690610775565b6001600160a01b0380841660008181526001602090815260408083209487168084529490915290819020849055517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925906104cc908590610913565b60405180910390a3505050565b6001600160a01b0383166104ff5760405162461bcd60e51b81526004016102b690610845565b6001600160a01b0382166105255760405162461bcd60e51b81526004016102b690610732565b610530838383610601565b6001600160a01b038316600090815260208190526040902054818110156105695760405162461bcd60e51b81526004016102b6906107b7565b6105738282610942565b6001600160a01b0380861660009081526020819052604080822093909355908516815290812080548492906105a990849061092a565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040516105f39190610913565b60405180910390a350505050565b505050565b80356001600160a01b038116811461035357600080fd5b60006020828403121561062e578081fd5b61063782610606565b9392505050565b60008060408385031215610650578081fd5b61065983610606565b915061066760208401610606565b90509250929050565b600080600060608486031215610684578081fd5b61068d84610606565b925061069b60208501610606565b9150604084013590509250925092565b600080604083850312156106bd578182fd5b6106c683610606565b946020939093013593505050565b901515815260200190565b6000602080835283518082850152825b8181101561070b578581018301518582016040015282016106ef565b8181111561071c5783604083870101525b50601f01601f1916929092016040019392505050565b60208082526023908201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260408201526265737360e81b606082015260800190565b60208082526022908201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604082015261737360f01b606082015260800190565b60208082526026908201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604082015265616c616e636560d01b606082015260800190565b60208082526028908201527f45524332303a207472616e7366657220616d6f756e74206578636565647320616040820152676c6c6f77616e636560c01b606082015260800190565b60208082526025908201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604082015264647265737360d81b606082015260800190565b60208082526024908201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646040820152637265737360e01b606082015260800190565b60208082526025908201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604082015264207a65726f60d81b606082015260800190565b90815260200190565b60ff91909116815260200190565b6000821982111561093d5761093d610994565b500190565b60008282101561095457610954610994565b500390565b60028104600182168061096d57607f821691505b6020821081141561098e57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fdfea264697066735822122064b9440c19bb53fd9adcd337b0592bb0282ed6e4c23ff08e2486d8f1400c7c0764736f6c63430008000033",
  "bytecodeSha1": "8795640d851d802fee4cab64b791fda696fcdca5",
  "compiler": {
    "evm_version": "istanbul",
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "version": "0.8.0+commit.c7dfd78e"
  },
  "contractName": "ERC20",
  "coverageMap": {
    "branches": {
      "3": {
        "ERC20._approve": {
          "31": [
            9597,
            9616,
            true
          ],
          "32": [
            9675,
            9696,
            true
          ]
        },
        "ERC20._transfer": {
          "33": [
            7182,
            7202,
            true
          ],
          "34": [
            7262,
            7285,
            true
          ],
          "35": [
            7453,
            7476,
            true
          ]
        },
        "ERC20.decreaseAllowance": {
          "30": [
            6420,
            6455,
            true
          ]
        },
        "ERC20.transferFrom": {
          "29": [
            4971,
            4997,
            true
          ]
        }
      },
      "4": {},
      "5": {}
    },
    "statements": {
      "3": {
        "ERC20._approve": {
          "18": [
            9589,
            9657
          ],
          "19": [
            9667,
            9735
          ],
          "20": [
            9746,
            9782
          ],
          "21": [
            9792,
            9829
          ]
        },
        "ERC20._transfer": {
          "22": [
            7174,
            7244
          ],
          "23": [
            7254,
            7325
          ],
          "24": [
            7336,
            7383
          ],
          "25": [
            7445,
            7519
          ],
          "26": [
            7529,
            7571
          ],
          "27": [
            7581,
            7611
          ],
          "28": [
            7622,
            7662
          ]
        },
        "ERC20.allowance": {
          "16": [
            3912,
            3946
          ]
        },
        "ERC20.approve": {
          "1": [
            4190,
            4229
          ],
          "2": [
            4239,
            4250
          ]
        },
        "ERC20.balanceOf": {
          "10": [
            3339,
            3364
          ]
        },
        "ERC20.decimals": {
          "8": [
            3006,
            3015
          ]
        },
        "ERC20.decreaseAllowance": {
          "12": [
            6412,
            6497
          ],
          "13": [
            6507,
            6574
          ],
          "14": [
            6585,
            6596
          ]
        },
        "ERC20.increaseAllowance": {
          "9": [
            5637,
            5717
          ]
        },
        "ERC20.name": {
          "0": [
            2091,
            2103
          ]
        },
        "ERC20.symbol": {
          "11": [
            2295,
            2309
          ]
        },
        "ERC20.totalSupply": {
          "3": [
            3162,
            3181
          ]
        },
        "ERC20.transfer": {
          "15": [
            3676,
            3718
          ]
        },
        "ERC20.transferFrom": {
          "4": [
            4846,
            4882
          ],
          "5": [
            4963,
            5042
          ],
          "6": [
            5052,
            5109
          ],
          "7": [
            5120,
            5131
          ]
        }
      },
      "4": {},
      "5": {
        "Context._msgSender": {
          "17": [
            658,
            675
          ]
        }
      }
    }
  },
  "dependencies": [
    "OpenZeppelin/openzeppelin-contracts@4.0.0/Context",
    "OpenZeppelin/openzeppelin-contracts@4.0.0/IERC20"
  ],
  "deployedBytecode": "608060405234801561001057600080fd5b50600436106100a95760003560e01c80633950935111610071578063395093511461012957806370a082311461013c57806395d89b411461014f578063a457c2d714610157578063a9059cbb1461016a578063dd62ed3e1461017d576100a9565b806306fdde03146100ae578063095ea7b3146100cc57806318160ddd146100ec57806323b872dd14610101578063313ce56714610114575b600080fd5b6100b6610190565b6040516100c391906106df565b60405180910390f35b6100df6100da3660046106ab565b610222565b6040516100c391906106d4565b6100f461023f565b6040516100c39190610913565b6100df61010f366004610670565b610245565b61011c6102e5565b6040516100c3919061091c565b6100df6101373660046106ab565b6102ea565b6100f461014a36600461061d565b610339565b6100b6610358565b6100df6101653660046106ab565b610367565b6100df6101783660046106ab565b6103e2565b6100f461018b36600461063e565b6103f6565b60606003805461019f90610959565b80601f01602080910402602001604051908101604052809291908181526020018280546101cb90610959565b80156102185780601f106101ed57610100808354040283529160200191610218565b820191906000526020600020905b8154815290600101906020018083116101fb57829003601f168201915b5050505050905090565b600061023661022f610421565b8484610425565b50600192915050565b60025490565b60006102528484846104d9565b6001600160a01b038416600090815260016020526040812081610273610421565b6001600160a01b03166001600160a01b03168152602001908152602001600020549050828110156102bf5760405162461bcd60e51b81526004016102b6906107fd565b60405180910390fd5b6102da856102cb610421565b6102d58685610942565b610425565b506001949350505050565b601290565b60006102366102f7610421565b848460016000610305610421565b6001600160a01b03908116825260208083019390935260409182016000908120918b16815292529020546102d5919061092a565b6001600160a01b0381166000908152602081905260409020545b919050565b60606004805461019f90610959565b60008060016000610376610421565b6001600160a01b03908116825260208083019390935260409182016000908120918816815292529020549050828110156103c25760405162461bcd60e51b81526004016102b6906108ce565b6103d86103cd610421565b856102d58685610942565b5060019392505050565b60006102366103ef610421565b84846104d9565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b3390565b6001600160a01b03831661044b5760405162461bcd60e51b81526004016102b69061088a565b6001600160a01b0382166104715760405162461bcd60e51b81526004016102b690610775565b6001600160a01b0380841660008181526001602090815260408083209487168084529490915290819020849055517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925906104cc908590610913565b60405180910390a3505050565b6001600160a01b0383166104ff5760405162461bcd60e51b81526004016102b690610845565b6001600160a01b0382166105255760405162461bcd60e51b81526004016102b690610732565b610530838383610601565b6001600160a01b038316600090815260208190526040902054818110156105695760405162461bcd60e51b81526004016102b6906107b7565b6105738282610942565b6001600160a01b0380861660009081526020819052604080822093909355908516815290812080548492906105a990849061092a565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040516105f39190610913565b60405180910390a350505050565b505050565b80356001600160a01b038116811461035357600080fd5b60006020828403121561062e578081fd5b61063782610606565b9392505050565b60008060408385031215610650578081fd5b61065983610606565b915061066760208401610606565b90509250929050565b600080600060608486031215610684578081fd5b61068d84610606565b925061069b60208501610606565b9150604084013590509250925092565b600080604083850312156106bd578182fd5b6106c683610606565b946020939093013593505050565b901515815260200190565b6000602080835283518082850152825b8181101561070b578581018301518582016040015282016106ef565b8181111561071c5783604083870101525b50601f01601f1916929092016040019392505050565b60208082526023908201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260408201526265737360e81b606082015260800190565b60208082526022908201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604082015261737360f01b606082015260800190565b60208082526026908201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604082015265616c616e636560d01b606082015260800190565b60208082526028908201527f45524332303a207472616e7366657220616d6f756e74206578636565647320616040820152676c6c6f77616e636560c01b606082015260800190565b60208082526025908201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604082015264647265737360d81b606082015260800190565b60208082526024908201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646040820152637265737360e01b606082015260800190565b60208082526025908201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604082015264207a65726f60d81b606082015260800190565b90815260200190565b60ff91909116815260200190565b6000821982111561093d5761093d610994565b500190565b60008282101561095457610954610994565b500390565b60028104600182168061096d57607f821691505b6020821081141561098e57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fdfea264697066735822122064b9440c19bb53fd9adcd337b0592bb0282ed6e4c23ff08e2486d8f1400c7c0764736f6c63430008000033",
  "deployedSourceMap": "1279:9238:3:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2021:89;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;4091:166;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;3082:106::-;;;:::i;:::-;;;;;;;:::i;4724:414::-;;;;;;:::i;:::-;;:::i;2940:82::-;;;:::i;:::-;;;;;;;:::i;5533:212::-;;;;;;:::i;:::-;;:::i;3246:125::-;;;;;;:::i;:::-;;:::i;2223:93::-;;;:::i;6232:371::-;;;;;;:::i;:::-;;:::i;3574:172::-;;;;;;:::i;:::-;;:::i;3804:149::-;;;;;;:::i;:::-;;:::i;2021:89::-;2066:13;2098:5;2091:12;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2021:89;:::o;4091:166::-;4174:4;4190:39;4199:12;:10;:12::i;:::-;4213:7;4222:6;4190:8;:39::i;:::-;-1:-1:-1;4246:4:3;4091:166;;;;:::o;3082:106::-;3169:12;;3082:106;:::o;4724:414::-;4830:4;4846:36;4856:6;4864:9;4875:6;4846:9;:36::i;:::-;-1:-1:-1;;;;;4920:19:3;;4893:24;4920:19;;;:11;:19;;;;;4893:24;4940:12;:10;:12::i;:::-;-1:-1:-1;;;;;4920:33:3;-1:-1:-1;;;;;4920:33:3;;;;;;;;;;;;;4893:60;;4991:6;4971:16;:26;;4963:79;;;;-1:-1:-1;;;4963:79:3;;;;;;;:::i;:::-;;;;;;;;;5052:57;5061:6;5069:12;:10;:12::i;:::-;5083:25;5102:6;5083:16;:25;:::i;:::-;5052:8;:57::i;:::-;-1:-1:-1;5127:4:3;;4724:414;-1:-1:-1;;;;4724:414:3:o;2940:82::-;3013:2;2940:82;:::o;5533:212::-;5621:4;5637:80;5646:12;:10;:12::i;:::-;5660:7;5706:10;5669:11;:25;5681:12;:10;:12::i;:::-;-1:-1:-1;;;;;5669:25:3;;;;;;;;;;;;;;;;;-1:-1:-1;5669:25:3;;;:34;;;;;;;;;;:47;;;;:::i;3246:125::-;-1:-1:-1;;;;;3346:18:3;;3320:7;3346:18;;;;;;;;;;;3246:125;;;;:::o;2223:93::-;2270:13;2302:7;2295:14;;;;;:::i;6232:371::-;6325:4;6341:24;6368:11;:25;6380:12;:10;:12::i;:::-;-1:-1:-1;;;;;6368:25:3;;;;;;;;;;;;;;;;;-1:-1:-1;6368:25:3;;;:34;;;;;;;;;;;-1:-1:-1;6420:35:3;;;;6412:85;;;;-1:-1:-1;;;6412:85:3;;;;;;;:::i;:::-;6507:67;6516:12;:10;:12::i;:::-;6530:7;6539:34;6558:15;6539:16;:34;:::i;6507:67::-;-1:-1:-1;6592:4:3;;6232:371;-1:-1:-1;;;6232:371:3:o;3574:172::-;3660:4;3676:42;3686:12;:10;:12::i;:::-;3700:9;3711:6;3676:9;:42::i;3804:149::-;-1:-1:-1;;;;;3919:18:3;;;3893:7;3919:18;;;:11;:18;;;;;;;;:27;;;;;;;;;;;;;3804:149::o;586:96:5:-;665:10;586:96;:::o;9496:340:3:-;-1:-1:-1;;;;;9597:19:3;;9589:68;;;;-1:-1:-1;;;9589:68:3;;;;;;;:::i;:::-;-1:-1:-1;;;;;9675:21:3;;9667:68;;;;-1:-1:-1;;;9667:68:3;;;;;;;:::i;:::-;-1:-1:-1;;;;;9746:18:3;;;;;;;:11;:18;;;;;;;;:27;;;;;;;;;;;;;;:36;;;9797:32;;;;;9776:6;;9797:32;:::i;:::-;;;;;;;;9496:340;;;:::o;7077:592::-;-1:-1:-1;;;;;7182:20:3;;7174:70;;;;-1:-1:-1;;;7174:70:3;;;;;;;:::i;:::-;-1:-1:-1;;;;;7262:23:3;;7254:71;;;;-1:-1:-1;;;7254:71:3;;;;;;;:::i;:::-;7336:47;7357:6;7365:9;7376:6;7336:20;:47::i;:::-;-1:-1:-1;;;;;7418:17:3;;7394:21;7418:17;;;;;;;;;;;7453:23;;;;7445:74;;;;-1:-1:-1;;;7445:74:3;;;;;;;:::i;:::-;7549:22;7565:6;7549:13;:22;:::i;:::-;-1:-1:-1;;;;;7529:17:3;;;:9;:17;;;;;;;;;;;:42;;;;7581:20;;;;;;;;:30;;7605:6;;7529:9;7581:30;;7605:6;;7581:30;:::i;:::-;;;;;;;;7644:9;-1:-1:-1;;;;;7627:35:3;7636:6;-1:-1:-1;;;;;7627:35:3;;7655:6;7627:35;;;;;;:::i;:::-;;;;;;;;7077:592;;;;:::o;10423:92::-;;;;:::o;14:175:11:-;84:20;;-1:-1:-1;;;;;133:31:11;;123:42;;113:2;;179:1;176;169:12;194:198;;306:2;294:9;285:7;281:23;277:32;274:2;;;327:6;319;312:22;274:2;355:31;376:9;355:31;:::i;:::-;345:41;264:128;-1:-1:-1;;;264:128:11:o;397:274::-;;;526:2;514:9;505:7;501:23;497:32;494:2;;;547:6;539;532:22;494:2;575:31;596:9;575:31;:::i;:::-;565:41;;625:40;661:2;650:9;646:18;625:40;:::i;:::-;615:50;;484:187;;;;;:::o;676:342::-;;;;822:2;810:9;801:7;797:23;793:32;790:2;;;843:6;835;828:22;790:2;871:31;892:9;871:31;:::i;:::-;861:41;;921:40;957:2;946:9;942:18;921:40;:::i;:::-;911:50;;1008:2;997:9;993:18;980:32;970:42;;780:238;;;;;:::o;1023:266::-;;;1152:2;1140:9;1131:7;1127:23;1123:32;1120:2;;;1173:6;1165;1158:22;1120:2;1201:31;1222:9;1201:31;:::i;:::-;1191:41;1279:2;1264:18;;;;1251:32;;-1:-1:-1;;;1110:179:11:o;1294:187::-;1459:14;;1452:22;1434:41;;1422:2;1407:18;;1389:92::o;1486:603::-;;1627:2;1656;1645:9;1638:21;1688:6;1682:13;1731:6;1726:2;1715:9;1711:18;1704:34;1756:4;1769:140;1783:6;1780:1;1777:13;1769:140;;;1878:14;;;1874:23;;1868:30;1844:17;;;1863:2;1840:26;1833:66;1798:10;;1769:140;;;1927:6;1924:1;1921:13;1918:2;;;1997:4;1992:2;1983:6;1972:9;1968:22;1964:31;1957:45;1918:2;-1:-1:-1;2073:2:11;2052:15;-1:-1:-1;;2048:29:11;2033:45;;;;2080:2;2029:54;;1607:482;-1:-1:-1;;;1607:482:11:o;2094:399::-;2296:2;2278:21;;;2335:2;2315:18;;;2308:30;2374:34;2369:2;2354:18;;2347:62;-1:-1:-1;;;2440:2:11;2425:18;;2418:33;2483:3;2468:19;;2268:225::o;2498:398::-;2700:2;2682:21;;;2739:2;2719:18;;;2712:30;2778:34;2773:2;2758:18;;2751:62;-1:-1:-1;;;2844:2:11;2829:18;;2822:32;2886:3;2871:19;;2672:224::o;2901:402::-;3103:2;3085:21;;;3142:2;3122:18;;;3115:30;3181:34;3176:2;3161:18;;3154:62;-1:-1:-1;;;3247:2:11;3232:18;;3225:36;3293:3;3278:19;;3075:228::o;3308:404::-;3510:2;3492:21;;;3549:2;3529:18;;;3522:30;3588:34;3583:2;3568:18;;3561:62;-1:-1:-1;;;3654:2:11;3639:18;;3632:38;3702:3;3687:19;;3482:230::o;3717:401::-;3919:2;3901:21;;;3958:2;3938:18;;;3931:30;3997:34;3992:2;3977:18;;3970:62;-1:-1:-1;;;4063:2:11;4048:18;;4041:35;4108:3;4093:19;;3891:227::o;4123:400::-;4325:2;4307:21;;;4364:2;4344:18;;;4337:30;4403:34;4398:2;4383:18;;4376:62;-1:-1:-1;;;4469:2:11;4454:18;;4447:34;4513:3;4498:19;;4297:226::o;4528:401::-;4730:2;4712:21;;;4769:2;4749:18;;;4742:30;4808:34;4803:2;4788:18;;4781:62;-1:-1:-1;;;4874:2:11;4859:18;;4852:35;4919:3;4904:19;;4702:227::o;4934:177::-;5080:25;;;5068:2;5053:18;;5035:76::o;5116:184::-;5288:4;5276:17;;;;5258:36;;5246:2;5231:18;;5213:87::o;5305:128::-;;5376:1;5372:6;5369:1;5366:13;5363:2;;;5382:18;;:::i;:::-;-1:-1:-1;5418:9:11;;5353:80::o;5438:125::-;;5506:1;5503;5500:8;5497:2;;;5511:18;;:::i;:::-;-1:-1:-1;5548:9:11;;5487:76::o;5568:380::-;5653:1;5643:12;;5700:1;5690:12;;;5711:2;;5765:4;5757:6;5753:17;5743:27;;5711:2;5818;5810:6;5807:14;5787:18;5784:38;5781:2;;;5864:10;5859:3;5855:20;5852:1;5845:31;5899:4;5896:1;5889:15;5927:4;5924:1;5917:15;5781:2;;5623:325;;;:::o;5953:127::-;6014:10;6009:3;6005:20;6002:1;5995:31;6045:4;6042:1;6035:15;6069:4;6066:1;6059:15",
  "language": "Solidity",
  "natspec": {
    "details": "Implementation of the {IERC20} interface. This implementation is agnostic to the way tokens are created. This means that a supply mechanism has to be added in a derived contract using {_mint}. For a generic mechanism see {ERC20PresetMinterPauser}. TIP: For a detailed writeup see our guide https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How to implement supply mechanisms]. We have followed general OpenZeppelin guidelines: functions revert instead of returning `false` on failure. This behavior is nonetheless conventional and does not conflict with the expectations of ERC20 applications. Additionally, an {Approval} event is emitted on calls to {transferFrom}. This allows applications to reconstruct the allowance for all accounts just by listening to said events. Other implementations of the EIP may not emit these events, as it isn't required by the specification. Finally, the non-standard {decreaseAllowance} and {increaseAllowance} functions have been added to mitigate the well-known issues around setting allowances. See {IERC20-approve}.",
    "kind": "dev",
    "methods": {
      "allowance(address,address)": {
        "details": "See {IERC20-allowance}."
      },
      "approve(address,uint256)": {
        "details": "See {IERC20-approve}. Requirements: - `spender` cannot be the zero address."
      },
      "balanceOf(address)": {
        "details": "See {IERC20-balanceOf}."
      },
      "constructor": {
        "details": "Sets the values for {name} and {symbol}. The defaut value of {decimals} is 18. To select a different value for {decimals} you should overload it. All three of these values are immutable: they can only be set once during construction."
      },
      "decimals()": {
        "details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5,05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overloaded; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
      },
      "decreaseAllowance(address,uint256)": {
        "details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."
      },
      "increaseAllowance(address,uint256)": {
        "details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."
      },
      "name()": {
        "details": "Returns the name of the token."
      },
      "symbol()": {
        "details": "Returns the symbol of the token, usually a shorter version of the name."
      },
      "totalSupply()": {
        "details": "See {IERC20-totalSupply}."
      },
      "transfer(address,uint256)": {
        "details": "See {IERC20-transfer}. Requirements: - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for ``sender``'s tokens of at least `amount`."
      }
    },
    "version": 1
  },
  "offset": [
    1279,
    10517
  ],
  "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xA9 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x39509351 GT PUSH2 0x71 JUMPI DUP1 PUSH4 0x39509351 EQ PUSH2 0x129 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x13C JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x14F JUMPI DUP1 PUSH4 0xA457C2D7 EQ PUSH2 0x157 JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0x16A JUMPI DUP1 PUSH4 0xDD62ED3E EQ PUSH2 0x17D JUMPI PUSH2 0xA9 JUMP JUMPDEST DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0xAE JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0xCC JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0xEC JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x101 JUMPI DUP1 PUSH4 0x313CE567 EQ PUSH2 0x114 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xB6 PUSH2 0x190 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xC3 SWAP2 SWAP1 PUSH2 0x6DF JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xDF PUSH2 0xDA CALLDATASIZE PUSH1 0x4 PUSH2 0x6AB JUMP JUMPDEST PUSH2 0x222 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xC3 SWAP2 SWAP1 PUSH2 0x6D4 JUMP JUMPDEST PUSH2 0xF4 PUSH2 0x23F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xC3 SWAP2 SWAP1 PUSH2 0x913 JUMP JUMPDEST PUSH2 0xDF PUSH2 0x10F CALLDATASIZE PUSH1 0x4 PUSH2 0x670 JUMP JUMPDEST PUSH2 0x245 JUMP JUMPDEST PUSH2 0x11C PUSH2 0x2E5 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xC3 SWAP2 SWAP1 PUSH2 0x91C JUMP JUMPDEST PUSH2 0xDF PUSH2 0x137 CALLDATASIZE PUSH1 0x4 PUSH2 0x6AB JUMP JUMPDEST PUSH2 0x2EA JUMP JUMPDEST PUSH2 0xF4 PUSH2 0x14A CALLDATASIZE PUSH1 0x4 PUSH2 0x61D JUMP JUMPDEST PUSH2 0x339 JUMP JUMPDEST PUSH2 0xB6 PUSH2 0x358 JUMP JUMPDEST PUSH2 0xDF PUSH2 0x165 CALLDATASIZE PUSH1 0x4 PUSH2 0x6AB JUMP JUMPDEST PUSH2 0x367 JUMP JUMPDEST PUSH2 0xDF PUSH2 0x178 CALLDATASIZE PUSH1 0x4 PUSH2 0x6AB JUMP JUMPDEST PUSH2 0x3E2 JUMP JUMPDEST PUSH2 0xF4 PUSH2 0x18B CALLDATASIZE PUSH1 0x4 PUSH2 0x63E JUMP JUMPDEST PUSH2 0x3F6 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x3 DUP1 SLOAD PUSH2 0x19F SWAP1 PUSH2 0x959 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x1CB SWAP1 PUSH2 0x959 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x218 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x1ED JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x218 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x1FB JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x236 PUSH2 0x22F PUSH2 0x421 JUMP JUMPDEST DUP5 DUP5 PUSH2 0x425 JUMP JUMPDEST POP PUSH1 0x1 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x2 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x252 DUP5 DUP5 DUP5 PUSH2 0x4D9 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP2 PUSH2 0x273 PUSH2 0x421 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP DUP3 DUP2 LT ISZERO PUSH2 0x2BF JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2B6 SWAP1 PUSH2 0x7FD JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x2DA DUP6 PUSH2 0x2CB PUSH2 0x421 JUMP JUMPDEST PUSH2 0x2D5 DUP7 DUP6 PUSH2 0x942 JUMP JUMPDEST PUSH2 0x425 JUMP JUMPDEST POP PUSH1 0x1 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x12 SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x236 PUSH2 0x2F7 PUSH2 0x421 JUMP JUMPDEST DUP5 DUP5 PUSH1 0x1 PUSH1 0x0 PUSH2 0x305 PUSH2 0x421 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND DUP3 MSTORE PUSH1 0x20 DUP1 DUP4 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x40 SWAP2 DUP3 ADD PUSH1 0x0 SWAP1 DUP2 KECCAK256 SWAP2 DUP12 AND DUP2 MSTORE SWAP3 MSTORE SWAP1 KECCAK256 SLOAD PUSH2 0x2D5 SWAP2 SWAP1 PUSH2 0x92A JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x4 DUP1 SLOAD PUSH2 0x19F SWAP1 PUSH2 0x959 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x1 PUSH1 0x0 PUSH2 0x376 PUSH2 0x421 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND DUP3 MSTORE PUSH1 0x20 DUP1 DUP4 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x40 SWAP2 DUP3 ADD PUSH1 0x0 SWAP1 DUP2 KECCAK256 SWAP2 DUP9 AND DUP2 MSTORE SWAP3 MSTORE SWAP1 KECCAK256 SLOAD SWAP1 POP DUP3 DUP2 LT ISZERO PUSH2 0x3C2 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2B6 SWAP1 PUSH2 0x8CE JUMP JUMPDEST PUSH2 0x3D8 PUSH2 0x3CD PUSH2 0x421 JUMP JUMPDEST DUP6 PUSH2 0x2D5 DUP7 DUP6 PUSH2 0x942 JUMP JUMPDEST POP PUSH1 0x1 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x236 PUSH2 0x3EF PUSH2 0x421 JUMP JUMPDEST DUP5 DUP5 PUSH2 0x4D9 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD SWAP1 JUMP JUMPDEST CALLER SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x44B JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2B6 SWAP1 PUSH2 0x88A JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x471 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2B6 SWAP1 PUSH2 0x775 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP5 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP5 DUP8 AND DUP1 DUP5 MSTORE SWAP5 SWAP1 SWAP2 MSTORE SWAP1 DUP2 SWAP1 KECCAK256 DUP5 SWAP1 SSTORE MLOAD PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 SWAP1 PUSH2 0x4CC SWAP1 DUP6 SWAP1 PUSH2 0x913 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x4FF JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2B6 SWAP1 PUSH2 0x845 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x525 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2B6 SWAP1 PUSH2 0x732 JUMP JUMPDEST PUSH2 0x530 DUP4 DUP4 DUP4 PUSH2 0x601 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 DUP2 LT ISZERO PUSH2 0x569 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2B6 SWAP1 PUSH2 0x7B7 JUMP JUMPDEST PUSH2 0x573 DUP3 DUP3 PUSH2 0x942 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP7 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 SWAP4 SWAP1 SWAP4 SSTORE SWAP1 DUP6 AND DUP2 MSTORE SWAP1 DUP2 KECCAK256 DUP1 SLOAD DUP5 SWAP3 SWAP1 PUSH2 0x5A9 SWAP1 DUP5 SWAP1 PUSH2 0x92A JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF DUP5 PUSH1 0x40 MLOAD PUSH2 0x5F3 SWAP2 SWAP1 PUSH2 0x913 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP POP JUMP JUMPDEST POP POP POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x353 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x62E JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x637 DUP3 PUSH2 0x606 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x650 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x659 DUP4 PUSH2 0x606 JUMP JUMPDEST SWAP2 POP PUSH2 0x667 PUSH1 0x20 DUP5 ADD PUSH2 0x606 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x684 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x68D DUP5 PUSH2 0x606 JUMP JUMPDEST SWAP3 POP PUSH2 0x69B PUSH1 0x20 DUP6 ADD PUSH2 0x606 JUMP JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x6BD JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x6C6 DUP4 PUSH2 0x606 JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 MSTORE DUP4 MLOAD DUP1 DUP3 DUP6 ADD MSTORE DUP3 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x70B JUMPI DUP6 DUP2 ADD DUP4 ADD MLOAD DUP6 DUP3 ADD PUSH1 0x40 ADD MSTORE DUP3 ADD PUSH2 0x6EF JUMP JUMPDEST DUP2 DUP2 GT ISZERO PUSH2 0x71C JUMPI DUP4 PUSH1 0x40 DUP4 DUP8 ADD ADD MSTORE JUMPDEST POP PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x40 ADD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x23 SWAP1 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E7366657220746F20746865207A65726F2061646472 PUSH1 0x40 DUP3 ADD MSTORE PUSH3 0x657373 PUSH1 0xE8 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x22 SWAP1 DUP3 ADD MSTORE PUSH32 0x45524332303A20617070726F766520746F20746865207A65726F206164647265 PUSH1 0x40 DUP3 ADD MSTORE PUSH2 0x7373 PUSH1 0xF0 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x26 SWAP1 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E7366657220616D6F756E7420657863656564732062 PUSH1 0x40 DUP3 ADD MSTORE PUSH6 0x616C616E6365 PUSH1 0xD0 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x28 SWAP1 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E7366657220616D6F756E7420657863656564732061 PUSH1 0x40 DUP3 ADD MSTORE PUSH8 0x6C6C6F77616E6365 PUSH1 0xC0 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x25 SWAP1 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E736665722066726F6D20746865207A65726F206164 PUSH1 0x40 DUP3 ADD MSTORE PUSH5 0x6472657373 PUSH1 0xD8 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x24 SWAP1 DUP3 ADD MSTORE PUSH32 0x45524332303A20617070726F76652066726F6D20746865207A65726F20616464 PUSH1 0x40 DUP3 ADD MSTORE PUSH4 0x72657373 PUSH1 0xE0 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x25 SWAP1 DUP3 ADD MSTORE PUSH32 0x45524332303A2064656372656173656420616C6C6F77616E63652062656C6F77 PUSH1 0x40 DUP3 ADD MSTORE PUSH5 0x207A65726F PUSH1 0xD8 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0xFF SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 NOT DUP3 GT ISZERO PUSH2 0x93D JUMPI PUSH2 0x93D PUSH2 0x994 JUMP JUMPDEST POP ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 LT ISZERO PUSH2 0x954 JUMPI PUSH2 0x954 PUSH2 0x994 JUMP JUMPDEST POP SUB SWAP1 JUMP JUMPDEST PUSH1 0x2 DUP2 DIV PUSH1 0x1 DUP3 AND DUP1 PUSH2 0x96D JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 EQ ISZERO PUSH2 0x98E JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH5 0xB9440C19BB MSTORE8 REVERT SWAP11 0xDC 0xD3 CALLDATACOPY 0xB0 MSIZE 0x2B 0xB0 0x28 0x2E 0xD6 0xE4 0xC2 EXTCODEHASH CREATE DUP15 0x24 DUP7 0xD8 CALL BLOCKHASH 0xC PUSH29 0x764736F6C634300080000330000000000000000000000000000000000 ",
  "pcMap": {
    "0": {
      "offset": [
        1279,
        10517
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x80"
    },
    "2": {
      "fn": null,
      "offset": [
        1279,
        10517
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x40"
    },
    "4": {
      "fn": null,
      "offset": [
        1279,
        10517
      ],
      "op": "MSTORE",
      "path": "3"
    },
    "5": {
      "fn": null,
      "offset": [
        1279,
        10517
      ],
      "op": "CALLVALUE",
      "path": "3"
    },
    "6": {
      "fn": null,
      "offset": [
        1279,
        10517
      ],
      "op": "DUP1",
      "path": "3"
    },
    "7": {
      "fn": null,
      "offset": [
        1279,
        10517
      ],
      "op": "ISZERO",
      "path": "3"
    },
    "8": {
      "fn": null,
      "offset": [
        1279,
        10517
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x10"
    },
    "11": {
      "fn": null,
      "offset": [
        1279,
        10517
      ],
      "op": "JUMPI",
      "path": "3"
    },
    "12": {
      "fn": null,
      "offset": [
        1279,
        10517
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x0"
    },
    "14": {
      "fn": null,
      "offset": [
        1279,
        10517
      ],
      "op": "DUP1",
      "path": "3"
    },
    "15": {
      "dev": "Cannot send ether to nonpayable function",
      "fn": null,
      "offset": [
        1279,
        10517
      ],
      "op": "REVERT",
      "path": "3"
    },
    "16": {
      "fn": null,
      "offset": [
        1279,
        10517
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "17": {
      "fn": null,
      "offset": [
        1279,
        10517
      ],
      "op": "POP",
      "path": "3"
    },
    "18": {
      "fn": null,
      "offset": [
        1279,
        10517
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x4"
    },
    "20": {
      "fn": null,
      "offset": [
        1279,
        10517
      ],
      "op": "CALLDATASIZE",
      "path": "3"
    },
    "21": {
      "fn": null,
      "offset": [
        1279,
        10517
      ],
      "op": "LT",
      "path": "3"
    },
    "22": {
      "fn": null,
      "offset": [
        1279,
        10517
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0xA9"
    },
    "25": {
      "fn": null,
      "offset": [
        1279,
        10517
      ],
      "op": "JUMPI",
      "path": "3"
    },
    "26": {
      "fn": null,
      "offset": [
        1279,
        10517
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x0"
    },
    "28": {
      "fn": null,
      "offset": [
        1279,
        10517
      ],
      "op": "CALLDATALOAD",
      "path": "3"
    },
    "29": {
      "fn": null,
      "offset": [
        1279,
        10517
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0xE0"
    },
    "31": {
      "fn": null,
      "offset": [
        1279,
        10517
      ],
      "op": "SHR",
      "path": "3"
    },
    "32": {
      "fn": null,
      "offset": [
        1279,
        10517
      ],
      "op": "DUP1",
      "path": "3"
    },
    "33": {
      "fn": null,
      "offset": [
        1279,
        10517
      ],
      "op": "PUSH4",
      "path": "3",
      "value": "0x39509351"
    },
    "38": {
      "fn": null,
      "offset": [
        1279,
        10517
      ],
      "op": "GT",
      "path": "3"
    },
    "39": {
      "fn": null,
      "offset": [
        1279,
        10517
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x71"
    },
    "42": {
      "fn": null,
      "offset": [
        1279,
        10517
      ],
      "op": "JUMPI",
      "path": "3"
    },
    "43": {
      "fn": null,
      "offset": [
        1279,
        10517
      ],
      "op": "DUP1",
      "path": "3"
    },
    "44": {
      "fn": null,
      "offset": [
        1279,
        10517
      ],
      "op": "PUSH4",
      "path": "3",
      "value": "0x39509351"
    },
    "49": {
      "fn": null,
      "offset": [
        1279,
        10517
      ],
      "op": "EQ",
      "path": "3"
    },
    "50": {
      "fn": null,
      "offset": [
        1279,
        10517
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x129"
    },
    "53": {
      "fn": null,
      "offset": [
        1279,
        10517
      ],
      "op": "JUMPI",
      "path": "3"
    },
    "54": {
      "fn": null,
      "offset": [
        1279,
        10517
      ],
      "op": "DUP1",
      "path": "3"
    },
    "55": {
      "fn": null,
      "offset": [
        1279,
        10517
      ],
      "op": "PUSH4",
      "path": "3",
      "value": "0x70A08231"
    },
    "60": {
      "fn": null,
      "offset": [
        1279,
        10517
      ],
      "op": "EQ",
      "path": "3"
    },
    "61": {
      "fn": null,
      "offset": [
        1279,
        10517
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x13C"
    },
    "64": {
      "fn": null,
      "offset": [
        1279,
        10517
      ],
      "op": "JUMPI",
      "path": "3"
    },
    "65": {
      "fn": null,
      "offset": [
        1279,
        10517
      ],
      "op": "DUP1",
      "path": "3"
    },
    "66": {
      "fn": null,
      "offset": [
        1279,
        10517
      ],
      "op": "PUSH4",
      "path": "3",
      "value": "0x95D89B41"
    },
    "71": {
      "fn": null,
      "offset": [
        1279,
        10517
      ],
      "op": "EQ",
      "path": "3"
    },
    "72": {
      "fn": null,
      "offset": [
        1279,
        10517
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x14F"
    },
    "75": {
      "fn": null,
      "offset": [
        1279,
        10517
      ],
      "op": "JUMPI",
      "path": "3"
    },
    "76": {
      "fn": null,
      "offset": [
        1279,
        10517
      ],
      "op": "DUP1",
      "path": "3"
    },
    "77": {
      "fn": null,
      "offset": [
        1279,
        10517
      ],
      "op": "PUSH4",
      "path": "3",
      "value": "0xA457C2D7"
    },
    "82": {
      "fn": null,
      "offset": [
        1279,
        10517
      ],
      "op": "EQ",
      "path": "3"
    },
    "83": {
      "fn": null,
      "offset": [
        1279,
        10517
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x157"
    },
    "86": {
      "fn": null,
      "offset": [
        1279,
        10517
      ],
      "op": "JUMPI",
      "path": "3"
    },
    "87": {
      "fn": null,
      "offset": [
        1279,
        10517
      ],
      "op": "DUP1",
      "path": "3"
    },
    "88": {
      "fn": null,
      "offset": [
        1279,
        10517
      ],
      "op": "PUSH4",
      "path": "3",
      "value": "0xA9059CBB"
    },
    "93": {
      "fn": null,
      "offset": [
        1279,
        10517
      ],
      "op": "EQ",
      "path": "3"
    },
    "94": {
      "fn": null,
      "offset": [
        1279,
        10517
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x16A"
    },
    "97": {
      "fn": null,
      "offset": [
        1279,
        10517
      ],
      "op": "JUMPI",
      "path": "3"
    },
    "98": {
      "fn": null,
      "offset": [
        1279,
        10517
      ],
      "op": "DUP1",
      "path": "3"
    },
    "99": {
      "fn": null,
      "offset": [
        1279,
        10517
      ],
      "op": "PUSH4",
      "path": "3",
      "value": "0xDD62ED3E"
    },
    "104": {
      "fn": null,
      "offset": [
        1279,
        10517
      ],
      "op": "EQ",
      "path": "3"
    },
    "105": {
      "fn": null,
      "offset": [
        1279,
        10517
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x17D"
    },
    "108": {
      "fn": null,
      "offset": [
        1279,
        10517
      ],
      "op": "JUMPI",
      "path": "3"
    },
    "109": {
      "fn": null,
      "offset": [
        1279,
        10517
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0xA9"
    },
    "112": {
      "fn": null,
      "offset": [
        1279,
        10517
      ],
      "op": "JUMP",
      "path": "3"
    },
    "113": {
      "fn": null,
      "offset": [
        1279,
        10517
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "114": {
      "fn": null,
      "offset": [
        1279,
        10517
      ],
      "op": "DUP1",
      "path": "3"
    },
    "115": {
      "fn": null,
      "offset": [
        1279,
        10517
      ],
      "op": "PUSH4",
      "path": "3",
      "value": "0x6FDDE03"
    },
    "120": {
      "fn": null,
      "offset": [
        1279,
        10517
      ],
      "op": "EQ",
      "path": "3"
    },
    "121": {
      "fn": null,
      "offset": [
        1279,
        10517
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0xAE"
    },
    "124": {
      "fn": null,
      "offset": [
        1279,
        10517
      ],
      "op": "JUMPI",
      "path": "3"
    },
    "125": {
      "fn": null,
      "offset": [
        1279,
        10517
      ],
      "op": "DUP1",
      "path": "3"
    },
    "126": {
      "fn": null,
      "offset": [
        1279,
        10517
      ],
      "op": "PUSH4",
      "path": "3",
      "value": "0x95EA7B3"
    },
    "131": {
      "fn": null,
      "offset": [
        1279,
        10517
      ],
      "op": "EQ",
      "path": "3"
    },
    "132": {
      "fn": null,
      "offset": [
        1279,
        10517
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0xCC"
    },
    "135": {
      "fn": null,
      "offset": [
        1279,
        10517
      ],
      "op": "JUMPI",
      "path": "3"
    },
    "136": {
      "fn": null,
      "offset": [
        1279,
        10517
      ],
      "op": "DUP1",
      "path": "3"
    },
    "137": {
      "fn": null,
      "offset": [
        1279,
        10517
      ],
      "op": "PUSH4",
      "path": "3",
      "value": "0x18160DDD"
    },
    "142": {
      "fn": null,
      "offset": [
        1279,
        10517
      ],
      "op": "EQ",
      "path": "3"
    },
    "143": {
      "fn": null,
      "offset": [
        1279,
        10517
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0xEC"
    },
    "146": {
      "fn": null,
      "offset": [
        1279,
        10517
      ],
      "op": "JUMPI",
      "path": "3"
    },
    "147": {
      "fn": null,
      "offset": [
        1279,
        10517
      ],
      "op": "DUP1",
      "path": "3"
    },
    "148": {
      "fn": null,
      "offset": [
        1279,
        10517
      ],
      "op": "PUSH4",
      "path": "3",
      "value": "0x23B872DD"
    },
    "153": {
      "fn": null,
      "offset": [
        1279,
        10517
      ],
      "op": "EQ",
      "path": "3"
    },
    "154": {
      "fn": null,
      "offset": [
        1279,
        10517
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x101"
    },
    "157": {
      "fn": null,
      "offset": [
        1279,
        10517
      ],
      "op": "JUMPI",
      "path": "3"
    },
    "158": {
      "fn": null,
      "offset": [
        1279,
        10517
      ],
      "op": "DUP1",
      "path": "3"
    },
    "159": {
      "fn": null,
      "offset": [
        1279,
        10517
      ],
      "op": "PUSH4",
      "path": "3",
      "value": "0x313CE567"
    },
    "164": {
      "fn": null,
      "offset": [
        1279,
        10517
      ],
      "op": "EQ",
      "path": "3"
    },
    "165": {
      "fn": null,
      "offset": [
        1279,
        10517
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x114"
    },
    "168": {
      "fn": null,
      "offset": [
        1279,
        10517
      ],
      "op": "JUMPI",
      "path": "3"
    },
    "169": {
      "fn": null,
      "offset": [
        1279,
        10517
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "170": {
      "fn": null,
      "offset": [
        1279,
        10517
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x0"
    },
    "172": {
      "fn": null,
      "offset": [
        1279,
        10517
      ],
      "op": "DUP1",
      "path": "3"
    },
    "173": {
      "first_revert": true,
      "fn": null,
      "offset": [
        1279,
        10517
      ],
      "op": "REVERT",
      "path": "3"
    },
    "174": {
      "fn": "ERC20.name",
      "offset": [
        2021,
        2110
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "175": {
      "fn": "ERC20.name",
      "offset": [
        2021,
        2110
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0xB6"
    },
    "178": {
      "fn": "ERC20.name",
      "offset": [
        2021,
        2110
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x190"
    },
    "181": {
      "fn": "ERC20.name",
      "jump": "i",
      "offset": [
        2021,
        2110
      ],
      "op": "JUMP",
      "path": "3"
    },
    "182": {
      "fn": "ERC20.name",
      "offset": [
        2021,
        2110
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "183": {
      "fn": "ERC20.name",
      "offset": [
        2021,
        2110
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x40"
    },
    "185": {
      "fn": "ERC20.name",
      "offset": [
        2021,
        2110
      ],
      "op": "MLOAD",
      "path": "3"
    },
    "186": {
      "fn": "ERC20.name",
      "offset": [
        2021,
        2110
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0xC3"
    },
    "189": {
      "fn": "ERC20.name",
      "offset": [
        2021,
        2110
      ],
      "op": "SWAP2",
      "path": "3"
    },
    "190": {
      "fn": "ERC20.name",
      "offset": [
        2021,
        2110
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "191": {
      "fn": "ERC20.name",
      "offset": [
        2021,
        2110
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x6DF"
    },
    "194": {
      "fn": "ERC20.name",
      "jump": "i",
      "offset": [
        2021,
        2110
      ],
      "op": "JUMP",
      "path": "3"
    },
    "195": {
      "fn": "ERC20.name",
      "offset": [
        2021,
        2110
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "196": {
      "fn": "ERC20.name",
      "offset": [
        2021,
        2110
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x40"
    },
    "198": {
      "fn": "ERC20.name",
      "offset": [
        2021,
        2110
      ],
      "op": "MLOAD",
      "path": "3"
    },
    "199": {
      "fn": "ERC20.name",
      "offset": [
        2021,
        2110
      ],
      "op": "DUP1",
      "path": "3"
    },
    "200": {
      "fn": "ERC20.name",
      "offset": [
        2021,
        2110
      ],
      "op": "SWAP2",
      "path": "3"
    },
    "201": {
      "fn": "ERC20.name",
      "offset": [
        2021,
        2110
      ],
      "op": "SUB",
      "path": "3"
    },
    "202": {
      "fn": "ERC20.name",
      "offset": [
        2021,
        2110
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "203": {
      "fn": "ERC20.name",
      "offset": [
        2021,
        2110
      ],
      "op": "RETURN",
      "path": "3"
    },
    "204": {
      "fn": "ERC20.approve",
      "offset": [
        4091,
        4257
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "205": {
      "fn": "ERC20.approve",
      "offset": [
        4091,
        4257
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0xDF"
    },
    "208": {
      "fn": "ERC20.approve",
      "offset": [
        4091,
        4257
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0xDA"
    },
    "211": {
      "fn": "ERC20.approve",
      "offset": [
        4091,
        4257
      ],
      "op": "CALLDATASIZE",
      "path": "3"
    },
    "212": {
      "fn": "ERC20.approve",
      "offset": [
        4091,
        4257
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x4"
    },
    "214": {
      "fn": "ERC20.approve",
      "offset": [
        4091,
        4257
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x6AB"
    },
    "217": {
      "fn": "ERC20.approve",
      "jump": "i",
      "offset": [
        4091,
        4257
      ],
      "op": "JUMP",
      "path": "3"
    },
    "218": {
      "fn": "ERC20.approve",
      "offset": [
        4091,
        4257
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "219": {
      "fn": "ERC20.approve",
      "offset": [
        4091,
        4257
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x222"
    },
    "222": {
      "fn": "ERC20.approve",
      "jump": "i",
      "offset": [
        4091,
        4257
      ],
      "op": "JUMP",
      "path": "3"
    },
    "223": {
      "fn": "ERC20.approve",
      "offset": [
        4091,
        4257
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "224": {
      "fn": "ERC20.approve",
      "offset": [
        4091,
        4257
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x40"
    },
    "226": {
      "fn": "ERC20.approve",
      "offset": [
        4091,
        4257
      ],
      "op": "MLOAD",
      "path": "3"
    },
    "227": {
      "fn": "ERC20.approve",
      "offset": [
        4091,
        4257
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0xC3"
    },
    "230": {
      "fn": "ERC20.approve",
      "offset": [
        4091,
        4257
      ],
      "op": "SWAP2",
      "path": "3"
    },
    "231": {
      "fn": "ERC20.approve",
      "offset": [
        4091,
        4257
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "232": {
      "fn": "ERC20.approve",
      "offset": [
        4091,
        4257
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x6D4"
    },
    "235": {
      "fn": "ERC20.approve",
      "jump": "i",
      "offset": [
        4091,
        4257
      ],
      "op": "JUMP",
      "path": "3"
    },
    "236": {
      "fn": "ERC20.totalSupply",
      "offset": [
        3082,
        3188
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "237": {
      "fn": "ERC20.totalSupply",
      "offset": [
        3082,
        3188
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0xF4"
    },
    "240": {
      "fn": "ERC20.totalSupply",
      "offset": [
        3082,
        3188
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x23F"
    },
    "243": {
      "fn": "ERC20.totalSupply",
      "jump": "i",
      "offset": [
        3082,
        3188
      ],
      "op": "JUMP",
      "path": "3"
    },
    "244": {
      "fn": "ERC20.totalSupply",
      "offset": [
        3082,
        3188
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "245": {
      "fn": "ERC20.totalSupply",
      "offset": [
        3082,
        3188
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x40"
    },
    "247": {
      "fn": "ERC20.totalSupply",
      "offset": [
        3082,
        3188
      ],
      "op": "MLOAD",
      "path": "3"
    },
    "248": {
      "fn": "ERC20.totalSupply",
      "offset": [
        3082,
        3188
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0xC3"
    },
    "251": {
      "fn": "ERC20.totalSupply",
      "offset": [
        3082,
        3188
      ],
      "op": "SWAP2",
      "path": "3"
    },
    "252": {
      "fn": "ERC20.totalSupply",
      "offset": [
        3082,
        3188
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "253": {
      "fn": "ERC20.totalSupply",
      "offset": [
        3082,
        3188
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x913"
    },
    "256": {
      "fn": "ERC20.totalSupply",
      "jump": "i",
      "offset": [
        3082,
        3188
      ],
      "op": "JUMP",
      "path": "3"
    },
    "257": {
      "fn": "ERC20.transferFrom",
      "offset": [
        4724,
        5138
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "258": {
      "fn": "ERC20.transferFrom",
      "offset": [
        4724,
        5138
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0xDF"
    },
    "261": {
      "fn": "ERC20.transferFrom",
      "offset": [
        4724,
        5138
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x10F"
    },
    "264": {
      "fn": "ERC20.transferFrom",
      "offset": [
        4724,
        5138
      ],
      "op": "CALLDATASIZE",
      "path": "3"
    },
    "265": {
      "fn": "ERC20.transferFrom",
      "offset": [
        4724,
        5138
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x4"
    },
    "267": {
      "fn": "ERC20.transferFrom",
      "offset": [
        4724,
        5138
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x670"
    },
    "270": {
      "fn": "ERC20.transferFrom",
      "jump": "i",
      "offset": [
        4724,
        5138
      ],
      "op": "JUMP",
      "path": "3"
    },
    "271": {
      "fn": "ERC20.transferFrom",
      "offset": [
        4724,
        5138
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "272": {
      "fn": "ERC20.transferFrom",
      "offset": [
        4724,
        5138
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x245"
    },
    "275": {
      "fn": "ERC20.transferFrom",
      "jump": "i",
      "offset": [
        4724,
        5138
      ],
      "op": "JUMP",
      "path": "3"
    },
    "276": {
      "fn": "ERC20.decimals",
      "offset": [
        2940,
        3022
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "277": {
      "fn": "ERC20.decimals",
      "offset": [
        2940,
        3022
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x11C"
    },
    "280": {
      "fn": "ERC20.decimals",
      "offset": [
        2940,
        3022
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x2E5"
    },
    "283": {
      "fn": "ERC20.decimals",
      "jump": "i",
      "offset": [
        2940,
        3022
      ],
      "op": "JUMP",
      "path": "3"
    },
    "284": {
      "fn": "ERC20.decimals",
      "offset": [
        2940,
        3022
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "285": {
      "fn": "ERC20.decimals",
      "offset": [
        2940,
        3022
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x40"
    },
    "287": {
      "fn": "ERC20.decimals",
      "offset": [
        2940,
        3022
      ],
      "op": "MLOAD",
      "path": "3"
    },
    "288": {
      "fn": "ERC20.decimals",
      "offset": [
        2940,
        3022
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0xC3"
    },
    "291": {
      "fn": "ERC20.decimals",
      "offset": [
        2940,
        3022
      ],
      "op": "SWAP2",
      "path": "3"
    },
    "292": {
      "fn": "ERC20.decimals",
      "offset": [
        2940,
        3022
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "293": {
      "fn": "ERC20.decimals",
      "offset": [
        2940,
        3022
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x91C"
    },
    "296": {
      "fn": "ERC20.decimals",
      "jump": "i",
      "offset": [
        2940,
        3022
      ],
      "op": "JUMP",
      "path": "3"
    },
    "297": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5533,
        5745
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "298": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5533,
        5745
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0xDF"
    },
    "301": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5533,
        5745
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x137"
    },
    "304": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5533,
        5745
      ],
      "op": "CALLDATASIZE",
      "path": "3"
    },
    "305": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5533,
        5745
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x4"
    },
    "307": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5533,
        5745
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x6AB"
    },
    "310": {
      "fn": "ERC20.increaseAllowance",
      "jump": "i",
      "offset": [
        5533,
        5745
      ],
      "op": "JUMP",
      "path": "3"
    },
    "311": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5533,
        5745
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "312": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5533,
        5745
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x2EA"
    },
    "315": {
      "fn": "ERC20.increaseAllowance",
      "jump": "i",
      "offset": [
        5533,
        5745
      ],
      "op": "JUMP",
      "path": "3"
    },
    "316": {
      "fn": "ERC20.balanceOf",
      "offset": [
        3246,
        3371
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "317": {
      "fn": "ERC20.balanceOf",
      "offset": [
        3246,
        3371
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0xF4"
    },
    "320": {
      "fn": "ERC20.balanceOf",
      "offset": [
        3246,
        3371
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x14A"
    },
    "323": {
      "fn": "ERC20.balanceOf",
      "offset": [
        3246,
        3371
      ],
      "op": "CALLDATASIZE",
      "path": "3"
    },
    "324": {
      "fn": "ERC20.balanceOf",
      "offset": [
        3246,
        3371
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x4"
    },
    "326": {
      "fn": "ERC20.balanceOf",
      "offset": [
        3246,
        3371
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x61D"
    },
    "329": {
      "fn": "ERC20.balanceOf",
      "jump": "i",
      "offset": [
        3246,
        3371
      ],
      "op": "JUMP",
      "path": "3"
    },
    "330": {
      "fn": "ERC20.balanceOf",
      "offset": [
        3246,
        3371
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "331": {
      "fn": "ERC20.balanceOf",
      "offset": [
        3246,
        3371
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x339"
    },
    "334": {
      "fn": "ERC20.balanceOf",
      "jump": "i",
      "offset": [
        3246,
        3371
      ],
      "op": "JUMP",
      "path": "3"
    },
    "335": {
      "fn": "ERC20.symbol",
      "offset": [
        2223,
        2316
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "336": {
      "fn": "ERC20.symbol",
      "offset": [
        2223,
        2316
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0xB6"
    },
    "339": {
      "fn": "ERC20.symbol",
      "offset": [
        2223,
        2316
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x358"
    },
    "342": {
      "fn": "ERC20.symbol",
      "jump": "i",
      "offset": [
        2223,
        2316
      ],
      "op": "JUMP",
      "path": "3"
    },
    "343": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6232,
        6603
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "344": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6232,
        6603
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0xDF"
    },
    "347": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6232,
        6603
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x165"
    },
    "350": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6232,
        6603
      ],
      "op": "CALLDATASIZE",
      "path": "3"
    },
    "351": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6232,
        6603
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x4"
    },
    "353": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6232,
        6603
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x6AB"
    },
    "356": {
      "fn": "ERC20.decreaseAllowance",
      "jump": "i",
      "offset": [
        6232,
        6603
      ],
      "op": "JUMP",
      "path": "3"
    },
    "357": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6232,
        6603
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "358": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6232,
        6603
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x367"
    },
    "361": {
      "fn": "ERC20.decreaseAllowance",
      "jump": "i",
      "offset": [
        6232,
        6603
      ],
      "op": "JUMP",
      "path": "3"
    },
    "362": {
      "fn": "ERC20.transfer",
      "offset": [
        3574,
        3746
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "363": {
      "fn": "ERC20.transfer",
      "offset": [
        3574,
        3746
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0xDF"
    },
    "366": {
      "fn": "ERC20.transfer",
      "offset": [
        3574,
        3746
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x178"
    },
    "369": {
      "fn": "ERC20.transfer",
      "offset": [
        3574,
        3746
      ],
      "op": "CALLDATASIZE",
      "path": "3"
    },
    "370": {
      "fn": "ERC20.transfer",
      "offset": [
        3574,
        3746
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x4"
    },
    "372": {
      "fn": "ERC20.transfer",
      "offset": [
        3574,
        3746
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x6AB"
    },
    "375": {
      "fn": "ERC20.transfer",
      "jump": "i",
      "offset": [
        3574,
        3746
      ],
      "op": "JUMP",
      "path": "3"
    },
    "376": {
      "fn": "ERC20.transfer",
      "offset": [
        3574,
        3746
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "377": {
      "fn": "ERC20.transfer",
      "offset": [
        3574,
        3746
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x3E2"
    },
    "380": {
      "fn": "ERC20.transfer",
      "jump": "i",
      "offset": [
        3574,
        3746
      ],
      "op": "JUMP",
      "path": "3"
    },
    "381": {
      "fn": "ERC20.allowance",
      "offset": [
        3804,
        3953
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "382": {
      "fn": "ERC20.allowance",
      "offset": [
        3804,
        3953
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0xF4"
    },
    "385": {
      "fn": "ERC20.allowance",
      "offset": [
        3804,
        3953
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x18B"
    },
    "388": {
      "fn": "ERC20.allowance",
      "offset": [
        3804,
        3953
      ],
      "op": "CALLDATASIZE",
      "path": "3"
    },
    "389": {
      "fn": "ERC20.allowance",
      "offset": [
        3804,
        3953
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x4"
    },
    "391": {
      "fn": "ERC20.allowance",
      "offset": [
        3804,
        3953
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x63E"
    },
    "394": {
      "fn": "ERC20.allowance",
      "jump": "i",
      "offset": [
        3804,
        3953
      ],
      "op": "JUMP",
      "path": "3"
    },
    "395": {
      "fn": "ERC20.allowance",
      "offset": [
        3804,
        3953
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "396": {
      "fn": "ERC20.allowance",
      "offset": [
        3804,
        3953
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x3F6"
    },
    "399": {
      "fn": "ERC20.allowance",
      "jump": "i",
      "offset": [
        3804,
        3953
      ],
      "op": "JUMP",
      "path": "3"
    },
    "400": {
      "fn": "ERC20.name",
      "offset": [
        2021,
        2110
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "401": {
      "fn": "ERC20.name",
      "offset": [
        2066,
        2079
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x60"
    },
    "403": {
      "fn": "ERC20.name",
      "offset": [
        2098,
        2103
      ],
      "op": "PUSH1",
      "path": "3",
      "statement": 0,
      "value": "0x3"
    },
    "405": {
      "fn": "ERC20.name",
      "offset": [
        2091,
        2103
      ],
      "op": "DUP1",
      "path": "3"
    },
    "406": {
      "fn": "ERC20.name",
      "offset": [
        2091,
        2103
      ],
      "op": "SLOAD",
      "path": "3"
    },
    "407": {
      "fn": "ERC20.name",
      "offset": [
        2091,
        2103
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x19F"
    },
    "410": {
      "fn": "ERC20.name",
      "offset": [
        2091,
        2103
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "411": {
      "fn": "ERC20.name",
      "offset": [
        2091,
        2103
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x959"
    },
    "414": {
      "fn": "ERC20.name",
      "jump": "i",
      "offset": [
        2091,
        2103
      ],
      "op": "JUMP",
      "path": "3"
    },
    "415": {
      "fn": "ERC20.name",
      "offset": [
        2091,
        2103
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "416": {
      "fn": "ERC20.name",
      "offset": [
        2091,
        2103
      ],
      "op": "DUP1",
      "path": "3"
    },
    "417": {
      "fn": "ERC20.name",
      "offset": [
        2091,
        2103
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x1F"
    },
    "419": {
      "fn": "ERC20.name",
      "offset": [
        2091,
        2103
      ],
      "op": "ADD",
      "path": "3"
    },
    "420": {
      "fn": "ERC20.name",
      "offset": [
        2091,
        2103
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x20"
    },
    "422": {
      "fn": "ERC20.name",
      "offset": [
        2091,
        2103
      ],
      "op": "DUP1",
      "path": "3"
    },
    "423": {
      "fn": "ERC20.name",
      "offset": [
        2091,
        2103
      ],
      "op": "SWAP2",
      "path": "3"
    },
    "424": {
      "fn": "ERC20.name",
      "offset": [
        2091,
        2103
      ],
      "op": "DIV",
      "path": "3"
    },
    "425": {
      "fn": "ERC20.name",
      "offset": [
        2091,
        2103
      ],
      "op": "MUL",
      "path": "3"
    },
    "426": {
      "fn": "ERC20.name",
      "offset": [
        2091,
        2103
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x20"
    },
    "428": {
      "fn": "ERC20.name",
      "offset": [
        2091,
        2103
      ],
      "op": "ADD",
      "path": "3"
    },
    "429": {
      "fn": "ERC20.name",
      "offset": [
        2091,
        2103
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x40"
    },
    "431": {
      "fn": "ERC20.name",
      "offset": [
        2091,
        2103
      ],
      "op": "MLOAD",
      "path": "3"
    },
    "432": {
      "fn": "ERC20.name",
      "offset": [
        2091,
        2103
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "433": {
      "fn": "ERC20.name",
      "offset": [
        2091,
        2103
      ],
      "op": "DUP2",
      "path": "3"
    },
    "434": {
      "fn": "ERC20.name",
      "offset": [
        2091,
        2103
      ],
      "op": "ADD",
      "path": "3"
    },
    "435": {
      "fn": "ERC20.name",
      "offset": [
        2091,
        2103
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x40"
    },
    "437": {
      "fn": "ERC20.name",
      "offset": [
        2091,
        2103
      ],
      "op": "MSTORE",
      "path": "3"
    },
    "438": {
      "fn": "ERC20.name",
      "offset": [
        2091,
        2103
      ],
      "op": "DUP1",
      "path": "3"
    },
    "439": {
      "fn": "ERC20.name",
      "offset": [
        2091,
        2103
      ],
      "op": "SWAP3",
      "path": "3"
    },
    "440": {
      "fn": "ERC20.name",
      "offset": [
        2091,
        2103
      ],
      "op": "SWAP2",
      "path": "3"
    },
    "441": {
      "fn": "ERC20.name",
      "offset": [
        2091,
        2103
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "442": {
      "fn": "ERC20.name",
      "offset": [
        2091,
        2103
      ],
      "op": "DUP2",
      "path": "3"
    },
    "443": {
      "fn": "ERC20.name",
      "offset": [
        2091,
        2103
      ],
      "op": "DUP2",
      "path": "3"
    },
    "444": {
      "fn": "ERC20.name",
      "offset": [
        2091,
        2103
      ],
      "op": "MSTORE",
      "path": "3"
    },
    "445": {
      "fn": "ERC20.name",
      "offset": [
        2091,
        2103
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x20"
    },
    "447": {
      "fn": "ERC20.name",
      "offset": [
        2091,
        2103
      ],
      "op": "ADD",
      "path": "3"
    },
    "448": {
      "fn": "ERC20.name",
      "offset": [
        2091,
        2103
      ],
      "op": "DUP3",
      "path": "3"
    },
    "449": {
      "fn": "ERC20.name",
      "offset": [
        2091,
        2103
      ],
      "op": "DUP1",
      "path": "3"
    },
    "450": {
      "fn": "ERC20.name",
      "offset": [
        2091,
        2103
      ],
      "op": "SLOAD",
      "path": "3"
    },
    "451": {
      "fn": "ERC20.name",
      "offset": [
        2091,
        2103
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x1CB"
    },
    "454": {
      "fn": "ERC20.name",
      "offset": [
        2091,
        2103
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "455": {
      "fn": "ERC20.name",
      "offset": [
        2091,
        2103
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x959"
    },
    "458": {
      "fn": "ERC20.name",
      "jump": "i",
      "offset": [
        2091,
        2103
      ],
      "op": "JUMP",
      "path": "3"
    },
    "459": {
      "fn": "ERC20.name",
      "offset": [
        2091,
        2103
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "460": {
      "fn": "ERC20.name",
      "offset": [
        2091,
        2103
      ],
      "op": "DUP1",
      "path": "3"
    },
    "461": {
      "fn": "ERC20.name",
      "offset": [
        2091,
        2103
      ],
      "op": "ISZERO",
      "path": "3"
    },
    "462": {
      "fn": "ERC20.name",
      "offset": [
        2091,
        2103
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x218"
    },
    "465": {
      "fn": "ERC20.name",
      "offset": [
        2091,
        2103
      ],
      "op": "JUMPI",
      "path": "3"
    },
    "466": {
      "fn": "ERC20.name",
      "offset": [
        2091,
        2103
      ],
      "op": "DUP1",
      "path": "3"
    },
    "467": {
      "fn": "ERC20.name",
      "offset": [
        2091,
        2103
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x1F"
    },
    "469": {
      "fn": "ERC20.name",
      "offset": [
        2091,
        2103
      ],
      "op": "LT",
      "path": "3"
    },
    "470": {
      "fn": "ERC20.name",
      "offset": [
        2091,
        2103
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x1ED"
    },
    "473": {
      "fn": "ERC20.name",
      "offset": [
        2091,
        2103
      ],
      "op": "JUMPI",
      "path": "3"
    },
    "474": {
      "fn": "ERC20.name",
      "offset": [
        2091,
        2103
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x100"
    },
    "477": {
      "fn": "ERC20.name",
      "offset": [
        2091,
        2103
      ],
      "op": "DUP1",
      "path": "3"
    },
    "478": {
      "fn": "ERC20.name",
      "offset": [
        2091,
        2103
      ],
      "op": "DUP4",
      "path": "3"
    },
    "479": {
      "fn": "ERC20.name",
      "offset": [
        2091,
        2103
      ],
      "op": "SLOAD",
      "path": "3"
    },
    "480": {
      "fn": "ERC20.name",
      "offset": [
        2091,
        2103
      ],
      "op": "DIV",
      "path": "3"
    },
    "481": {
      "fn": "ERC20.name",
      "offset": [
        2091,
        2103
      ],
      "op": "MUL",
      "path": "3"
    },
    "482": {
      "fn": "ERC20.name",
      "offset": [
        2091,
        2103
      ],
      "op": "DUP4",
      "path": "3"
    },
    "483": {
      "fn": "ERC20.name",
      "offset": [
        2091,
        2103
      ],
      "op": "MSTORE",
      "path": "3"
    },
    "484": {
      "fn": "ERC20.name",
      "offset": [
        2091,
        2103
      ],
      "op": "SWAP2",
      "path": "3"
    },
    "485": {
      "fn": "ERC20.name",
      "offset": [
        2091,
        2103
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x20"
    },
    "487": {
      "fn": "ERC20.name",
      "offset": [
        2091,
        2103
      ],
      "op": "ADD",
      "path": "3"
    },
    "488": {
      "fn": "ERC20.name",
      "offset": [
        2091,
        2103
      ],
      "op": "SWAP2",
      "path": "3"
    },
    "489": {
      "fn": "ERC20.name",
      "offset": [
        2091,
        2103
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x218"
    },
    "492": {
      "fn": "ERC20.name",
      "offset": [
        2091,
        2103
      ],
      "op": "JUMP",
      "path": "3"
    },
    "493": {
      "fn": "ERC20.name",
      "offset": [
        2091,
        2103
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "494": {
      "fn": "ERC20.name",
      "offset": [
        2091,
        2103
      ],
      "op": "DUP3",
      "path": "3"
    },
    "495": {
      "fn": "ERC20.name",
      "offset": [
        2091,
        2103
      ],
      "op": "ADD",
      "path": "3"
    },
    "496": {
      "fn": "ERC20.name",
      "offset": [
        2091,
        2103
      ],
      "op": "SWAP2",
      "path": "3"
    },
    "497": {
      "fn": "ERC20.name",
      "offset": [
        2091,
        2103
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "498": {
      "fn": "ERC20.name",
      "offset": [
        2091,
        2103
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x0"
    },
    "500": {
      "fn": "ERC20.name",
      "offset": [
        2091,
        2103
      ],
      "op": "MSTORE",
      "path": "3"
    },
    "501": {
      "fn": "ERC20.name",
      "offset": [
        2091,
        2103
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x20"
    },
    "503": {
      "fn": "ERC20.name",
      "offset": [
        2091,
        2103
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x0"
    },
    "505": {
      "fn": "ERC20.name",
      "offset": [
        2091,
        2103
      ],
      "op": "KECCAK256",
      "path": "3"
    },
    "506": {
      "fn": "ERC20.name",
      "offset": [
        2091,
        2103
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "507": {
      "fn": "ERC20.name",
      "offset": [
        2091,
        2103
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "508": {
      "fn": "ERC20.name",
      "offset": [
        2091,
        2103
      ],
      "op": "DUP2",
      "path": "3"
    },
    "509": {
      "fn": "ERC20.name",
      "offset": [
        2091,
        2103
      ],
      "op": "SLOAD",
      "path": "3"
    },
    "510": {
      "fn": "ERC20.name",
      "offset": [
        2091,
        2103
      ],
      "op": "DUP2",
      "path": "3"
    },
    "511": {
      "fn": "ERC20.name",
      "offset": [
        2091,
        2103
      ],
      "op": "MSTORE",
      "path": "3"
    },
    "512": {
      "fn": "ERC20.name",
      "offset": [
        2091,
        2103
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "513": {
      "fn": "ERC20.name",
      "offset": [
        2091,
        2103
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x1"
    },
    "515": {
      "fn": "ERC20.name",
      "offset": [
        2091,
        2103
      ],
      "op": "ADD",
      "path": "3"
    },
    "516": {
      "fn": "ERC20.name",
      "offset": [
        2091,
        2103
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "517": {
      "fn": "ERC20.name",
      "offset": [
        2091,
        2103
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x20"
    },
    "519": {
      "fn": "ERC20.name",
      "offset": [
        2091,
        2103
      ],
      "op": "ADD",
      "path": "3"
    },
    "520": {
      "fn": "ERC20.name",
      "offset": [
        2091,
        2103
      ],
      "op": "DUP1",
      "path": "3"
    },
    "521": {
      "fn": "ERC20.name",
      "offset": [
        2091,
        2103
      ],
      "op": "DUP4",
      "path": "3"
    },
    "522": {
      "fn": "ERC20.name",
      "offset": [
        2091,
        2103
      ],
      "op": "GT",
      "path": "3"
    },
    "523": {
      "fn": "ERC20.name",
      "offset": [
        2091,
        2103
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x1FB"
    },
    "526": {
      "fn": "ERC20.name",
      "offset": [
        2091,
        2103
      ],
      "op": "JUMPI",
      "path": "3"
    },
    "527": {
      "fn": "ERC20.name",
      "offset": [
        2091,
        2103
      ],
      "op": "DUP3",
      "path": "3"
    },
    "528": {
      "fn": "ERC20.name",
      "offset": [
        2091,
        2103
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "529": {
      "fn": "ERC20.name",
      "offset": [
        2091,
        2103
      ],
      "op": "SUB",
      "path": "3"
    },
    "530": {
      "fn": "ERC20.name",
      "offset": [
        2091,
        2103
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x1F"
    },
    "532": {
      "fn": "ERC20.name",
      "offset": [
        2091,
        2103
      ],
      "op": "AND",
      "path": "3"
    },
    "533": {
      "fn": "ERC20.name",
      "offset": [
        2091,
        2103
      ],
      "op": "DUP3",
      "path": "3"
    },
    "534": {
      "fn": "ERC20.name",
      "offset": [
        2091,
        2103
      ],
      "op": "ADD",
      "path": "3"
    },
    "535": {
      "fn": "ERC20.name",
      "offset": [
        2091,
        2103
      ],
      "op": "SWAP2",
      "path": "3"
    },
    "536": {
      "fn": "ERC20.name",
      "offset": [
        2091,
        2103
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "537": {
      "fn": "ERC20.name",
      "offset": [
        2091,
        2103
      ],
      "op": "POP",
      "path": "3"
    },
    "538": {
      "fn": "ERC20.name",
      "offset": [
        2091,
        2103
      ],
      "op": "POP",
      "path": "3"
    },
    "539": {
      "fn": "ERC20.name",
      "offset": [
        2091,
        2103
      ],
      "op": "POP",
      "path": "3"
    },
    "540": {
      "fn": "ERC20.name",
      "offset": [
        2091,
        2103
      ],
      "op": "POP",
      "path": "3"
    },
    "541": {
      "fn": "ERC20.name",
      "offset": [
        2091,
        2103
      ],
      "op": "POP",
      "path": "3"
    },
    "542": {
      "fn": "ERC20.name",
      "offset": [
        2091,
        2103
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "543": {
      "fn": "ERC20.name",
      "offset": [
        2091,
        2103
      ],
      "op": "POP",
      "path": "3"
    },
    "544": {
      "fn": "ERC20.name",
      "offset": [
        2021,
        2110
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "545": {
      "fn": "ERC20.name",
      "jump": "o",
      "offset": [
        2021,
        2110
      ],
      "op": "JUMP",
      "path": "3"
    },
    "546": {
      "fn": "ERC20.approve",
      "offset": [
        4091,
        4257
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "547": {
      "fn": "ERC20.approve",
      "offset": [
        4174,
        4178
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x0"
    },
    "549": {
      "fn": "ERC20.approve",
      "offset": [
        4190,
        4229
      ],
      "op": "PUSH2",
      "path": "3",
      "statement": 1,
      "value": "0x236"
    },
    "552": {
      "fn": "ERC20.approve",
      "offset": [
        4199,
        4211
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x22F"
    },
    "555": {
      "fn": "ERC20.approve",
      "offset": [
        4199,
        4209
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x421"
    },
    "558": {
      "fn": "ERC20.approve",
      "jump": "i",
      "offset": [
        4199,
        4211
      ],
      "op": "JUMP",
      "path": "3"
    },
    "559": {
      "fn": "ERC20.approve",
      "offset": [
        4199,
        4211
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "560": {
      "fn": "ERC20.approve",
      "offset": [
        4213,
        4220
      ],
      "op": "DUP5",
      "path": "3"
    },
    "561": {
      "fn": "ERC20.approve",
      "offset": [
        4222,
        4228
      ],
      "op": "DUP5",
      "path": "3"
    },
    "562": {
      "fn": "ERC20.approve",
      "offset": [
        4190,
        4198
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x425"
    },
    "565": {
      "fn": "ERC20.approve",
      "jump": "i",
      "offset": [
        4190,
        4229
      ],
      "op": "JUMP",
      "path": "3"
    },
    "566": {
      "fn": "ERC20.approve",
      "offset": [
        4190,
        4229
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "567": {
      "op": "POP"
    },
    "568": {
      "fn": "ERC20.approve",
      "offset": [
        4246,
        4250
      ],
      "op": "PUSH1",
      "path": "3",
      "statement": 2,
      "value": "0x1"
    },
    "570": {
      "fn": "ERC20.approve",
      "offset": [
        4091,
        4257
      ],
      "op": "SWAP3",
      "path": "3"
    },
    "571": {
      "fn": "ERC20.approve",
      "offset": [
        4091,
        4257
      ],
      "op": "SWAP2",
      "path": "3"
    },
    "572": {
      "fn": "ERC20.approve",
      "offset": [
        4091,
        4257
      ],
      "op": "POP",
      "path": "3"
    },
    "573": {
      "fn": "ERC20.approve",
      "offset": [
        4091,
        4257
      ],
      "op": "POP",
      "path": "3"
    },
    "574": {
      "fn": "ERC20.approve",
      "jump": "o",
      "offset": [
        4091,
        4257
      ],
      "op": "JUMP",
      "path": "3"
    },
    "575": {
      "fn": "ERC20.totalSupply",
      "offset": [
        3082,
        3188
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "576": {
      "fn": "ERC20.totalSupply",
      "offset": [
        3169,
        3181
      ],
      "op": "PUSH1",
      "path": "3",
      "statement": 3,
      "value": "0x2"
    },
    "578": {
      "fn": "ERC20.totalSupply",
      "offset": [
        3169,
        3181
      ],
      "op": "SLOAD",
      "path": "3"
    },
    "579": {
      "fn": "ERC20.totalSupply",
      "offset": [
        3082,
        3188
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "580": {
      "fn": "ERC20.totalSupply",
      "jump": "o",
      "offset": [
        3082,
        3188
      ],
      "op": "JUMP",
      "path": "3"
    },
    "581": {
      "fn": "ERC20.transferFrom",
      "offset": [
        4724,
        5138
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "582": {
      "fn": "ERC20.transferFrom",
      "offset": [
        4830,
        4834
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x0"
    },
    "584": {
      "fn": "ERC20.transferFrom",
      "offset": [
        4846,
        4882
      ],
      "op": "PUSH2",
      "path": "3",
      "statement": 4,
      "value": "0x252"
    },
    "587": {
      "fn": "ERC20.transferFrom",
      "offset": [
        4856,
        4862
      ],
      "op": "DUP5",
      "path": "3"
    },
    "588": {
      "fn": "ERC20.transferFrom",
      "offset": [
        4864,
        4873
      ],
      "op": "DUP5",
      "path": "3"
    },
    "589": {
      "fn": "ERC20.transferFrom",
      "offset": [
        4875,
        4881
      ],
      "op": "DUP5",
      "path": "3"
    },
    "590": {
      "fn": "ERC20.transferFrom",
      "offset": [
        4846,
        4855
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x4D9"
    },
    "593": {
      "fn": "ERC20.transferFrom",
      "jump": "i",
      "offset": [
        4846,
        4882
      ],
      "op": "JUMP",
      "path": "3"
    },
    "594": {
      "fn": "ERC20.transferFrom",
      "offset": [
        4846,
        4882
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "595": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "597": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "599": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "601": {
      "op": "SHL"
    },
    "602": {
      "op": "SUB"
    },
    "603": {
      "fn": "ERC20.transferFrom",
      "offset": [
        4920,
        4939
      ],
      "op": "DUP5",
      "path": "3"
    },
    "604": {
      "fn": "ERC20.transferFrom",
      "offset": [
        4920,
        4939
      ],
      "op": "AND",
      "path": "3"
    },
    "605": {
      "fn": "ERC20.transferFrom",
      "offset": [
        4893,
        4917
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x0"
    },
    "607": {
      "fn": "ERC20.transferFrom",
      "offset": [
        4920,
        4939
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "608": {
      "fn": "ERC20.transferFrom",
      "offset": [
        4920,
        4939
      ],
      "op": "DUP2",
      "path": "3"
    },
    "609": {
      "fn": "ERC20.transferFrom",
      "offset": [
        4920,
        4939
      ],
      "op": "MSTORE",
      "path": "3"
    },
    "610": {
      "fn": "ERC20.transferFrom",
      "offset": [
        4920,
        4931
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x1"
    },
    "612": {
      "fn": "ERC20.transferFrom",
      "offset": [
        4920,
        4939
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x20"
    },
    "614": {
      "fn": "ERC20.transferFrom",
      "offset": [
        4920,
        4939
      ],
      "op": "MSTORE",
      "path": "3"
    },
    "615": {
      "fn": "ERC20.transferFrom",
      "offset": [
        4920,
        4939
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x40"
    },
    "617": {
      "fn": "ERC20.transferFrom",
      "offset": [
        4920,
        4939
      ],
      "op": "DUP2",
      "path": "3"
    },
    "618": {
      "fn": "ERC20.transferFrom",
      "offset": [
        4920,
        4939
      ],
      "op": "KECCAK256",
      "path": "3"
    },
    "619": {
      "fn": "ERC20.transferFrom",
      "offset": [
        4893,
        4917
      ],
      "op": "DUP2",
      "path": "3"
    },
    "620": {
      "fn": "ERC20.transferFrom",
      "offset": [
        4940,
        4952
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x273"
    },
    "623": {
      "fn": "ERC20.transferFrom",
      "offset": [
        4940,
        4950
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x421"
    },
    "626": {
      "fn": "ERC20.transferFrom",
      "jump": "i",
      "offset": [
        4940,
        4952
      ],
      "op": "JUMP",
      "path": "3"
    },
    "627": {
      "fn": "ERC20.transferFrom",
      "offset": [
        4940,
        4952
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "628": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "630": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "632": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "634": {
      "op": "SHL"
    },
    "635": {
      "op": "SUB"
    },
    "636": {
      "fn": "ERC20.transferFrom",
      "offset": [
        4920,
        4953
      ],
      "op": "AND",
      "path": "3"
    },
    "637": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "639": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "641": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "643": {
      "op": "SHL"
    },
    "644": {
      "op": "SUB"
    },
    "645": {
      "fn": "ERC20.transferFrom",
      "offset": [
        4920,
        4953
      ],
      "op": "AND",
      "path": "3"
    },
    "646": {
      "fn": "ERC20.transferFrom",
      "offset": [
        4920,
        4953
      ],
      "op": "DUP2",
      "path": "3"
    },
    "647": {
      "fn": "ERC20.transferFrom",
      "offset": [
        4920,
        4953
      ],
      "op": "MSTORE",
      "path": "3"
    },
    "648": {
      "fn": "ERC20.transferFrom",
      "offset": [
        4920,
        4953
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x20"
    },
    "650": {
      "fn": "ERC20.transferFrom",
      "offset": [
        4920,
        4953
      ],
      "op": "ADD",
      "path": "3"
    },
    "651": {
      "fn": "ERC20.transferFrom",
      "offset": [
        4920,
        4953
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "652": {
      "fn": "ERC20.transferFrom",
      "offset": [
        4920,
        4953
      ],
      "op": "DUP2",
      "path": "3"
    },
    "653": {
      "fn": "ERC20.transferFrom",
      "offset": [
        4920,
        4953
      ],
      "op": "MSTORE",
      "path": "3"
    },
    "654": {
      "fn": "ERC20.transferFrom",
      "offset": [
        4920,
        4953
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x20"
    },
    "656": {
      "fn": "ERC20.transferFrom",
      "offset": [
        4920,
        4953
      ],
      "op": "ADD",
      "path": "3"
    },
    "657": {
      "fn": "ERC20.transferFrom",
      "offset": [
        4920,
        4953
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x0"
    },
    "659": {
      "fn": "ERC20.transferFrom",
      "offset": [
        4920,
        4953
      ],
      "op": "KECCAK256",
      "path": "3"
    },
    "660": {
      "fn": "ERC20.transferFrom",
      "offset": [
        4920,
        4953
      ],
      "op": "SLOAD",
      "path": "3"
    },
    "661": {
      "fn": "ERC20.transferFrom",
      "offset": [
        4893,
        4953
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "662": {
      "fn": "ERC20.transferFrom",
      "offset": [
        4893,
        4953
      ],
      "op": "POP",
      "path": "3"
    },
    "663": {
      "fn": "ERC20.transferFrom",
      "offset": [
        4991,
        4997
      ],
      "op": "DUP3",
      "path": "3",
      "statement": 5
    },
    "664": {
      "fn": "ERC20.transferFrom",
      "offset": [
        4971,
        4987
      ],
      "op": "DUP2",
      "path": "3"
    },
    "665": {
      "fn": "ERC20.transferFrom",
      "offset": [
        4971,
        4997
      ],
      "op": "LT",
      "path": "3"
    },
    "666": {
      "branch": 29,
      "fn": "ERC20.transferFrom",
      "offset": [
        4971,
        4997
      ],
      "op": "ISZERO",
      "path": "3"
    },
    "667": {
      "fn": "ERC20.transferFrom",
      "offset": [
        4963,
        5042
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x2BF"
    },
    "670": {
      "branch": 29,
      "fn": "ERC20.transferFrom",
      "offset": [
        4963,
        5042
      ],
      "op": "JUMPI",
      "path": "3"
    },
    "671": {
      "fn": "ERC20.transferFrom",
      "offset": [
        4963,
        5042
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x40"
    },
    "673": {
      "fn": "ERC20.transferFrom",
      "offset": [
        4963,
        5042
      ],
      "op": "MLOAD",
      "path": "3"
    },
    "674": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "678": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "680": {
      "op": "SHL"
    },
    "681": {
      "fn": "ERC20.transferFrom",
      "offset": [
        4963,
        5042
      ],
      "op": "DUP2",
      "path": "3"
    },
    "682": {
      "fn": "ERC20.transferFrom",
      "offset": [
        4963,
        5042
      ],
      "op": "MSTORE",
      "path": "3"
    },
    "683": {
      "fn": "ERC20.transferFrom",
      "offset": [
        4963,
        5042
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x4"
    },
    "685": {
      "fn": "ERC20.transferFrom",
      "offset": [
        4963,
        5042
      ],
      "op": "ADD",
      "path": "3"
    },
    "686": {
      "fn": "ERC20.transferFrom",
      "offset": [
        4963,
        5042
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x2B6"
    },
    "689": {
      "fn": "ERC20.transferFrom",
      "offset": [
        4963,
        5042
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "690": {
      "fn": "ERC20.transferFrom",
      "offset": [
        4963,
        5042
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x7FD"
    },
    "693": {
      "fn": "ERC20.transferFrom",
      "jump": "i",
      "offset": [
        4963,
        5042
      ],
      "op": "JUMP",
      "path": "3"
    },
    "694": {
      "fn": "ERC20.transferFrom",
      "offset": [
        4963,
        5042
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "695": {
      "fn": "ERC20.transferFrom",
      "offset": [
        4963,
        5042
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x40"
    },
    "697": {
      "fn": "ERC20.transferFrom",
      "offset": [
        4963,
        5042
      ],
      "op": "MLOAD",
      "path": "3"
    },
    "698": {
      "fn": "ERC20.transferFrom",
      "offset": [
        4963,
        5042
      ],
      "op": "DUP1",
      "path": "3"
    },
    "699": {
      "fn": "ERC20.transferFrom",
      "offset": [
        4963,
        5042
      ],
      "op": "SWAP2",
      "path": "3"
    },
    "700": {
      "fn": "ERC20.transferFrom",
      "offset": [
        4963,
        5042
      ],
      "op": "SUB",
      "path": "3"
    },
    "701": {
      "fn": "ERC20.transferFrom",
      "offset": [
        4963,
        5042
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "702": {
      "fn": "ERC20.transferFrom",
      "offset": [
        4963,
        5042
      ],
      "op": "REVERT",
      "optimizer_revert": true,
      "path": "3"
    },
    "703": {
      "fn": "ERC20.transferFrom",
      "offset": [
        4963,
        5042
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "704": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5052,
        5109
      ],
      "op": "PUSH2",
      "path": "3",
      "statement": 6,
      "value": "0x2DA"
    },
    "707": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5061,
        5067
      ],
      "op": "DUP6",
      "path": "3"
    },
    "708": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5069,
        5081
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x2CB"
    },
    "711": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5069,
        5079
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x421"
    },
    "714": {
      "fn": "ERC20.transferFrom",
      "jump": "i",
      "offset": [
        5069,
        5081
      ],
      "op": "JUMP",
      "path": "3"
    },
    "715": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5069,
        5081
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "716": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5083,
        5108
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x2D5"
    },
    "719": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5102,
        5108
      ],
      "op": "DUP7",
      "path": "3"
    },
    "720": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5083,
        5099
      ],
      "op": "DUP6",
      "path": "3"
    },
    "721": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5083,
        5108
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x942"
    },
    "724": {
      "fn": "ERC20.transferFrom",
      "jump": "i",
      "offset": [
        5083,
        5108
      ],
      "op": "JUMP",
      "path": "3"
    },
    "725": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5083,
        5108
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "726": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5052,
        5060
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x425"
    },
    "729": {
      "fn": "ERC20.transferFrom",
      "jump": "i",
      "offset": [
        5052,
        5109
      ],
      "op": "JUMP",
      "path": "3"
    },
    "730": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5052,
        5109
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "731": {
      "op": "POP"
    },
    "732": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5127,
        5131
      ],
      "op": "PUSH1",
      "path": "3",
      "statement": 7,
      "value": "0x1"
    },
    "734": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5127,
        5131
      ],
      "op": "SWAP5",
      "path": "3"
    },
    "735": {
      "fn": "ERC20.transferFrom",
      "offset": [
        4724,
        5138
      ],
      "op": "SWAP4",
      "path": "3"
    },
    "736": {
      "op": "POP"
    },
    "737": {
      "op": "POP"
    },
    "738": {
      "op": "POP"
    },
    "739": {
      "op": "POP"
    },
    "740": {
      "fn": "ERC20.transferFrom",
      "jump": "o",
      "offset": [
        4724,
        5138
      ],
      "op": "JUMP",
      "path": "3"
    },
    "741": {
      "fn": "ERC20.decimals",
      "offset": [
        2940,
        3022
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "742": {
      "fn": "ERC20.decimals",
      "offset": [
        3013,
        3015
      ],
      "op": "PUSH1",
      "path": "3",
      "statement": 8,
      "value": "0x12"
    },
    "744": {
      "fn": "ERC20.decimals",
      "offset": [
        2940,
        3022
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "745": {
      "fn": "ERC20.decimals",
      "jump": "o",
      "offset": [
        2940,
        3022
      ],
      "op": "JUMP",
      "path": "3"
    },
    "746": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5533,
        5745
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "747": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5621,
        5625
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x0"
    },
    "749": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5637,
        5717
      ],
      "op": "PUSH2",
      "path": "3",
      "statement": 9,
      "value": "0x236"
    },
    "752": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5646,
        5658
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x2F7"
    },
    "755": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5646,
        5656
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x421"
    },
    "758": {
      "fn": "ERC20.increaseAllowance",
      "jump": "i",
      "offset": [
        5646,
        5658
      ],
      "op": "JUMP",
      "path": "3"
    },
    "759": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5646,
        5658
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "760": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5660,
        5667
      ],
      "op": "DUP5",
      "path": "3"
    },
    "761": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5706,
        5716
      ],
      "op": "DUP5",
      "path": "3"
    },
    "762": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5669,
        5680
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x1"
    },
    "764": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5669,
        5694
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x0"
    },
    "766": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5681,
        5693
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x305"
    },
    "769": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5681,
        5691
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x421"
    },
    "772": {
      "fn": "ERC20.increaseAllowance",
      "jump": "i",
      "offset": [
        5681,
        5693
      ],
      "op": "JUMP",
      "path": "3"
    },
    "773": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5681,
        5693
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "774": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "776": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "778": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "780": {
      "op": "SHL"
    },
    "781": {
      "op": "SUB"
    },
    "782": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5669,
        5694
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "783": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5669,
        5694
      ],
      "op": "DUP2",
      "path": "3"
    },
    "784": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5669,
        5694
      ],
      "op": "AND",
      "path": "3"
    },
    "785": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5669,
        5694
      ],
      "op": "DUP3",
      "path": "3"
    },
    "786": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5669,
        5694
      ],
      "op": "MSTORE",
      "path": "3"
    },
    "787": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5669,
        5694
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x20"
    },
    "789": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5669,
        5694
      ],
      "op": "DUP1",
      "path": "3"
    },
    "790": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5669,
        5694
      ],
      "op": "DUP4",
      "path": "3"
    },
    "791": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5669,
        5694
      ],
      "op": "ADD",
      "path": "3"
    },
    "792": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5669,
        5694
      ],
      "op": "SWAP4",
      "path": "3"
    },
    "793": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5669,
        5694
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "794": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5669,
        5694
      ],
      "op": "SWAP4",
      "path": "3"
    },
    "795": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5669,
        5694
      ],
      "op": "MSTORE",
      "path": "3"
    },
    "796": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5669,
        5694
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x40"
    },
    "798": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5669,
        5694
      ],
      "op": "SWAP2",
      "path": "3"
    },
    "799": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5669,
        5694
      ],
      "op": "DUP3",
      "path": "3"
    },
    "800": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5669,
        5694
      ],
      "op": "ADD",
      "path": "3"
    },
    "801": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "803": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5669,
        5694
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "804": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5669,
        5694
      ],
      "op": "DUP2",
      "path": "3"
    },
    "805": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5669,
        5694
      ],
      "op": "KECCAK256",
      "path": "3"
    },
    "806": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5669,
        5703
      ],
      "op": "SWAP2",
      "path": "3"
    },
    "807": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5669,
        5703
      ],
      "op": "DUP12",
      "path": "3"
    },
    "808": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5669,
        5703
      ],
      "op": "AND",
      "path": "3"
    },
    "809": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5669,
        5703
      ],
      "op": "DUP2",
      "path": "3"
    },
    "810": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5669,
        5703
      ],
      "op": "MSTORE",
      "path": "3"
    },
    "811": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5669,
        5703
      ],
      "op": "SWAP3",
      "path": "3"
    },
    "812": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5669,
        5703
      ],
      "op": "MSTORE",
      "path": "3"
    },
    "813": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5669,
        5703
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "814": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5669,
        5703
      ],
      "op": "KECCAK256",
      "path": "3"
    },
    "815": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5669,
        5703
      ],
      "op": "SLOAD",
      "path": "3"
    },
    "816": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5669,
        5716
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x2D5"
    },
    "819": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5669,
        5716
      ],
      "op": "SWAP2",
      "path": "3"
    },
    "820": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5669,
        5716
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "821": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5669,
        5716
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x92A"
    },
    "824": {
      "fn": "ERC20.increaseAllowance",
      "jump": "i",
      "offset": [
        5669,
        5716
      ],
      "op": "JUMP",
      "path": "3"
    },
    "825": {
      "fn": "ERC20.balanceOf",
      "offset": [
        3246,
        3371
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "826": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "828": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "830": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "832": {
      "op": "SHL"
    },
    "833": {
      "op": "SUB"
    },
    "834": {
      "fn": "ERC20.balanceOf",
      "offset": [
        3346,
        3364
      ],
      "op": "DUP2",
      "path": "3",
      "statement": 10
    },
    "835": {
      "fn": "ERC20.balanceOf",
      "offset": [
        3346,
        3364
      ],
      "op": "AND",
      "path": "3"
    },
    "836": {
      "fn": "ERC20.balanceOf",
      "offset": [
        3320,
        3327
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x0"
    },
    "838": {
      "fn": "ERC20.balanceOf",
      "offset": [
        3346,
        3364
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "839": {
      "fn": "ERC20.balanceOf",
      "offset": [
        3346,
        3364
      ],
      "op": "DUP2",
      "path": "3"
    },
    "840": {
      "fn": "ERC20.balanceOf",
      "offset": [
        3346,
        3364
      ],
      "op": "MSTORE",
      "path": "3"
    },
    "841": {
      "fn": "ERC20.balanceOf",
      "offset": [
        3346,
        3364
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x20"
    },
    "843": {
      "fn": "ERC20.balanceOf",
      "offset": [
        3346,
        3364
      ],
      "op": "DUP2",
      "path": "3"
    },
    "844": {
      "fn": "ERC20.balanceOf",
      "offset": [
        3346,
        3364
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "845": {
      "fn": "ERC20.balanceOf",
      "offset": [
        3346,
        3364
      ],
      "op": "MSTORE",
      "path": "3"
    },
    "846": {
      "fn": "ERC20.balanceOf",
      "offset": [
        3346,
        3364
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x40"
    },
    "848": {
      "fn": "ERC20.balanceOf",
      "offset": [
        3346,
        3364
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "849": {
      "fn": "ERC20.balanceOf",
      "offset": [
        3346,
        3364
      ],
      "op": "KECCAK256",
      "path": "3"
    },
    "850": {
      "fn": "ERC20.balanceOf",
      "offset": [
        3346,
        3364
      ],
      "op": "SLOAD",
      "path": "3"
    },
    "851": {
      "fn": "ERC20.balanceOf",
      "offset": [
        3246,
        3371
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "852": {
      "fn": "ERC20.balanceOf",
      "offset": [
        3246,
        3371
      ],
      "op": "SWAP2",
      "path": "3"
    },
    "853": {
      "fn": "ERC20.balanceOf",
      "offset": [
        3246,
        3371
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "854": {
      "fn": "ERC20.balanceOf",
      "offset": [
        3246,
        3371
      ],
      "op": "POP",
      "path": "3"
    },
    "855": {
      "fn": "ERC20.balanceOf",
      "jump": "o",
      "offset": [
        3246,
        3371
      ],
      "op": "JUMP",
      "path": "3"
    },
    "856": {
      "fn": "ERC20.symbol",
      "offset": [
        2223,
        2316
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "857": {
      "fn": "ERC20.symbol",
      "offset": [
        2270,
        2283
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x60"
    },
    "859": {
      "fn": "ERC20.symbol",
      "offset": [
        2302,
        2309
      ],
      "op": "PUSH1",
      "path": "3",
      "statement": 11,
      "value": "0x4"
    },
    "861": {
      "fn": "ERC20.symbol",
      "offset": [
        2295,
        2309
      ],
      "op": "DUP1",
      "path": "3"
    },
    "862": {
      "fn": "ERC20.symbol",
      "offset": [
        2295,
        2309
      ],
      "op": "SLOAD",
      "path": "3"
    },
    "863": {
      "fn": "ERC20.symbol",
      "offset": [
        2295,
        2309
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x19F"
    },
    "866": {
      "fn": "ERC20.symbol",
      "offset": [
        2295,
        2309
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "867": {
      "fn": "ERC20.symbol",
      "offset": [
        2295,
        2309
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x959"
    },
    "870": {
      "fn": "ERC20.symbol",
      "jump": "i",
      "offset": [
        2295,
        2309
      ],
      "op": "JUMP",
      "path": "3"
    },
    "871": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6232,
        6603
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "872": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6325,
        6329
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x0"
    },
    "874": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6341,
        6365
      ],
      "op": "DUP1",
      "path": "3"
    },
    "875": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6368,
        6379
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x1"
    },
    "877": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6368,
        6393
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x0"
    },
    "879": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6380,
        6392
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x376"
    },
    "882": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6380,
        6390
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x421"
    },
    "885": {
      "fn": "ERC20.decreaseAllowance",
      "jump": "i",
      "offset": [
        6380,
        6392
      ],
      "op": "JUMP",
      "path": "3"
    },
    "886": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6380,
        6392
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "887": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "889": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "891": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "893": {
      "op": "SHL"
    },
    "894": {
      "op": "SUB"
    },
    "895": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6368,
        6393
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "896": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6368,
        6393
      ],
      "op": "DUP2",
      "path": "3"
    },
    "897": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6368,
        6393
      ],
      "op": "AND",
      "path": "3"
    },
    "898": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6368,
        6393
      ],
      "op": "DUP3",
      "path": "3"
    },
    "899": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6368,
        6393
      ],
      "op": "MSTORE",
      "path": "3"
    },
    "900": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6368,
        6393
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x20"
    },
    "902": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6368,
        6393
      ],
      "op": "DUP1",
      "path": "3"
    },
    "903": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6368,
        6393
      ],
      "op": "DUP4",
      "path": "3"
    },
    "904": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6368,
        6393
      ],
      "op": "ADD",
      "path": "3"
    },
    "905": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6368,
        6393
      ],
      "op": "SWAP4",
      "path": "3"
    },
    "906": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6368,
        6393
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "907": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6368,
        6393
      ],
      "op": "SWAP4",
      "path": "3"
    },
    "908": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6368,
        6393
      ],
      "op": "MSTORE",
      "path": "3"
    },
    "909": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6368,
        6393
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x40"
    },
    "911": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6368,
        6393
      ],
      "op": "SWAP2",
      "path": "3"
    },
    "912": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6368,
        6393
      ],
      "op": "DUP3",
      "path": "3"
    },
    "913": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6368,
        6393
      ],
      "op": "ADD",
      "path": "3"
    },
    "914": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "916": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6368,
        6393
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "917": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6368,
        6393
      ],
      "op": "DUP2",
      "path": "3"
    },
    "918": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6368,
        6393
      ],
      "op": "KECCAK256",
      "path": "3"
    },
    "919": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6368,
        6402
      ],
      "op": "SWAP2",
      "path": "3"
    },
    "920": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6368,
        6402
      ],
      "op": "DUP9",
      "path": "3"
    },
    "921": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6368,
        6402
      ],
      "op": "AND",
      "path": "3"
    },
    "922": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6368,
        6402
      ],
      "op": "DUP2",
      "path": "3"
    },
    "923": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6368,
        6402
      ],
      "op": "MSTORE",
      "path": "3"
    },
    "924": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6368,
        6402
      ],
      "op": "SWAP3",
      "path": "3"
    },
    "925": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6368,
        6402
      ],
      "op": "MSTORE",
      "path": "3"
    },
    "926": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6368,
        6402
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "927": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6368,
        6402
      ],
      "op": "KECCAK256",
      "path": "3"
    },
    "928": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6368,
        6402
      ],
      "op": "SLOAD",
      "path": "3"
    },
    "929": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6368,
        6402
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "930": {
      "op": "POP"
    },
    "931": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6420,
        6455
      ],
      "op": "DUP3",
      "path": "3",
      "statement": 12
    },
    "932": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6420,
        6455
      ],
      "op": "DUP2",
      "path": "3"
    },
    "933": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6420,
        6455
      ],
      "op": "LT",
      "path": "3"
    },
    "934": {
      "branch": 30,
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6420,
        6455
      ],
      "op": "ISZERO",
      "path": "3"
    },
    "935": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6412,
        6497
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x3C2"
    },
    "938": {
      "branch": 30,
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6412,
        6497
      ],
      "op": "JUMPI",
      "path": "3"
    },
    "939": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6412,
        6497
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x40"
    },
    "941": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6412,
        6497
      ],
      "op": "MLOAD",
      "path": "3"
    },
    "942": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "946": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "948": {
      "op": "SHL"
    },
    "949": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6412,
        6497
      ],
      "op": "DUP2",
      "path": "3"
    },
    "950": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6412,
        6497
      ],
      "op": "MSTORE",
      "path": "3"
    },
    "951": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6412,
        6497
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x4"
    },
    "953": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6412,
        6497
      ],
      "op": "ADD",
      "path": "3"
    },
    "954": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6412,
        6497
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x2B6"
    },
    "957": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6412,
        6497
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "958": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6412,
        6497
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x8CE"
    },
    "961": {
      "fn": "ERC20.decreaseAllowance",
      "jump": "i",
      "offset": [
        6412,
        6497
      ],
      "op": "JUMP",
      "path": "3"
    },
    "962": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6412,
        6497
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "963": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6507,
        6574
      ],
      "op": "PUSH2",
      "path": "3",
      "statement": 13,
      "value": "0x3D8"
    },
    "966": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6516,
        6528
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x3CD"
    },
    "969": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6516,
        6526
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x421"
    },
    "972": {
      "fn": "ERC20.decreaseAllowance",
      "jump": "i",
      "offset": [
        6516,
        6528
      ],
      "op": "JUMP",
      "path": "3"
    },
    "973": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6516,
        6528
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "974": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6530,
        6537
      ],
      "op": "DUP6",
      "path": "3"
    },
    "975": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6539,
        6573
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x2D5"
    },
    "978": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6558,
        6573
      ],
      "op": "DUP7",
      "path": "3"
    },
    "979": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6539,
        6555
      ],
      "op": "DUP6",
      "path": "3"
    },
    "980": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6539,
        6573
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x942"
    },
    "983": {
      "fn": "ERC20.decreaseAllowance",
      "jump": "i",
      "offset": [
        6539,
        6573
      ],
      "op": "JUMP",
      "path": "3"
    },
    "984": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6507,
        6574
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "985": {
      "op": "POP"
    },
    "986": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6592,
        6596
      ],
      "op": "PUSH1",
      "path": "3",
      "statement": 14,
      "value": "0x1"
    },
    "988": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6592,
        6596
      ],
      "op": "SWAP4",
      "path": "3"
    },
    "989": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6232,
        6603
      ],
      "op": "SWAP3",
      "path": "3"
    },
    "990": {
      "op": "POP"
    },
    "991": {
      "op": "POP"
    },
    "992": {
      "op": "POP"
    },
    "993": {
      "fn": "ERC20.decreaseAllowance",
      "jump": "o",
      "offset": [
        6232,
        6603
      ],
      "op": "JUMP",
      "path": "3"
    },
    "994": {
      "fn": "ERC20.transfer",
      "offset": [
        3574,
        3746
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "995": {
      "fn": "ERC20.transfer",
      "offset": [
        3660,
        3664
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x0"
    },
    "997": {
      "fn": "ERC20.transfer",
      "offset": [
        3676,
        3718
      ],
      "op": "PUSH2",
      "path": "3",
      "statement": 15,
      "value": "0x236"
    },
    "1000": {
      "fn": "ERC20.transfer",
      "offset": [
        3686,
        3698
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x3EF"
    },
    "1003": {
      "fn": "ERC20.transfer",
      "offset": [
        3686,
        3696
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x421"
    },
    "1006": {
      "fn": "ERC20.transfer",
      "jump": "i",
      "offset": [
        3686,
        3698
      ],
      "op": "JUMP",
      "path": "3"
    },
    "1007": {
      "fn": "ERC20.transfer",
      "offset": [
        3686,
        3698
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "1008": {
      "fn": "ERC20.transfer",
      "offset": [
        3700,
        3709
      ],
      "op": "DUP5",
      "path": "3"
    },
    "1009": {
      "fn": "ERC20.transfer",
      "offset": [
        3711,
        3717
      ],
      "op": "DUP5",
      "path": "3"
    },
    "1010": {
      "fn": "ERC20.transfer",
      "offset": [
        3676,
        3685
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x4D9"
    },
    "1013": {
      "fn": "ERC20.transfer",
      "jump": "i",
      "offset": [
        3676,
        3718
      ],
      "op": "JUMP",
      "path": "3"
    },
    "1014": {
      "fn": "ERC20.allowance",
      "offset": [
        3804,
        3953
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "1015": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1017": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1019": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1021": {
      "op": "SHL"
    },
    "1022": {
      "op": "SUB"
    },
    "1023": {
      "fn": "ERC20.allowance",
      "offset": [
        3919,
        3937
      ],
      "op": "SWAP2",
      "path": "3",
      "statement": 16
    },
    "1024": {
      "fn": "ERC20.allowance",
      "offset": [
        3919,
        3937
      ],
      "op": "DUP3",
      "path": "3"
    },
    "1025": {
      "fn": "ERC20.allowance",
      "offset": [
        3919,
        3937
      ],
      "op": "AND",
      "path": "3"
    },
    "1026": {
      "fn": "ERC20.allowance",
      "offset": [
        3893,
        3900
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x0"
    },
    "1028": {
      "fn": "ERC20.allowance",
      "offset": [
        3919,
        3937
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "1029": {
      "fn": "ERC20.allowance",
      "offset": [
        3919,
        3937
      ],
      "op": "DUP2",
      "path": "3"
    },
    "1030": {
      "fn": "ERC20.allowance",
      "offset": [
        3919,
        3937
      ],
      "op": "MSTORE",
      "path": "3"
    },
    "1031": {
      "fn": "ERC20.allowance",
      "offset": [
        3919,
        3930
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x1"
    },
    "1033": {
      "fn": "ERC20.allowance",
      "offset": [
        3919,
        3937
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x20"
    },
    "1035": {
      "fn": "ERC20.allowance",
      "offset": [
        3919,
        3937
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "1036": {
      "fn": "ERC20.allowance",
      "offset": [
        3919,
        3937
      ],
      "op": "DUP2",
      "path": "3"
    },
    "1037": {
      "fn": "ERC20.allowance",
      "offset": [
        3919,
        3937
      ],
      "op": "MSTORE",
      "path": "3"
    },
    "1038": {
      "fn": "ERC20.allowance",
      "offset": [
        3919,
        3937
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x40"
    },
    "1040": {
      "fn": "ERC20.allowance",
      "offset": [
        3919,
        3937
      ],
      "op": "DUP1",
      "path": "3"
    },
    "1041": {
      "fn": "ERC20.allowance",
      "offset": [
        3919,
        3937
      ],
      "op": "DUP4",
      "path": "3"
    },
    "1042": {
      "fn": "ERC20.allowance",
      "offset": [
        3919,
        3937
      ],
      "op": "KECCAK256",
      "path": "3"
    },
    "1043": {
      "fn": "ERC20.allowance",
      "offset": [
        3919,
        3946
      ],
      "op": "SWAP4",
      "path": "3"
    },
    "1044": {
      "fn": "ERC20.allowance",
      "offset": [
        3919,
        3946
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "1045": {
      "fn": "ERC20.allowance",
      "offset": [
        3919,
        3946
      ],
      "op": "SWAP5",
      "path": "3"
    },
    "1046": {
      "fn": "ERC20.allowance",
      "offset": [
        3919,
        3946
      ],
      "op": "AND",
      "path": "3"
    },
    "1047": {
      "fn": "ERC20.allowance",
      "offset": [
        3919,
        3946
      ],
      "op": "DUP3",
      "path": "3"
    },
    "1048": {
      "fn": "ERC20.allowance",
      "offset": [
        3919,
        3946
      ],
      "op": "MSTORE",
      "path": "3"
    },
    "1049": {
      "fn": "ERC20.allowance",
      "offset": [
        3919,
        3946
      ],
      "op": "SWAP2",
      "path": "3"
    },
    "1050": {
      "fn": "ERC20.allowance",
      "offset": [
        3919,
        3946
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "1051": {
      "fn": "ERC20.allowance",
      "offset": [
        3919,
        3946
      ],
      "op": "SWAP2",
      "path": "3"
    },
    "1052": {
      "fn": "ERC20.allowance",
      "offset": [
        3919,
        3946
      ],
      "op": "MSTORE",
      "path": "3"
    },
    "1053": {
      "fn": "ERC20.allowance",
      "offset": [
        3919,
        3946
      ],
      "op": "KECCAK256",
      "path": "3"
    },
    "1054": {
      "fn": "ERC20.allowance",
      "offset": [
        3919,
        3946
      ],
      "op": "SLOAD",
      "path": "3"
    },
    "1055": {
      "fn": "ERC20.allowance",
      "offset": [
        3919,
        3946
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "1056": {
      "fn": "ERC20.allowance",
      "jump": "o",
      "offset": [
        3804,
        3953
      ],
      "op": "JUMP",
      "path": "3"
    },
    "1057": {
      "fn": "Context._msgSender",
      "offset": [
        586,
        682
      ],
      "op": "JUMPDEST",
      "path": "5"
    },
    "1058": {
      "fn": "Context._msgSender",
      "offset": [
        665,
        675
      ],
      "op": "CALLER",
      "path": "5",
      "statement": 17
    },
    "1059": {
      "fn": "Context._msgSender",
      "offset": [
        586,
        682
      ],
      "op": "SWAP1",
      "path": "5"
    },
    "1060": {
      "fn": "Context._msgSender",
      "jump": "o",
      "offset": [
        586,
        682
      ],
      "op": "JUMP",
      "path": "5"
    },
    "1061": {
      "fn": "ERC20._approve",
      "offset": [
        9496,
        9836
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "1062": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1064": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1066": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1068": {
      "op": "SHL"
    },
    "1069": {
      "op": "SUB"
    },
    "1070": {
      "fn": "ERC20._approve",
      "offset": [
        9597,
        9616
      ],
      "op": "DUP4",
      "path": "3",
      "statement": 18
    },
    "1071": {
      "branch": 31,
      "fn": "ERC20._approve",
      "offset": [
        9597,
        9616
      ],
      "op": "AND",
      "path": "3"
    },
    "1072": {
      "fn": "ERC20._approve",
      "offset": [
        9589,
        9657
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x44B"
    },
    "1075": {
      "branch": 31,
      "fn": "ERC20._approve",
      "offset": [
        9589,
        9657
      ],
      "op": "JUMPI",
      "path": "3"
    },
    "1076": {
      "fn": "ERC20._approve",
      "offset": [
        9589,
        9657
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x40"
    },
    "1078": {
      "fn": "ERC20._approve",
      "offset": [
        9589,
        9657
      ],
      "op": "MLOAD",
      "path": "3"
    },
    "1079": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "1083": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "1085": {
      "op": "SHL"
    },
    "1086": {
      "fn": "ERC20._approve",
      "offset": [
        9589,
        9657
      ],
      "op": "DUP2",
      "path": "3"
    },
    "1087": {
      "fn": "ERC20._approve",
      "offset": [
        9589,
        9657
      ],
      "op": "MSTORE",
      "path": "3"
    },
    "1088": {
      "fn": "ERC20._approve",
      "offset": [
        9589,
        9657
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x4"
    },
    "1090": {
      "fn": "ERC20._approve",
      "offset": [
        9589,
        9657
      ],
      "op": "ADD",
      "path": "3"
    },
    "1091": {
      "fn": "ERC20._approve",
      "offset": [
        9589,
        9657
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x2B6"
    },
    "1094": {
      "fn": "ERC20._approve",
      "offset": [
        9589,
        9657
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "1095": {
      "fn": "ERC20._approve",
      "offset": [
        9589,
        9657
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x88A"
    },
    "1098": {
      "fn": "ERC20._approve",
      "jump": "i",
      "offset": [
        9589,
        9657
      ],
      "op": "JUMP",
      "path": "3"
    },
    "1099": {
      "fn": "ERC20._approve",
      "offset": [
        9589,
        9657
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "1100": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1102": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1104": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1106": {
      "op": "SHL"
    },
    "1107": {
      "op": "SUB"
    },
    "1108": {
      "fn": "ERC20._approve",
      "offset": [
        9675,
        9696
      ],
      "op": "DUP3",
      "path": "3",
      "statement": 19
    },
    "1109": {
      "branch": 32,
      "fn": "ERC20._approve",
      "offset": [
        9675,
        9696
      ],
      "op": "AND",
      "path": "3"
    },
    "1110": {
      "fn": "ERC20._approve",
      "offset": [
        9667,
        9735
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x471"
    },
    "1113": {
      "branch": 32,
      "fn": "ERC20._approve",
      "offset": [
        9667,
        9735
      ],
      "op": "JUMPI",
      "path": "3"
    },
    "1114": {
      "fn": "ERC20._approve",
      "offset": [
        9667,
        9735
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x40"
    },
    "1116": {
      "fn": "ERC20._approve",
      "offset": [
        9667,
        9735
      ],
      "op": "MLOAD",
      "path": "3"
    },
    "1117": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "1121": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "1123": {
      "op": "SHL"
    },
    "1124": {
      "fn": "ERC20._approve",
      "offset": [
        9667,
        9735
      ],
      "op": "DUP2",
      "path": "3"
    },
    "1125": {
      "fn": "ERC20._approve",
      "offset": [
        9667,
        9735
      ],
      "op": "MSTORE",
      "path": "3"
    },
    "1126": {
      "fn": "ERC20._approve",
      "offset": [
        9667,
        9735
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x4"
    },
    "1128": {
      "fn": "ERC20._approve",
      "offset": [
        9667,
        9735
      ],
      "op": "ADD",
      "path": "3"
    },
    "1129": {
      "fn": "ERC20._approve",
      "offset": [
        9667,
        9735
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x2B6"
    },
    "1132": {
      "fn": "ERC20._approve",
      "offset": [
        9667,
        9735
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "1133": {
      "fn": "ERC20._approve",
      "offset": [
        9667,
        9735
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x775"
    },
    "1136": {
      "fn": "ERC20._approve",
      "jump": "i",
      "offset": [
        9667,
        9735
      ],
      "op": "JUMP",
      "path": "3"
    },
    "1137": {
      "fn": "ERC20._approve",
      "offset": [
        9667,
        9735
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "1138": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1140": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1142": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1144": {
      "op": "SHL"
    },
    "1145": {
      "op": "SUB"
    },
    "1146": {
      "fn": "ERC20._approve",
      "offset": [
        9746,
        9764
      ],
      "op": "DUP1",
      "path": "3",
      "statement": 20
    },
    "1147": {
      "fn": "ERC20._approve",
      "offset": [
        9746,
        9764
      ],
      "op": "DUP5",
      "path": "3"
    },
    "1148": {
      "fn": "ERC20._approve",
      "offset": [
        9746,
        9764
      ],
      "op": "AND",
      "path": "3"
    },
    "1149": {
      "fn": "ERC20._approve",
      "offset": [
        9746,
        9764
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x0"
    },
    "1151": {
      "fn": "ERC20._approve",
      "offset": [
        9746,
        9764
      ],
      "op": "DUP2",
      "path": "3"
    },
    "1152": {
      "fn": "ERC20._approve",
      "offset": [
        9746,
        9764
      ],
      "op": "DUP2",
      "path": "3"
    },
    "1153": {
      "fn": "ERC20._approve",
      "offset": [
        9746,
        9764
      ],
      "op": "MSTORE",
      "path": "3"
    },
    "1154": {
      "fn": "ERC20._approve",
      "offset": [
        9746,
        9757
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x1"
    },
    "1156": {
      "fn": "ERC20._approve",
      "offset": [
        9746,
        9764
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x20"
    },
    "1158": {
      "fn": "ERC20._approve",
      "offset": [
        9746,
        9764
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "1159": {
      "fn": "ERC20._approve",
      "offset": [
        9746,
        9764
      ],
      "op": "DUP2",
      "path": "3"
    },
    "1160": {
      "fn": "ERC20._approve",
      "offset": [
        9746,
        9764
      ],
      "op": "MSTORE",
      "path": "3"
    },
    "1161": {
      "fn": "ERC20._approve",
      "offset": [
        9746,
        9764
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x40"
    },
    "1163": {
      "fn": "ERC20._approve",
      "offset": [
        9746,
        9764
      ],
      "op": "DUP1",
      "path": "3"
    },
    "1164": {
      "fn": "ERC20._approve",
      "offset": [
        9746,
        9764
      ],
      "op": "DUP4",
      "path": "3"
    },
    "1165": {
      "fn": "ERC20._approve",
      "offset": [
        9746,
        9764
      ],
      "op": "KECCAK256",
      "path": "3"
    },
    "1166": {
      "fn": "ERC20._approve",
      "offset": [
        9746,
        9773
      ],
      "op": "SWAP5",
      "path": "3"
    },
    "1167": {
      "fn": "ERC20._approve",
      "offset": [
        9746,
        9773
      ],
      "op": "DUP8",
      "path": "3"
    },
    "1168": {
      "fn": "ERC20._approve",
      "offset": [
        9746,
        9773
      ],
      "op": "AND",
      "path": "3"
    },
    "1169": {
      "fn": "ERC20._approve",
      "offset": [
        9746,
        9773
      ],
      "op": "DUP1",
      "path": "3"
    },
    "1170": {
      "fn": "ERC20._approve",
      "offset": [
        9746,
        9773
      ],
      "op": "DUP5",
      "path": "3"
    },
    "1171": {
      "fn": "ERC20._approve",
      "offset": [
        9746,
        9773
      ],
      "op": "MSTORE",
      "path": "3"
    },
    "1172": {
      "fn": "ERC20._approve",
      "offset": [
        9746,
        9773
      ],
      "op": "SWAP5",
      "path": "3"
    },
    "1173": {
      "fn": "ERC20._approve",
      "offset": [
        9746,
        9773
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "1174": {
      "fn": "ERC20._approve",
      "offset": [
        9746,
        9773
      ],
      "op": "SWAP2",
      "path": "3"
    },
    "1175": {
      "fn": "ERC20._approve",
      "offset": [
        9746,
        9773
      ],
      "op": "MSTORE",
      "path": "3"
    },
    "1176": {
      "fn": "ERC20._approve",
      "offset": [
        9746,
        9773
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "1177": {
      "fn": "ERC20._approve",
      "offset": [
        9746,
        9773
      ],
      "op": "DUP2",
      "path": "3"
    },
    "1178": {
      "fn": "ERC20._approve",
      "offset": [
        9746,
        9773
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "1179": {
      "fn": "ERC20._approve",
      "offset": [
        9746,
        9773
      ],
      "op": "KECCAK256",
      "path": "3"
    },
    "1180": {
      "fn": "ERC20._approve",
      "offset": [
        9746,
        9782
      ],
      "op": "DUP5",
      "path": "3"
    },
    "1181": {
      "fn": "ERC20._approve",
      "offset": [
        9746,
        9782
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "1182": {
      "fn": "ERC20._approve",
      "offset": [
        9746,
        9782
      ],
      "op": "SSTORE",
      "path": "3"
    },
    "1183": {
      "fn": "ERC20._approve",
      "offset": [
        9797,
        9829
      ],
      "op": "MLOAD",
      "path": "3",
      "statement": 21
    },
    "1184": {
      "fn": "ERC20._approve",
      "offset": [
        9797,
        9829
      ],
      "op": "PUSH32",
      "path": "3",
      "value": "0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925"
    },
    "1217": {
      "fn": "ERC20._approve",
      "offset": [
        9797,
        9829
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "1218": {
      "fn": "ERC20._approve",
      "offset": [
        9797,
        9829
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x4CC"
    },
    "1221": {
      "fn": "ERC20._approve",
      "offset": [
        9797,
        9829
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "1222": {
      "fn": "ERC20._approve",
      "offset": [
        9776,
        9782
      ],
      "op": "DUP6",
      "path": "3"
    },
    "1223": {
      "fn": "ERC20._approve",
      "offset": [
        9776,
        9782
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "1224": {
      "fn": "ERC20._approve",
      "offset": [
        9797,
        9829
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x913"
    },
    "1227": {
      "fn": "ERC20._approve",
      "jump": "i",
      "offset": [
        9797,
        9829
      ],
      "op": "JUMP",
      "path": "3"
    },
    "1228": {
      "fn": "ERC20._approve",
      "offset": [
        9797,
        9829
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "1229": {
      "fn": "ERC20._approve",
      "offset": [
        9797,
        9829
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x40"
    },
    "1231": {
      "fn": "ERC20._approve",
      "offset": [
        9797,
        9829
      ],
      "op": "MLOAD",
      "path": "3"
    },
    "1232": {
      "fn": "ERC20._approve",
      "offset": [
        9797,
        9829
      ],
      "op": "DUP1",
      "path": "3"
    },
    "1233": {
      "fn": "ERC20._approve",
      "offset": [
        9797,
        9829
      ],
      "op": "SWAP2",
      "path": "3"
    },
    "1234": {
      "fn": "ERC20._approve",
      "offset": [
        9797,
        9829
      ],
      "op": "SUB",
      "path": "3"
    },
    "1235": {
      "fn": "ERC20._approve",
      "offset": [
        9797,
        9829
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "1236": {
      "fn": "ERC20._approve",
      "offset": [
        9797,
        9829
      ],
      "op": "LOG3",
      "path": "3"
    },
    "1237": {
      "fn": "ERC20._approve",
      "offset": [
        9496,
        9836
      ],
      "op": "POP",
      "path": "3"
    },
    "1238": {
      "fn": "ERC20._approve",
      "offset": [
        9496,
        9836
      ],
      "op": "POP",
      "path": "3"
    },
    "1239": {
      "fn": "ERC20._approve",
      "offset": [
        9496,
        9836
      ],
      "op": "POP",
      "path": "3"
    },
    "1240": {
      "fn": "ERC20._approve",
      "jump": "o",
      "offset": [
        9496,
        9836
      ],
      "op": "JUMP",
      "path": "3"
    },
    "1241": {
      "fn": "ERC20._transfer",
      "offset": [
        7077,
        7669
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "1242": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1244": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1246": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1248": {
      "op": "SHL"
    },
    "1249": {
      "op": "SUB"
    },
    "1250": {
      "fn": "ERC20._transfer",
      "offset": [
        7182,
        7202
      ],
      "op": "DUP4",
      "path": "3",
      "statement": 22
    },
    "1251": {
      "branch": 33,
      "fn": "ERC20._transfer",
      "offset": [
        7182,
        7202
      ],
      "op": "AND",
      "path": "3"
    },
    "1252": {
      "fn": "ERC20._transfer",
      "offset": [
        7174,
        7244
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x4FF"
    },
    "1255": {
      "branch": 33,
      "fn": "ERC20._transfer",
      "offset": [
        7174,
        7244
      ],
      "op": "JUMPI",
      "path": "3"
    },
    "1256": {
      "fn": "ERC20._transfer",
      "offset": [
        7174,
        7244
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x40"
    },
    "1258": {
      "fn": "ERC20._transfer",
      "offset": [
        7174,
        7244
      ],
      "op": "MLOAD",
      "path": "3"
    },
    "1259": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "1263": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "1265": {
      "op": "SHL"
    },
    "1266": {
      "fn": "ERC20._transfer",
      "offset": [
        7174,
        7244
      ],
      "op": "DUP2",
      "path": "3"
    },
    "1267": {
      "fn": "ERC20._transfer",
      "offset": [
        7174,
        7244
      ],
      "op": "MSTORE",
      "path": "3"
    },
    "1268": {
      "fn": "ERC20._transfer",
      "offset": [
        7174,
        7244
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x4"
    },
    "1270": {
      "fn": "ERC20._transfer",
      "offset": [
        7174,
        7244
      ],
      "op": "ADD",
      "path": "3"
    },
    "1271": {
      "fn": "ERC20._transfer",
      "offset": [
        7174,
        7244
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x2B6"
    },
    "1274": {
      "fn": "ERC20._transfer",
      "offset": [
        7174,
        7244
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "1275": {
      "fn": "ERC20._transfer",
      "offset": [
        7174,
        7244
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x845"
    },
    "1278": {
      "fn": "ERC20._transfer",
      "jump": "i",
      "offset": [
        7174,
        7244
      ],
      "op": "JUMP",
      "path": "3"
    },
    "1279": {
      "fn": "ERC20._transfer",
      "offset": [
        7174,
        7244
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "1280": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1282": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1284": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1286": {
      "op": "SHL"
    },
    "1287": {
      "op": "SUB"
    },
    "1288": {
      "fn": "ERC20._transfer",
      "offset": [
        7262,
        7285
      ],
      "op": "DUP3",
      "path": "3",
      "statement": 23
    },
    "1289": {
      "branch": 34,
      "fn": "ERC20._transfer",
      "offset": [
        7262,
        7285
      ],
      "op": "AND",
      "path": "3"
    },
    "1290": {
      "fn": "ERC20._transfer",
      "offset": [
        7254,
        7325
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x525"
    },
    "1293": {
      "branch": 34,
      "fn": "ERC20._transfer",
      "offset": [
        7254,
        7325
      ],
      "op": "JUMPI",
      "path": "3"
    },
    "1294": {
      "fn": "ERC20._transfer",
      "offset": [
        7254,
        7325
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x40"
    },
    "1296": {
      "fn": "ERC20._transfer",
      "offset": [
        7254,
        7325
      ],
      "op": "MLOAD",
      "path": "3"
    },
    "1297": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "1301": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "1303": {
      "op": "SHL"
    },
    "1304": {
      "fn": "ERC20._transfer",
      "offset": [
        7254,
        7325
      ],
      "op": "DUP2",
      "path": "3"
    },
    "1305": {
      "fn": "ERC20._transfer",
      "offset": [
        7254,
        7325
      ],
      "op": "MSTORE",
      "path": "3"
    },
    "1306": {
      "fn": "ERC20._transfer",
      "offset": [
        7254,
        7325
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x4"
    },
    "1308": {
      "fn": "ERC20._transfer",
      "offset": [
        7254,
        7325
      ],
      "op": "ADD",
      "path": "3"
    },
    "1309": {
      "fn": "ERC20._transfer",
      "offset": [
        7254,
        7325
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x2B6"
    },
    "1312": {
      "fn": "ERC20._transfer",
      "offset": [
        7254,
        7325
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "1313": {
      "fn": "ERC20._transfer",
      "offset": [
        7254,
        7325
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x732"
    },
    "1316": {
      "fn": "ERC20._transfer",
      "jump": "i",
      "offset": [
        7254,
        7325
      ],
      "op": "JUMP",
      "path": "3"
    },
    "1317": {
      "fn": "ERC20._transfer",
      "offset": [
        7254,
        7325
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "1318": {
      "fn": "ERC20._transfer",
      "offset": [
        7336,
        7383
      ],
      "op": "PUSH2",
      "path": "3",
      "statement": 24,
      "value": "0x530"
    },
    "1321": {
      "fn": "ERC20._transfer",
      "offset": [
        7357,
        7363
      ],
      "op": "DUP4",
      "path": "3"
    },
    "1322": {
      "fn": "ERC20._transfer",
      "offset": [
        7365,
        7374
      ],
      "op": "DUP4",
      "path": "3"
    },
    "1323": {
      "fn": "ERC20._transfer",
      "offset": [
        7376,
        7382
      ],
      "op": "DUP4",
      "path": "3"
    },
    "1324": {
      "fn": "ERC20._transfer",
      "offset": [
        7336,
        7356
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x601"
    },
    "1327": {
      "fn": "ERC20._transfer",
      "jump": "i",
      "offset": [
        7336,
        7383
      ],
      "op": "JUMP",
      "path": "3"
    },
    "1328": {
      "fn": "ERC20._transfer",
      "offset": [
        7336,
        7383
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "1329": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1331": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1333": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1335": {
      "op": "SHL"
    },
    "1336": {
      "op": "SUB"
    },
    "1337": {
      "fn": "ERC20._transfer",
      "offset": [
        7418,
        7435
      ],
      "op": "DUP4",
      "path": "3"
    },
    "1338": {
      "fn": "ERC20._transfer",
      "offset": [
        7418,
        7435
      ],
      "op": "AND",
      "path": "3"
    },
    "1339": {
      "fn": "ERC20._transfer",
      "offset": [
        7394,
        7415
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x0"
    },
    "1341": {
      "fn": "ERC20._transfer",
      "offset": [
        7418,
        7435
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "1342": {
      "fn": "ERC20._transfer",
      "offset": [
        7418,
        7435
      ],
      "op": "DUP2",
      "path": "3"
    },
    "1343": {
      "fn": "ERC20._transfer",
      "offset": [
        7418,
        7435
      ],
      "op": "MSTORE",
      "path": "3"
    },
    "1344": {
      "fn": "ERC20._transfer",
      "offset": [
        7418,
        7435
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x20"
    },
    "1346": {
      "fn": "ERC20._transfer",
      "offset": [
        7418,
        7435
      ],
      "op": "DUP2",
      "path": "3"
    },
    "1347": {
      "fn": "ERC20._transfer",
      "offset": [
        7418,
        7435
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "1348": {
      "fn": "ERC20._transfer",
      "offset": [
        7418,
        7435
      ],
      "op": "MSTORE",
      "path": "3"
    },
    "1349": {
      "fn": "ERC20._transfer",
      "offset": [
        7418,
        7435
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x40"
    },
    "1351": {
      "fn": "ERC20._transfer",
      "offset": [
        7418,
        7435
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "1352": {
      "fn": "ERC20._transfer",
      "offset": [
        7418,
        7435
      ],
      "op": "KECCAK256",
      "path": "3"
    },
    "1353": {
      "fn": "ERC20._transfer",
      "offset": [
        7418,
        7435
      ],
      "op": "SLOAD",
      "path": "3"
    },
    "1354": {
      "fn": "ERC20._transfer",
      "offset": [
        7453,
        7476
      ],
      "op": "DUP2",
      "path": "3",
      "statement": 25
    },
    "1355": {
      "fn": "ERC20._transfer",
      "offset": [
        7453,
        7476
      ],
      "op": "DUP2",
      "path": "3"
    },
    "1356": {
      "fn": "ERC20._transfer",
      "offset": [
        7453,
        7476
      ],
      "op": "LT",
      "path": "3"
    },
    "1357": {
      "branch": 35,
      "fn": "ERC20._transfer",
      "offset": [
        7453,
        7476
      ],
      "op": "ISZERO",
      "path": "3"
    },
    "1358": {
      "fn": "ERC20._transfer",
      "offset": [
        7445,
        7519
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x569"
    },
    "1361": {
      "branch": 35,
      "fn": "ERC20._transfer",
      "offset": [
        7445,
        7519
      ],
      "op": "JUMPI",
      "path": "3"
    },
    "1362": {
      "fn": "ERC20._transfer",
      "offset": [
        7445,
        7519
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x40"
    },
    "1364": {
      "fn": "ERC20._transfer",
      "offset": [
        7445,
        7519
      ],
      "op": "MLOAD",
      "path": "3"
    },
    "1365": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "1369": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "1371": {
      "op": "SHL"
    },
    "1372": {
      "fn": "ERC20._transfer",
      "offset": [
        7445,
        7519
      ],
      "op": "DUP2",
      "path": "3"
    },
    "1373": {
      "fn": "ERC20._transfer",
      "offset": [
        7445,
        7519
      ],
      "op": "MSTORE",
      "path": "3"
    },
    "1374": {
      "fn": "ERC20._transfer",
      "offset": [
        7445,
        7519
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x4"
    },
    "1376": {
      "fn": "ERC20._transfer",
      "offset": [
        7445,
        7519
      ],
      "op": "ADD",
      "path": "3"
    },
    "1377": {
      "fn": "ERC20._transfer",
      "offset": [
        7445,
        7519
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x2B6"
    },
    "1380": {
      "fn": "ERC20._transfer",
      "offset": [
        7445,
        7519
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "1381": {
      "fn": "ERC20._transfer",
      "offset": [
        7445,
        7519
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x7B7"
    },
    "1384": {
      "fn": "ERC20._transfer",
      "jump": "i",
      "offset": [
        7445,
        7519
      ],
      "op": "JUMP",
      "path": "3"
    },
    "1385": {
      "fn": "ERC20._transfer",
      "offset": [
        7445,
        7519
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "1386": {
      "fn": "ERC20._transfer",
      "offset": [
        7549,
        7571
      ],
      "op": "PUSH2",
      "path": "3",
      "statement": 26,
      "value": "0x573"
    },
    "1389": {
      "fn": "ERC20._transfer",
      "offset": [
        7565,
        7571
      ],
      "op": "DUP3",
      "path": "3"
    },
    "1390": {
      "fn": "ERC20._transfer",
      "offset": [
        7549,
        7562
      ],
      "op": "DUP3",
      "path": "3"
    },
    "1391": {
      "fn": "ERC20._transfer",
      "offset": [
        7549,
        7571
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x942"
    },
    "1394": {
      "fn": "ERC20._transfer",
      "jump": "i",
      "offset": [
        7549,
        7571
      ],
      "op": "JUMP",
      "path": "3"
    },
    "1395": {
      "fn": "ERC20._transfer",
      "offset": [
        7549,
        7571
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "1396": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1398": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1400": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1402": {
      "op": "SHL"
    },
    "1403": {
      "op": "SUB"
    },
    "1404": {
      "fn": "ERC20._transfer",
      "offset": [
        7529,
        7546
      ],
      "op": "DUP1",
      "path": "3"
    },
    "1405": {
      "fn": "ERC20._transfer",
      "offset": [
        7529,
        7546
      ],
      "op": "DUP7",
      "path": "3"
    },
    "1406": {
      "fn": "ERC20._transfer",
      "offset": [
        7529,
        7546
      ],
      "op": "AND",
      "path": "3"
    },
    "1407": {
      "fn": "ERC20._transfer",
      "offset": [
        7529,
        7538
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x0"
    },
    "1409": {
      "fn": "ERC20._transfer",
      "offset": [
        7529,
        7546
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "1410": {
      "fn": "ERC20._transfer",
      "offset": [
        7529,
        7546
      ],
      "op": "DUP2",
      "path": "3"
    },
    "1411": {
      "fn": "ERC20._transfer",
      "offset": [
        7529,
        7546
      ],
      "op": "MSTORE",
      "path": "3"
    },
    "1412": {
      "fn": "ERC20._transfer",
      "offset": [
        7529,
        7546
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x20"
    },
    "1414": {
      "fn": "ERC20._transfer",
      "offset": [
        7529,
        7546
      ],
      "op": "DUP2",
      "path": "3"
    },
    "1415": {
      "fn": "ERC20._transfer",
      "offset": [
        7529,
        7546
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "1416": {
      "fn": "ERC20._transfer",
      "offset": [
        7529,
        7546
      ],
      "op": "MSTORE",
      "path": "3"
    },
    "1417": {
      "fn": "ERC20._transfer",
      "offset": [
        7529,
        7546
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x40"
    },
    "1419": {
      "fn": "ERC20._transfer",
      "offset": [
        7529,
        7546
      ],
      "op": "DUP1",
      "path": "3"
    },
    "1420": {
      "fn": "ERC20._transfer",
      "offset": [
        7529,
        7546
      ],
      "op": "DUP3",
      "path": "3"
    },
    "1421": {
      "fn": "ERC20._transfer",
      "offset": [
        7529,
        7546
      ],
      "op": "KECCAK256",
      "path": "3"
    },
    "1422": {
      "fn": "ERC20._transfer",
      "offset": [
        7529,
        7571
      ],
      "op": "SWAP4",
      "path": "3"
    },
    "1423": {
      "fn": "ERC20._transfer",
      "offset": [
        7529,
        7571
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "1424": {
      "fn": "ERC20._transfer",
      "offset": [
        7529,
        7571
      ],
      "op": "SWAP4",
      "path": "3"
    },
    "1425": {
      "fn": "ERC20._transfer",
      "offset": [
        7529,
        7571
      ],
      "op": "SSTORE",
      "path": "3"
    },
    "1426": {
      "fn": "ERC20._transfer",
      "offset": [
        7581,
        7601
      ],
      "op": "SWAP1",
      "path": "3",
      "statement": 27
    },
    "1427": {
      "fn": "ERC20._transfer",
      "offset": [
        7581,
        7601
      ],
      "op": "DUP6",
      "path": "3"
    },
    "1428": {
      "fn": "ERC20._transfer",
      "offset": [
        7581,
        7601
      ],
      "op": "AND",
      "path": "3"
    },
    "1429": {
      "fn": "ERC20._transfer",
      "offset": [
        7581,
        7601
      ],
      "op": "DUP2",
      "path": "3"
    },
    "1430": {
      "fn": "ERC20._transfer",
      "offset": [
        7581,
        7601
      ],
      "op": "MSTORE",
      "path": "3"
    },
    "1431": {
      "fn": "ERC20._transfer",
      "offset": [
        7581,
        7601
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "1432": {
      "fn": "ERC20._transfer",
      "offset": [
        7581,
        7601
      ],
      "op": "DUP2",
      "path": "3"
    },
    "1433": {
      "fn": "ERC20._transfer",
      "offset": [
        7581,
        7601
      ],
      "op": "KECCAK256",
      "path": "3"
    },
    "1434": {
      "fn": "ERC20._transfer",
      "offset": [
        7581,
        7611
      ],
      "op": "DUP1",
      "path": "3"
    },
    "1435": {
      "fn": "ERC20._transfer",
      "offset": [
        7581,
        7611
      ],
      "op": "SLOAD",
      "path": "3"
    },
    "1436": {
      "fn": "ERC20._transfer",
      "offset": [
        7605,
        7611
      ],
      "op": "DUP5",
      "path": "3"
    },
    "1437": {
      "fn": "ERC20._transfer",
      "offset": [
        7605,
        7611
      ],
      "op": "SWAP3",
      "path": "3"
    },
    "1438": {
      "fn": "ERC20._transfer",
      "offset": [
        7529,
        7538
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "1439": {
      "fn": "ERC20._transfer",
      "offset": [
        7581,
        7611
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x5A9"
    },
    "1442": {
      "fn": "ERC20._transfer",
      "offset": [
        7581,
        7611
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "1443": {
      "fn": "ERC20._transfer",
      "offset": [
        7605,
        7611
      ],
      "op": "DUP5",
      "path": "3"
    },
    "1444": {
      "fn": "ERC20._transfer",
      "offset": [
        7605,
        7611
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "1445": {
      "fn": "ERC20._transfer",
      "offset": [
        7581,
        7611
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x92A"
    },
    "1448": {
      "fn": "ERC20._transfer",
      "jump": "i",
      "offset": [
        7581,
        7611
      ],
      "op": "JUMP",
      "path": "3"
    },
    "1449": {
      "fn": "ERC20._transfer",
      "offset": [
        7581,
        7611
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "1450": {
      "fn": "ERC20._transfer",
      "offset": [
        7581,
        7611
      ],
      "op": "SWAP3",
      "path": "3"
    },
    "1451": {
      "fn": "ERC20._transfer",
      "offset": [
        7581,
        7611
      ],
      "op": "POP",
      "path": "3"
    },
    "1452": {
      "fn": "ERC20._transfer",
      "offset": [
        7581,
        7611
      ],
      "op": "POP",
      "path": "3"
    },
    "1453": {
      "fn": "ERC20._transfer",
      "offset": [
        7581,
        7611
      ],
      "op": "DUP2",
      "path": "3"
    },
    "1454": {
      "fn": "ERC20._transfer",
      "offset": [
        7581,
        7611
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "1455": {
      "fn": "ERC20._transfer",
      "offset": [
        7581,
        7611
      ],
      "op": "SSTORE",
      "path": "3"
    },
    "1456": {
      "fn": "ERC20._transfer",
      "offset": [
        7581,
        7611
      ],
      "op": "POP",
      "path": "3"
    },
    "1457": {
      "fn": "ERC20._transfer",
      "offset": [
        7644,
        7653
      ],
      "op": "DUP3",
      "path": "3",
      "statement": 28
    },
    "1458": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1460": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1462": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1464": {
      "op": "SHL"
    },
    "1465": {
      "op": "SUB"
    },
    "1466": {
      "fn": "ERC20._transfer",
      "offset": [
        7627,
        7662
      ],
      "op": "AND",
      "path": "3"
    },
    "1467": {
      "fn": "ERC20._transfer",
      "offset": [
        7636,
        7642
      ],
      "op": "DUP5",
      "path": "3"
    },
    "1468": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1470": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1472": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1474": {
      "op": "SHL"
    },
    "1475": {
      "op": "SUB"
    },
    "1476": {
      "fn": "ERC20._transfer",
      "offset": [
        7627,
        7662
      ],
      "op": "AND",
      "path": "3"
    },
    "1477": {
      "fn": "ERC20._transfer",
      "offset": [
        7627,
        7662
      ],
      "op": "PUSH32",
      "path": "3",
      "value": "0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF"
    },
    "1510": {
      "fn": "ERC20._transfer",
      "offset": [
        7655,
        7661
      ],
      "op": "DUP5",
      "path": "3"
    },
    "1511": {
      "fn": "ERC20._transfer",
      "offset": [
        7627,
        7662
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x40"
    },
    "1513": {
      "fn": "ERC20._transfer",
      "offset": [
        7627,
        7662
      ],
      "op": "MLOAD",
      "path": "3"
    },
    "1514": {
      "fn": "ERC20._transfer",
      "offset": [
        7627,
        7662
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x5F3"
    },
    "1517": {
      "fn": "ERC20._transfer",
      "offset": [
        7627,
        7662
      ],
      "op": "SWAP2",
      "path": "3"
    },
    "1518": {
      "fn": "ERC20._transfer",
      "offset": [
        7627,
        7662
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "1519": {
      "fn": "ERC20._transfer",
      "offset": [
        7627,
        7662
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x913"
    },
    "1522": {
      "fn": "ERC20._transfer",
      "jump": "i",
      "offset": [
        7627,
        7662
      ],
      "op": "JUMP",
      "path": "3"
    },
    "1523": {
      "fn": "ERC20._transfer",
      "offset": [
        7627,
        7662
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "1524": {
      "fn": "ERC20._transfer",
      "offset": [
        7627,
        7662
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x40"
    },
    "1526": {
      "fn": "ERC20._transfer",
      "offset": [
        7627,
        7662
      ],
      "op": "MLOAD",
      "path": "3"
    },
    "1527": {
      "fn": "ERC20._transfer",
      "offset": [
        7627,
        7662
      ],
      "op": "DUP1",
      "path": "3"
    },
    "1528": {
      "fn": "ERC20._transfer",
      "offset": [
        7627,
        7662
      ],
      "op": "SWAP2",
      "path": "3"
    },
    "1529": {
      "fn": "ERC20._transfer",
      "offset": [
        7627,
        7662
      ],
      "op": "SUB",
      "path": "3"
    },
    "1530": {
      "fn": "ERC20._transfer",
      "offset": [
        7627,
        7662
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "1531": {
      "fn": "ERC20._transfer",
      "offset": [
        7627,
        7662
      ],
      "op": "LOG3",
      "path": "3"
    },
    "1532": {
      "fn": "ERC20._transfer",
      "offset": [
        7077,
        7669
      ],
      "op": "POP",
      "path": "3"
    },
    "1533": {
      "fn": "ERC20._transfer",
      "offset": [
        7077,
        7669
      ],
      "op": "POP",
      "path": "3"
    },
    "1534": {
      "fn": "ERC20._transfer",
      "offset": [
        7077,
        7669
      ],
      "op": "POP",
      "path": "3"
    },
    "1535": {
      "fn": "ERC20._transfer",
      "offset": [
        7077,
        7669
      ],
      "op": "POP",
      "path": "3"
    },
    "1536": {
      "fn": "ERC20._transfer",
      "jump": "o",
      "offset": [
        7077,
        7669
      ],
      "op": "JUMP",
      "path": "3"
    },
    "1537": {
      "fn": "ERC20._beforeTokenTransfer",
      "offset": [
        10423,
        10515
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "1538": {
      "fn": "ERC20._beforeTokenTransfer",
      "offset": [
        10423,
        10515
      ],
      "op": "POP",
      "path": "3"
    },
    "1539": {
      "fn": "ERC20._beforeTokenTransfer",
      "offset": [
        10423,
        10515
      ],
      "op": "POP",
      "path": "3"
    },
    "1540": {
      "fn": "ERC20._beforeTokenTransfer",
      "offset": [
        10423,
        10515
      ],
      "op": "POP",
      "path": "3"
    },
    "1541": {
      "fn": "ERC20._beforeTokenTransfer",
      "jump": "o",
      "offset": [
        10423,
        10515
      ],
      "op": "JUMP",
      "path": "3"
    },
    "1542": {
      "op": "JUMPDEST"
    },
    "1543": {
      "op": "DUP1"
    },
    "1544": {
      "op": "CALLDATALOAD"
    },
    "1545": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1547": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1549": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1551": {
      "op": "SHL"
    },
    "1552": {
      "op": "SUB"
    },
    "1553": {
      "op": "DUP2"
    },
    "1554": {
      "op": "AND"
    },
    "1555": {
      "op": "DUP2"
    },
    "1556": {
      "op": "EQ"
    },
    "1557": {
      "op": "PUSH2",
      "value": "0x353"
    },
    "1560": {
      "op": "JUMPI"
    },
    "1561": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1563": {
      "op": "DUP1"
    },
    "1564": {
      "op": "REVERT"
    },
    "1565": {
      "op": "JUMPDEST"
    },
    "1566": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1568": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1570": {
      "op": "DUP3"
    },
    "1571": {
      "op": "DUP5"
    },
    "1572": {
      "op": "SUB"
    },
    "1573": {
      "op": "SLT"
    },
    "1574": {
      "op": "ISZERO"
    },
    "1575": {
      "op": "PUSH2",
      "value": "0x62E"
    },
    "1578": {
      "op": "JUMPI"
    },
    "1579": {
      "op": "DUP1"
    },
    "1580": {
      "op": "DUP2"
    },
    "1581": {
      "op": "REVERT"
    },
    "1582": {
      "op": "JUMPDEST"
    },
    "1583": {
      "op": "PUSH2",
      "value": "0x637"
    },
    "1586": {
      "op": "DUP3"
    },
    "1587": {
      "op": "PUSH2",
      "value": "0x606"
    },
    "1590": {
      "jump": "i",
      "op": "JUMP"
    },
    "1591": {
      "op": "JUMPDEST"
    },
    "1592": {
      "op": "SWAP4"
    },
    "1593": {
      "op": "SWAP3"
    },
    "1594": {
      "op": "POP"
    },
    "1595": {
      "op": "POP"
    },
    "1596": {
      "op": "POP"
    },
    "1597": {
      "jump": "o",
      "op": "JUMP"
    },
    "1598": {
      "op": "JUMPDEST"
    },
    "1599": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1601": {
      "op": "DUP1"
    },
    "1602": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "1604": {
      "op": "DUP4"
    },
    "1605": {
      "op": "DUP6"
    },
    "1606": {
      "op": "SUB"
    },
    "1607": {
      "op": "SLT"
    },
    "1608": {
      "op": "ISZERO"
    },
    "1609": {
      "op": "PUSH2",
      "value": "0x650"
    },
    "1612": {
      "op": "JUMPI"
    },
    "1613": {
      "op": "DUP1"
    },
    "1614": {
      "op": "DUP2"
    },
    "1615": {
      "op": "REVERT"
    },
    "1616": {
      "op": "JUMPDEST"
    },
    "1617": {
      "op": "PUSH2",
      "value": "0x659"
    },
    "1620": {
      "op": "DUP4"
    },
    "1621": {
      "op": "PUSH2",
      "value": "0x606"
    },
    "1624": {
      "jump": "i",
      "op": "JUMP"
    },
    "1625": {
      "op": "JUMPDEST"
    },
    "1626": {
      "op": "SWAP2"
    },
    "1627": {
      "op": "POP"
    },
    "1628": {
      "op": "PUSH2",
      "value": "0x667"
    },
    "1631": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1633": {
      "op": "DUP5"
    },
    "1634": {
      "op": "ADD"
    },
    "1635": {
      "op": "PUSH2",
      "value": "0x606"
    },
    "1638": {
      "jump": "i",
      "op": "JUMP"
    },
    "1639": {
      "op": "JUMPDEST"
    },
    "1640": {
      "op": "SWAP1"
    },
    "1641": {
      "op": "POP"
    },
    "1642": {
      "op": "SWAP3"
    },
    "1643": {
      "op": "POP"
    },
    "1644": {
      "op": "SWAP3"
    },
    "1645": {
      "op": "SWAP1"
    },
    "1646": {
      "op": "POP"
    },
    "1647": {
      "jump": "o",
      "op": "JUMP"
    },
    "1648": {
      "op": "JUMPDEST"
    },
    "1649": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1651": {
      "op": "DUP1"
    },
    "1652": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1654": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "1656": {
      "op": "DUP5"
    },
    "1657": {
      "op": "DUP7"
    },
    "1658": {
      "op": "SUB"
    },
    "1659": {
      "op": "SLT"
    },
    "1660": {
      "op": "ISZERO"
    },
    "1661": {
      "op": "PUSH2",
      "value": "0x684"
    },
    "1664": {
      "op": "JUMPI"
    },
    "1665": {
      "op": "DUP1"
    },
    "1666": {
      "op": "DUP2"
    },
    "1667": {
      "op": "REVERT"
    },
    "1668": {
      "op": "JUMPDEST"
    },
    "1669": {
      "op": "PUSH2",
      "value": "0x68D"
    },
    "1672": {
      "op": "DUP5"
    },
    "1673": {
      "op": "PUSH2",
      "value": "0x606"
    },
    "1676": {
      "jump": "i",
      "op": "JUMP"
    },
    "1677": {
      "op": "JUMPDEST"
    },
    "1678": {
      "op": "SWAP3"
    },
    "1679": {
      "op": "POP"
    },
    "1680": {
      "op": "PUSH2",
      "value": "0x69B"
    },
    "1683": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1685": {
      "op": "DUP6"
    },
    "1686": {
      "op": "ADD"
    },
    "1687": {
      "op": "PUSH2",
      "value": "0x606"
    },
    "1690": {
      "jump": "i",
      "op": "JUMP"
    },
    "1691": {
      "op": "JUMPDEST"
    },
    "1692": {
      "op": "SWAP2"
    },
    "1693": {
      "op": "POP"
    },
    "1694": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "1696": {
      "op": "DUP5"
    },
    "1697": {
      "op": "ADD"
    },
    "1698": {
      "op": "CALLDATALOAD"
    },
    "1699": {
      "op": "SWAP1"
    },
    "1700": {
      "op": "POP"
    },
    "1701": {
      "op": "SWAP3"
    },
    "1702": {
      "op": "POP"
    },
    "1703": {
      "op": "SWAP3"
    },
    "1704": {
      "op": "POP"
    },
    "1705": {
      "op": "SWAP3"
    },
    "1706": {
      "jump": "o",
      "op": "JUMP"
    },
    "1707": {
      "op": "JUMPDEST"
    },
    "1708": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1710": {
      "op": "DUP1"
    },
    "1711": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "1713": {
      "op": "DUP4"
    },
    "1714": {
      "op": "DUP6"
    },
    "1715": {
      "op": "SUB"
    },
    "1716": {
      "op": "SLT"
    },
    "1717": {
      "op": "ISZERO"
    },
    "1718": {
      "op": "PUSH2",
      "value": "0x6BD"
    },
    "1721": {
      "op": "JUMPI"
    },
    "1722": {
      "op": "DUP2"
    },
    "1723": {
      "op": "DUP3"
    },
    "1724": {
      "op": "REVERT"
    },
    "1725": {
      "op": "JUMPDEST"
    },
    "1726": {
      "op": "PUSH2",
      "value": "0x6C6"
    },
    "1729": {
      "op": "DUP4"
    },
    "1730": {
      "op": "PUSH2",
      "value": "0x606"
    },
    "1733": {
      "jump": "i",
      "op": "JUMP"
    },
    "1734": {
      "op": "JUMPDEST"
    },
    "1735": {
      "op": "SWAP5"
    },
    "1736": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1738": {
      "op": "SWAP4"
    },
    "1739": {
      "op": "SWAP1"
    },
    "1740": {
      "op": "SWAP4"
    },
    "1741": {
      "op": "ADD"
    },
    "1742": {
      "op": "CALLDATALOAD"
    },
    "1743": {
      "op": "SWAP4"
    },
    "1744": {
      "op": "POP"
    },
    "1745": {
      "op": "POP"
    },
    "1746": {
      "op": "POP"
    },
    "1747": {
      "jump": "o",
      "op": "JUMP"
    },
    "1748": {
      "op": "JUMPDEST"
    },
    "1749": {
      "op": "SWAP1"
    },
    "1750": {
      "op": "ISZERO"
    },
    "1751": {
      "op": "ISZERO"
    },
    "1752": {
      "op": "DUP2"
    },
    "1753": {
      "op": "MSTORE"
    },
    "1754": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1756": {
      "op": "ADD"
    },
    "1757": {
      "op": "SWAP1"
    },
    "1758": {
      "jump": "o",
      "op": "JUMP"
    },
    "1759": {
      "op": "JUMPDEST"
    },
    "1760": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1762": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1764": {
      "op": "DUP1"
    },
    "1765": {
      "op": "DUP4"
    },
    "1766": {
      "op": "MSTORE"
    },
    "1767": {
      "op": "DUP4"
    },
    "1768": {
      "op": "MLOAD"
    },
    "1769": {
      "op": "DUP1"
    },
    "1770": {
      "op": "DUP3"
    },
    "1771": {
      "op": "DUP6"
    },
    "1772": {
      "op": "ADD"
    },
    "1773": {
      "op": "MSTORE"
    },
    "1774": {
      "op": "DUP3"
    },
    "1775": {
      "op": "JUMPDEST"
    },
    "1776": {
      "op": "DUP2"
    },
    "1777": {
      "op": "DUP2"
    },
    "1778": {
      "op": "LT"
    },
    "1779": {
      "op": "ISZERO"
    },
    "1780": {
      "op": "PUSH2",
      "value": "0x70B"
    },
    "1783": {
      "op": "JUMPI"
    },
    "1784": {
      "op": "DUP6"
    },
    "1785": {
      "op": "DUP2"
    },
    "1786": {
      "op": "ADD"
    },
    "1787": {
      "op": "DUP4"
    },
    "1788": {
      "op": "ADD"
    },
    "1789": {
      "op": "MLOAD"
    },
    "1790": {
      "op": "DUP6"
    },
    "1791": {
      "op": "DUP3"
    },
    "1792": {
      "op": "ADD"
    },
    "1793": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "1795": {
      "op": "ADD"
    },
    "1796": {
      "op": "MSTORE"
    },
    "1797": {
      "op": "DUP3"
    },
    "1798": {
      "op": "ADD"
    },
    "1799": {
      "op": "PUSH2",
      "value": "0x6EF"
    },
    "1802": {
      "op": "JUMP"
    },
    "1803": {
      "op": "JUMPDEST"
    },
    "1804": {
      "op": "DUP2"
    },
    "1805": {
      "op": "DUP2"
    },
    "1806": {
      "op": "GT"
    },
    "1807": {
      "op": "ISZERO"
    },
    "1808": {
      "op": "PUSH2",
      "value": "0x71C"
    },
    "1811": {
      "op": "JUMPI"
    },
    "1812": {
      "op": "DUP4"
    },
    "1813": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "1815": {
      "op": "DUP4"
    },
    "1816": {
      "op": "DUP8"
    },
    "1817": {
      "op": "ADD"
    },
    "1818": {
      "op": "ADD"
    },
    "1819": {
      "op": "MSTORE"
    },
    "1820": {
      "op": "JUMPDEST"
    },
    "1821": {
      "op": "POP"
    },
    "1822": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "1824": {
      "op": "ADD"
    },
    "1825": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "1827": {
      "op": "NOT"
    },
    "1828": {
      "op": "AND"
    },
    "1829": {
      "op": "SWAP3"
    },
    "1830": {
      "op": "SWAP1"
    },
    "1831": {
      "op": "SWAP3"
    },
    "1832": {
      "op": "ADD"
    },
    "1833": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "1835": {
      "op": "ADD"
    },
    "1836": {
      "op": "SWAP4"
    },
    "1837": {
      "op": "SWAP3"
    },
    "1838": {
      "op": "POP"
    },
    "1839": {
      "op": "POP"
    },
    "1840": {
      "op": "POP"
    },
    "1841": {
      "jump": "o",
      "op": "JUMP"
    },
    "1842": {
      "op": "JUMPDEST"
    },
    "1843": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1845": {
      "op": "DUP1"
    },
    "1846": {
      "op": "DUP3"
    },
    "1847": {
      "op": "MSTORE"
    },
    "1848": {
      "op": "PUSH1",
      "value": "0x23"
    },
    "1850": {
      "op": "SWAP1"
    },
    "1851": {
      "op": "DUP3"
    },
    "1852": {
      "op": "ADD"
    },
    "1853": {
      "op": "MSTORE"
    },
    "1854": {
      "op": "PUSH32",
      "value": "0x45524332303A207472616E7366657220746F20746865207A65726F2061646472"
    },
    "1887": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "1889": {
      "op": "DUP3"
    },
    "1890": {
      "op": "ADD"
    },
    "1891": {
      "op": "MSTORE"
    },
    "1892": {
      "op": "PUSH3",
      "value": "0x657373"
    },
    "1896": {
      "op": "PUSH1",
      "value": "0xE8"
    },
    "1898": {
      "op": "SHL"
    },
    "1899": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "1901": {
      "op": "DUP3"
    },
    "1902": {
      "op": "ADD"
    },
    "1903": {
      "op": "MSTORE"
    },
    "1904": {
      "op": "PUSH1",
      "value": "0x80"
    },
    "1906": {
      "op": "ADD"
    },
    "1907": {
      "op": "SWAP1"
    },
    "1908": {
      "jump": "o",
      "op": "JUMP"
    },
    "1909": {
      "op": "JUMPDEST"
    },
    "1910": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1912": {
      "op": "DUP1"
    },
    "1913": {
      "op": "DUP3"
    },
    "1914": {
      "op": "MSTORE"
    },
    "1915": {
      "op": "PUSH1",
      "value": "0x22"
    },
    "1917": {
      "op": "SWAP1"
    },
    "1918": {
      "op": "DUP3"
    },
    "1919": {
      "op": "ADD"
    },
    "1920": {
      "op": "MSTORE"
    },
    "1921": {
      "op": "PUSH32",
      "value": "0x45524332303A20617070726F766520746F20746865207A65726F206164647265"
    },
    "1954": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "1956": {
      "op": "DUP3"
    },
    "1957": {
      "op": "ADD"
    },
    "1958": {
      "op": "MSTORE"
    },
    "1959": {
      "op": "PUSH2",
      "value": "0x7373"
    },
    "1962": {
      "op": "PUSH1",
      "value": "0xF0"
    },
    "1964": {
      "op": "SHL"
    },
    "1965": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "1967": {
      "op": "DUP3"
    },
    "1968": {
      "op": "ADD"
    },
    "1969": {
      "op": "MSTORE"
    },
    "1970": {
      "op": "PUSH1",
      "value": "0x80"
    },
    "1972": {
      "op": "ADD"
    },
    "1973": {
      "op": "SWAP1"
    },
    "1974": {
      "jump": "o",
      "op": "JUMP"
    },
    "1975": {
      "op": "JUMPDEST"
    },
    "1976": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1978": {
      "op": "DUP1"
    },
    "1979": {
      "op": "DUP3"
    },
    "1980": {
      "op": "MSTORE"
    },
    "1981": {
      "op": "PUSH1",
      "value": "0x26"
    },
    "1983": {
      "op": "SWAP1"
    },
    "1984": {
      "op": "DUP3"
    },
    "1985": {
      "op": "ADD"
    },
    "1986": {
      "op": "MSTORE"
    },
    "1987": {
      "op": "PUSH32",
      "value": "0x45524332303A207472616E7366657220616D6F756E7420657863656564732062"
    },
    "2020": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "2022": {
      "op": "DUP3"
    },
    "2023": {
      "op": "ADD"
    },
    "2024": {
      "op": "MSTORE"
    },
    "2025": {
      "op": "PUSH6",
      "value": "0x616C616E6365"
    },
    "2032": {
      "op": "PUSH1",
      "value": "0xD0"
    },
    "2034": {
      "op": "SHL"
    },
    "2035": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "2037": {
      "op": "DUP3"
    },
    "2038": {
      "op": "ADD"
    },
    "2039": {
      "op": "MSTORE"
    },
    "2040": {
      "op": "PUSH1",
      "value": "0x80"
    },
    "2042": {
      "op": "ADD"
    },
    "2043": {
      "op": "SWAP1"
    },
    "2044": {
      "jump": "o",
      "op": "JUMP"
    },
    "2045": {
      "op": "JUMPDEST"
    },
    "2046": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "2048": {
      "op": "DUP1"
    },
    "2049": {
      "op": "DUP3"
    },
    "2050": {
      "op": "MSTORE"
    },
    "2051": {
      "op": "PUSH1",
      "value": "0x28"
    },
    "2053": {
      "op": "SWAP1"
    },
    "2054": {
      "op": "DUP3"
    },
    "2055": {
      "op": "ADD"
    },
    "2056": {
      "op": "MSTORE"
    },
    "2057": {
      "op": "PUSH32",
      "value": "0x45524332303A207472616E7366657220616D6F756E7420657863656564732061"
    },
    "2090": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "2092": {
      "op": "DUP3"
    },
    "2093": {
      "op": "ADD"
    },
    "2094": {
      "op": "MSTORE"
    },
    "2095": {
      "op": "PUSH8",
      "value": "0x6C6C6F77616E6365"
    },
    "2104": {
      "op": "PUSH1",
      "value": "0xC0"
    },
    "2106": {
      "op": "SHL"
    },
    "2107": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "2109": {
      "op": "DUP3"
    },
    "2110": {
      "op": "ADD"
    },
    "2111": {
      "op": "MSTORE"
    },
    "2112": {
      "op": "PUSH1",
      "value": "0x80"
    },
    "2114": {
      "op": "ADD"
    },
    "2115": {
      "op": "SWAP1"
    },
    "2116": {
      "jump": "o",
      "op": "JUMP"
    },
    "2117": {
      "op": "JUMPDEST"
    },
    "2118": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "2120": {
      "op": "DUP1"
    },
    "2121": {
      "op": "DUP3"
    },
    "2122": {
      "op": "MSTORE"
    },
    "2123": {
      "op": "PUSH1",
      "value": "0x25"
    },
    "2125": {
      "op": "SWAP1"
    },
    "2126": {
      "op": "DUP3"
    },
    "2127": {
      "op": "ADD"
    },
    "2128": {
      "op": "MSTORE"
    },
    "2129": {
      "op": "PUSH32",
      "value": "0x45524332303A207472616E736665722066726F6D20746865207A65726F206164"
    },
    "2162": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "2164": {
      "op": "DUP3"
    },
    "2165": {
      "op": "ADD"
    },
    "2166": {
      "op": "MSTORE"
    },
    "2167": {
      "op": "PUSH5",
      "value": "0x6472657373"
    },
    "2173": {
      "op": "PUSH1",
      "value": "0xD8"
    },
    "2175": {
      "op": "SHL"
    },
    "2176": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "2178": {
      "op": "DUP3"
    },
    "2179": {
      "op": "ADD"
    },
    "2180": {
      "op": "MSTORE"
    },
    "2181": {
      "op": "PUSH1",
      "value": "0x80"
    },
    "2183": {
      "op": "ADD"
    },
    "2184": {
      "op": "SWAP1"
    },
    "2185": {
      "jump": "o",
      "op": "JUMP"
    },
    "2186": {
      "op": "JUMPDEST"
    },
    "2187": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "2189": {
      "op": "DUP1"
    },
    "2190": {
      "op": "DUP3"
    },
    "2191": {
      "op": "MSTORE"
    },
    "2192": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "2194": {
      "op": "SWAP1"
    },
    "2195": {
      "op": "DUP3"
    },
    "2196": {
      "op": "ADD"
    },
    "2197": {
      "op": "MSTORE"
    },
    "2198": {
      "op": "PUSH32",
      "value": "0x45524332303A20617070726F76652066726F6D20746865207A65726F20616464"
    },
    "2231": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "2233": {
      "op": "DUP3"
    },
    "2234": {
      "op": "ADD"
    },
    "2235": {
      "op": "MSTORE"
    },
    "2236": {
      "op": "PUSH4",
      "value": "0x72657373"
    },
    "2241": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "2243": {
      "op": "SHL"
    },
    "2244": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "2246": {
      "op": "DUP3"
    },
    "2247": {
      "op": "ADD"
    },
    "2248": {
      "op": "MSTORE"
    },
    "2249": {
      "op": "PUSH1",
      "value": "0x80"
    },
    "2251": {
      "op": "ADD"
    },
    "2252": {
      "op": "SWAP1"
    },
    "2253": {
      "jump": "o",
      "op": "JUMP"
    },
    "2254": {
      "op": "JUMPDEST"
    },
    "2255": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "2257": {
      "op": "DUP1"
    },
    "2258": {
      "op": "DUP3"
    },
    "2259": {
      "op": "MSTORE"
    },
    "2260": {
      "op": "PUSH1",
      "value": "0x25"
    },
    "2262": {
      "op": "SWAP1"
    },
    "2263": {
      "op": "DUP3"
    },
    "2264": {
      "op": "ADD"
    },
    "2265": {
      "op": "MSTORE"
    },
    "2266": {
      "op": "PUSH32",
      "value": "0x45524332303A2064656372656173656420616C6C6F77616E63652062656C6F77"
    },
    "2299": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "2301": {
      "op": "DUP3"
    },
    "2302": {
      "op": "ADD"
    },
    "2303": {
      "op": "MSTORE"
    },
    "2304": {
      "op": "PUSH5",
      "value": "0x207A65726F"
    },
    "2310": {
      "op": "PUSH1",
      "value": "0xD8"
    },
    "2312": {
      "op": "SHL"
    },
    "2313": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "2315": {
      "op": "DUP3"
    },
    "2316": {
      "op": "ADD"
    },
    "2317": {
      "op": "MSTORE"
    },
    "2318": {
      "op": "PUSH1",
      "value": "0x80"
    },
    "2320": {
      "op": "ADD"
    },
    "2321": {
      "op": "SWAP1"
    },
    "2322": {
      "jump": "o",
      "op": "JUMP"
    },
    "2323": {
      "op": "JUMPDEST"
    },
    "2324": {
      "op": "SWAP1"
    },
    "2325": {
      "op": "DUP2"
    },
    "2326": {
      "op": "MSTORE"
    },
    "2327": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "2329": {
      "op": "ADD"
    },
    "2330": {
      "op": "SWAP1"
    },
    "2331": {
      "jump": "o",
      "op": "JUMP"
    },
    "2332": {
      "op": "JUMPDEST"
    },
    "2333": {
      "op": "PUSH1",
      "value": "0xFF"
    },
    "2335": {
      "op": "SWAP2"
    },
    "2336": {
      "op": "SWAP1"
    },
    "2337": {
      "op": "SWAP2"
    },
    "2338": {
      "op": "AND"
    },
    "2339": {
      "op": "DUP2"
    },
    "2340": {
      "op": "MSTORE"
    },
    "2341": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "2343": {
      "op": "ADD"
    },
    "2344": {
      "op": "SWAP1"
    },
    "2345": {
      "jump": "o",
      "op": "JUMP"
    },
    "2346": {
      "op": "JUMPDEST"
    },
    "2347": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2349": {
      "op": "DUP3"
    },
    "2350": {
      "op": "NOT"
    },
    "2351": {
      "op": "DUP3"
    },
    "2352": {
      "op": "GT"
    },
    "2353": {
      "op": "ISZERO"
    },
    "2354": {
      "op": "PUSH2",
      "value": "0x93D"
    },
    "2357": {
      "op": "JUMPI"
    },
    "2358": {
      "op": "PUSH2",
      "value": "0x93D"
    },
    "2361": {
      "op": "PUSH2",
      "value": "0x994"
    },
    "2364": {
      "jump": "i",
      "op": "JUMP"
    },
    "2365": {
      "op": "JUMPDEST"
    },
    "2366": {
      "op": "POP"
    },
    "2367": {
      "op": "ADD"
    },
    "2368": {
      "op": "SWAP1"
    },
    "2369": {
      "jump": "o",
      "op": "JUMP"
    },
    "2370": {
      "op": "JUMPDEST"
    },
    "2371": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2373": {
      "op": "DUP3"
    },
    "2374": {
      "op": "DUP3"
    },
    "2375": {
      "op": "LT"
    },
    "2376": {
      "op": "ISZERO"
    },
    "2377": {
      "op": "PUSH2",
      "value": "0x954"
    },
    "2380": {
      "op": "JUMPI"
    },
    "2381": {
      "op": "PUSH2",
      "value": "0x954"
    },
    "2384": {
      "op": "PUSH2",
      "value": "0x994"
    },
    "2387": {
      "jump": "i",
      "op": "JUMP"
    },
    "2388": {
      "op": "JUMPDEST"
    },
    "2389": {
      "op": "POP"
    },
    "2390": {
      "op": "SUB"
    },
    "2391": {
      "op": "SWAP1"
    },
    "2392": {
      "jump": "o",
      "op": "JUMP"
    },
    "2393": {
      "op": "JUMPDEST"
    },
    "2394": {
      "op": "PUSH1",
      "value": "0x2"
    },
    "2396": {
      "op": "DUP2"
    },
    "2397": {
      "op": "DIV"
    },
    "2398": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2400": {
      "op": "DUP3"
    },
    "2401": {
      "op": "AND"
    },
    "2402": {
      "op": "DUP1"
    },
    "2403": {
      "op": "PUSH2",
      "value": "0x96D"
    },
    "2406": {
      "op": "JUMPI"
    },
    "2407": {
      "op": "PUSH1",
      "value": "0x7F"
    },
    "2409": {
      "op": "DUP3"
    },
    "2410": {
      "op": "AND"
    },
    "2411": {
      "op": "SWAP2"
    },
    "2412": {
      "op": "POP"
    },
    "2413": {
      "op": "JUMPDEST"
    },
    "2414": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "2416": {
      "op": "DUP3"
    },
    "2417": {
      "op": "LT"
    },
    "2418": {
      "op": "DUP2"
    },
    "2419": {
      "op": "EQ"
    },
    "2420": {
      "op": "ISZERO"
    },
    "2421": {
      "op": "PUSH2",
      "value": "0x98E"
    },
    "2424": {
      "op": "JUMPI"
    },
    "2425": {
      "op": "PUSH4",
      "value": "0x4E487B71"
    },
    "2430": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "2432": {
      "op": "SHL"
    },
    "2433": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2435": {
      "op": "MSTORE"
    },
    "2436": {
      "op": "PUSH1",
      "value": "0x22"
    },
    "2438": {
      "op": "PUSH1",
      "value": "0x4"
    },
    "2440": {
      "op": "MSTORE"
    },
    "2441": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "2443": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2445": {
      "op": "REVERT"
    },
    "2446": {
      "op": "JUMPDEST"
    },
    "2447": {
      "op": "POP"
    },
    "2448": {
      "op": "SWAP2"
    },
    "2449": {
      "op": "SWAP1"
    },
    "2450": {
      "op": "POP"
    },
    "2451": {
      "jump": "o",
      "op": "JUMP"
    },
    "2452": {
      "op": "JUMPDEST"
    },
    "2453": {
      "op": "PUSH4",
      "value": "0x4E487B71"
    },
    "2458": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "2460": {
      "op": "SHL"
    },
    "2461": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2463": {
      "op": "MSTORE"
    },
    "2464": {
      "op": "PUSH1",
      "value": "0x11"
    },
    "2466": {
      "op": "PUSH1",
      "value": "0x4"
    },
    "2468": {
      "op": "MSTORE"
    },
    "2469": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "2471": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2473": {
      "op": "REVERT"
    }
  },
  "sha1": "b156e38d21deab5f779a5cd4fbce705efe3f2a94",
  "source": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin guidelines: functions revert instead\n * of returning `false` on failure. This behavior is nonetheless conventional\n * and does not conflict with the expectations of ERC20 applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20 {\n    mapping (address => uint256) private _balances;\n\n    mapping (address => mapping (address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The defaut value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All three of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor (string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overloaded;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * Requirements:\n     *\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``sender``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\n        _approve(sender, _msgSender(), currentAllowance - amount);\n\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        _approve(_msgSender(), spender, currentAllowance - subtractedValue);\n\n        return true;\n    }\n\n    /**\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\n     *\n     * This is internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        uint256 senderBalance = _balances[sender];\n        require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        _balances[sender] = senderBalance - amount;\n        _balances[recipient] += amount;\n\n        emit Transfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        _balances[account] = accountBalance - amount;\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be to transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\n}\n",
  "sourceMap": "1279:9238:3:-:0;;;1842:114;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1909:13;;;;:5;;:13;;;;;:::i;:::-;-1:-1:-1;1932:17:3;;;;:7;;:17;;;;;:::i;:::-;;1842:114;;1279:9238;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1279:9238:3;;;-1:-1:-1;1279:9238:3;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;14:881:11;;123:3;116:4;108:6;104:17;100:27;90:2;;145:5;138;131:20;90:2;172:13;;-1:-1:-1;;;;;234:10:11;;;231:2;;;247:18;;:::i;:::-;296:2;290:9;318:4;388:2;369:13;;-1:-1:-1;;365:27:11;353:40;;349:49;;413:18;;;433:22;;;410:46;407:2;;;459:18;;:::i;:::-;495:2;488:22;519:18;;;556:15;;;552:24;;549:33;-1:-1:-1;546:2:11;;;599:5;592;585:20;546:2;625:5;616:14;;639:133;653:2;650:1;647:9;639:133;;;741:14;;;737:23;;731:30;710:14;;;706:23;;699:63;664:10;;;;639:133;;;790:2;787:1;784:9;781:2;;;849:5;844:2;839;831:6;827:15;823:24;816:39;781:2;-1:-1:-1;883:6:11;80:815;-1:-1:-1;;;;;80:815:11:o;900:596::-;;;1060:2;1048:9;1039:7;1035:23;1031:32;1028:2;;;1081:6;1073;1066:22;1028:2;1113:16;;-1:-1:-1;;;;;1178:14:11;;;1175:2;;;1210:6;1202;1195:22;1175:2;1238:63;1293:7;1284:6;1273:9;1269:22;1238:63;:::i;:::-;1228:73;;1347:2;1336:9;1332:18;1326:25;1310:41;;1376:2;1366:8;1363:16;1360:2;;;1397:6;1389;1382:22;1360:2;;1425:65;1482:7;1471:8;1460:9;1456:24;1425:65;:::i;:::-;1415:75;;;1018:478;;;;;:::o;1501:380::-;1586:1;1576:12;;1633:1;1623:12;;;1644:2;;1698:4;1690:6;1686:17;1676:27;;1644:2;1751;1743:6;1740:14;1720:18;1717:38;1714:2;;;1797:10;1792:3;1788:20;1785:1;1778:31;1832:4;1829:1;1822:15;1860:4;1857:1;1850:15;1714:2;;1556:325;;;:::o;1886:127::-;1947:10;1942:3;1938:20;1935:1;1928:31;1978:4;1975:1;1968:15;2002:4;1999:1;1992:15;1918:95;1279:9238:3;;;;;;",
  "sourcePath": "/home/ilijapet/.brownie/packages/OpenZeppelin/openzeppelin-contracts@4.0.0/contracts/token/ERC20/ERC20.sol",
  "type": "contract"
}